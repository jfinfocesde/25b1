{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenidos-al-submodulo-backend-1","title":"\ud83d\ude80 Bienvenidos al Subm\u00f3dulo Backend 1","text":"<p>\u00a1Bienvenidos a este emocionante viaje hacia el mundo de la programaci\u00f3n orientada a objetos (POO), el control de versiones y las herramientas modernas para el desarrollo de software! Este curso est\u00e1 dise\u00f1ado para introducirte en conceptos fundamentales de POO, as\u00ed como en tecnolog\u00edas esenciales como Java, Git/GitHub, JPA/Hibernate y m\u00e1s, que son ampliamente utilizadas en la industria moderna. Ya seas un principiante o alguien con experiencia previa en tecnolog\u00eda, este curso te brindar\u00e1 las habilidades pr\u00e1cticas necesarias para destacar en el mundo del desarrollo de software.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>Este curso abarca una amplia gama de temas fundamentales y avanzados, organizados en m\u00f3dulos espec\u00edficos:</p>"},{"location":"#1-pacto-pedagogico-y-retos-empresariales","title":"1. Pacto Pedag\u00f3gico y Retos Empresariales","text":"<ul> <li>Pacto Pedag\u00f3gico: Comprender\u00e1s las bases del compromiso acad\u00e9mico y los valores que guiar\u00e1n tu aprendizaje.</li> <li>Retos empresariales: Identificar\u00e1s los desaf\u00edos reales del sector empresarial que resolver\u00e1s en el Proyecto Integrador.</li> </ul>"},{"location":"#2-introduccion-a-la-programacion-orientada-a-objetos-poo","title":"2. Introducci\u00f3n a la Programaci\u00f3n Orientada a Objetos (POO)","text":"<ul> <li>Generalidades y definiciones: Aprender\u00e1s qu\u00e9 es la POO, qu\u00e9 es un objeto, y c\u00f3mo aplicar la abstracci\u00f3n mediante clases.</li> <li>Modularidad: Entender\u00e1s c\u00f3mo dividir problemas complejos en componentes m\u00e1s peque\u00f1os y manejables.</li> <li>Generalidades de Java: Descubrir\u00e1s qu\u00e9 es Java, su relevancia en el desarrollo de software, y c\u00f3mo configurar tu entorno de desarrollo con el Java Development Kit (JDK).</li> </ul>"},{"location":"#3-atributos-de-una-clase","title":"3. Atributos de una Clase","text":"<ul> <li>Datos primitivos y clases envolventes: Explorar\u00e1s los tipos de datos b\u00e1sicos y sus equivalentes en clases envolventes.</li> <li>Casteo y parseo de datos: Aprender\u00e1s a convertir entre diferentes tipos de datos para garantizar la integridad de la informaci\u00f3n.</li> </ul>"},{"location":"#4-metodos-especiales-de-una-clase","title":"4. M\u00e9todos Especiales de una Clase","text":"<ul> <li>Constructores: Dominar\u00e1s la creaci\u00f3n de constructores vac\u00edos y con par\u00e1metros.</li> <li>Encapsulamiento: Aprender\u00e1s a proteger tus datos utilizando m\u00e9todos de acceso (GETTERS y SETTERS).</li> <li>Control de versiones: Utilizar\u00e1s Git/GitHub para versionar tu c\u00f3digo y colaborar en proyectos.</li> </ul>"},{"location":"#5-metodos-generales-de-una-clase","title":"5. M\u00e9todos Generales de una Clase","text":"<ul> <li>L\u00f3gica de negocio: Construir\u00e1s la l\u00f3gica central de tus aplicaciones.</li> <li>Uso del operador <code>this</code>: Aprender\u00e1s a diferenciar entre variables locales y globales dentro de una clase.</li> <li>Sobrecarga de m\u00e9todos: Implementar\u00e1s m\u00faltiples m\u00e9todos con el mismo nombre pero diferentes par\u00e1metros.</li> <li>Manejo de excepciones: Garantizar\u00e1s que tus aplicaciones manejen errores de manera eficiente.</li> </ul>"},{"location":"#6-herencia-en-poo","title":"6. Herencia en POO","text":"<ul> <li>Concepto de herencia: Aprender\u00e1s a reutilizar c\u00f3digo mediante la relaci\u00f3n entre clases base y derivadas.</li> <li>Palabra reservada <code>super</code>: Llamar\u00e1s a m\u00e9todos y constructores de la clase padre.</li> <li>Herencia simple y m\u00faltiple: Entender\u00e1s las diferencias y casos de uso.</li> </ul>"},{"location":"#7-polimorfismo-en-poo","title":"7. Polimorfismo en POO","text":"<ul> <li>Concepto de polimorfismo: Aprender\u00e1s c\u00f3mo una misma acci\u00f3n puede comportarse de manera diferente seg\u00fan el contexto.</li> <li>Relaci\u00f3n entre clases base y derivadas: Implementar\u00e1s polimorfismo en tus proyectos.</li> </ul>"},{"location":"#8-clases-abstractas-e-interfaces","title":"8. Clases Abstractas e Interfaces","text":"<ul> <li>Clases abstractas: Crear\u00e1s clases que no pueden ser instanciadas directamente.</li> <li>M\u00e9todos abstractos: Definir\u00e1s m\u00e9todos que deben ser implementados por clases derivadas.</li> <li>Interfaces: Aprender\u00e1s a declarar e implementar interfaces utilizando la palabra clave <code>implements</code>.</li> </ul>"},{"location":"#9-gestores-de-dependencias-en-java","title":"9. Gestores de Dependencias en Java","text":"<ul> <li>Maven y Gradle: Configurar\u00e1s y gestionar\u00e1s dependencias en tus proyectos.</li> <li>Integraci\u00f3n con IDEs: Aprender\u00e1s a trabajar con gestores de dependencias en entornos de desarrollo integrados.</li> </ul>"},{"location":"#10-jpa-hibernate-conexion-con-bases-de-datos","title":"10. JPA + Hibernate: Conexi\u00f3n con Bases de Datos","text":"<ul> <li>Configuraci\u00f3n de conexi\u00f3n: Establecer\u00e1s conexiones con bases de datos utilizando JPA y Hibernate.</li> <li>Mapeo de entidades: Relacionar\u00e1s tus clases Java con tablas de bases de datos.</li> <li>Operaciones CRUD: Implementar\u00e1s operaciones de persistencia para crear, leer, actualizar y eliminar datos.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del Curso","text":"<p>El curso combina teor\u00eda y pr\u00e1ctica para garantizar que aprendas de manera efectiva:</p> <ul> <li>Clases te\u00f3ricas: Explicaciones claras y concisas sobre los conceptos fundamentales.</li> <li>Laboratorios pr\u00e1cticos: Ejercicios guiados para aplicar lo aprendido en entornos controlados.</li> <li>Proyectos integradores: Desarrollo de soluciones completas que integran POO, Git/GitHub, JPA/Hibernate y otras herramientas.</li> </ul>"},{"location":"#compromiso-del-cesde","title":"Compromiso del CESDE","text":"<p>En el CESDE, estamos comprometidos con tu \u00e9xito. Este curso no solo busca ense\u00f1arte herramientas tecnol\u00f3gicas, sino tambi\u00e9n inspirarte a ser un agente de cambio en el mundo digital. Nuestro objetivo es que al finalizar este programa, tengas la confianza y las habilidades necesarias para enfrentar cualquier desaf\u00edo tecnol\u00f3gico.</p>"},{"location":"#comencemos-este-viaje-juntos","title":"\u00a1Comencemos este viaje juntos!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s creando soluciones innovadoras, desarrollando aplicaciones robustas y colaborando en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1Bienvenido al futuro de la tecnolog\u00eda!</p>"},{"location":"about/","title":"About","text":"<p>Es una iniciativa educativa del CESDE, dise\u00f1ada para introducir a los estudiantes en conceptos fundamentales de programaci\u00f3n orientada a objetos (POO) y herramientas clave como Java, Git/GitHub, JPA/Hibernate y m\u00e1s. Este curso combina teor\u00eda y pr\u00e1ctica para brindar una base s\u00f3lida en desarrollo de software, control de versiones y la implementaci\u00f3n de soluciones tecnol\u00f3gicas innovadoras.</p>"},{"location":"about/#docente-del-curso","title":"Docente del Curso","text":"<p>\u00a1Hola a todos! Soy Jhon Fredy Valencia G\u00f3mez, su docente para este programa de Desarrollo de Software. Me emociona mucho darles la bienvenida y comenzar este viaje de aprendizaje juntos.  </p> <p>En este programa, mi objetivo es proporcionarles una formaci\u00f3n pr\u00e1ctica y completa en el desarrollo de software utilizando metodolog\u00edas y herramientas modernas. Mi enfoque se basa en el aprendizaje activo, utilizando ejercicios guiados, proyectos integradores y casos de estudio que les permitir\u00e1n aplicar inmediatamente lo aprendido en situaciones reales.  </p> <p>Mi experiencia en el CESDE y el SENA me ha ense\u00f1ado la importancia de una ense\u00f1anza clara, accesible y motivadora. Estoy comprometido con su \u00e9xito y har\u00e9 todo lo posible para apoyarlos en cada etapa del proceso de aprendizaje, respondiendo a sus dudas y brind\u00e1ndoles la retroalimentaci\u00f3n que necesitan para crecer profesionalmente.</p>"},{"location":"about/#proposito-del-curso","title":"Prop\u00f3sito del Curso","text":"<p>Este curso busca capacitar a los estudiantes en el uso de herramientas y metodolog\u00edas modernas para resolver problemas reales, desde el dise\u00f1o de sistemas orientados a objetos hasta la implementaci\u00f3n de bases de datos y el control de versiones en proyectos colaborativos. Al finalizar, los participantes estar\u00e1n preparados para:  </p> <ul> <li>Aplicar principios de POO en el desarrollo de software.  </li> <li>Utilizar Java como lenguaje principal para la construcci\u00f3n de aplicaciones robustas.  </li> <li>Implementar sistemas de control de versiones con Git/GitHub para gestionar proyectos de manera eficiente.  </li> <li>Conectar aplicaciones con bases de datos utilizando JPA/Hibernate.  </li> </ul> <p>Estos conocimientos les permitir\u00e1n destacar en entornos profesionales y colaborar en proyectos tecnol\u00f3gicos de alto impacto.  </p> <p>\u00a1\u00danete a nosotros y comienza tu camino hacia el futuro del desarrollo de software!</p>"},{"location":"activities/p1/","title":"Semana 2 - Actividad","text":"<ol> <li>Inicia sesi\u00f3n en GitHub.</li> <li>Ve a https://github.com/jfinfocesde/b1s2.git.</li> <li>Haz clic en Fork (arriba a la derecha) y selecciona tu cuenta.</li> <li>Clona tu fork:    <pre><code>git clone https://github.com/tu-usuario/b1s2.git\ncd b1s2\n</code></pre></li> </ol>"},{"location":"activities/p2/","title":"Semana 3 - Actividad: Programaci\u00f3n Orientada a Objetos en Java y Uso de Repositorio Git/GitHub","text":""},{"location":"activities/p2/#contexto","title":"Contexto","text":"<p>Esta actividad est\u00e1 dise\u00f1ada para estudiantes de programaci\u00f3n en una instituci\u00f3n educativa en Colombia, con un enfoque en aprender los conceptos b\u00e1sicos de Programaci\u00f3n Orientada a Objetos (POO) en Java, incluyendo atributos y m\u00e9todos, y practicar el uso de un repositorio en Git/GitHub para control de versiones. La actividad est\u00e1 pensada para ser clara, pr\u00e1ctica y adaptada al contexto colombiano, utilizando ejemplos relacionados con la cultura local.</p>"},{"location":"activities/p2/#objetivos","title":"Objetivos","text":"<ul> <li>Comprender y aplicar los conceptos de clases, objetos, atributos y m\u00e9todos en Java.</li> <li>Practicar la creaci\u00f3n y uso de un repositorio en Git/GitHub para gestionar el c\u00f3digo fuente.</li> <li>Desarrollar habilidades de trabajo colaborativo y documentaci\u00f3n en un entorno de desarrollo.</li> </ul>"},{"location":"activities/p2/#descripcion-de-la-actividad","title":"Descripci\u00f3n de la Actividad","text":"<p>Los estudiantes crear\u00e1n un programa en Java que simule una tienda de caf\u00e9 colombiano. La tienda manejar\u00e1 informaci\u00f3n de productos (granos de caf\u00e9) y permitir\u00e1 realizar operaciones b\u00e1sicas como agregar productos, mostrar inventario y calcular el precio total de los productos. Adem\u00e1s, los estudiantes configurar\u00e1n un repositorio en GitHub para almacenar y gestionar el c\u00f3digo, practicando comandos b\u00e1sicos de Git.</p>"},{"location":"activities/p2/#parte-1-programacion-orientada-a-objetos-en-java","title":"Parte 1: Programaci\u00f3n Orientada a Objetos en Java","text":""},{"location":"activities/p2/#instrucciones","title":"Instrucciones","text":"<ol> <li> <p>Crear una clase en Java:</p> </li> <li> <p>Crea una clase llamada <code>Cafe</code> que represente un producto de caf\u00e9 colombiano.</p> </li> <li>La clase debe tener los siguientes atributos:<ul> <li><code>nombre</code>: Nombre del caf\u00e9 (ejemplo: \"Caf\u00e9 de Nari\u00f1o\").</li> <li><code>region</code>: Regi\u00f3n de origen (ejemplo: \"Nari\u00f1o\", \"Antioquia\").</li> <li><code>precioPorKilo</code>: Precio por kilogramo en pesos colombianos (COP).</li> <li><code>cantidadEnKilos</code>: Cantidad disponible en kilogramos.</li> </ul> </li> <li> <p>La clase debe incluir los siguientes m\u00e9todos:</p> <ul> <li>Constructor para inicializar los atributos.</li> <li>M\u00e9todo <code>mostrarInformacion()</code>: Muestra los detalles del caf\u00e9.</li> <li>M\u00e9todo <code>calcularPrecioTotal()</code>: Calcula el precio total (<code>precioPorKilo * cantidadEnKilos</code>).</li> <li>M\u00e9todo <code>actualizarCantidad(float nuevaCantidad)</code>: Actualiza la cantidad disponible.</li> </ul> </li> <li> <p>Crear una clase principal:</p> </li> <li> <p>Crea una clase <code>TiendaCafe</code> con un m\u00e9todo <code>main</code>.</p> </li> <li>Instancia al menos tres objetos de la clase <code>Cafe</code> con datos de caf\u00e9s de diferentes regiones de Colombia.</li> <li> <p>Usa los m\u00e9todos de la clase <code>Cafe</code> para:</p> <ul> <li>Mostrar la informaci\u00f3n de cada caf\u00e9.</li> <li>Calcular y mostrar el precio total de cada caf\u00e9.</li> <li>Actualizar la cantidad de uno de los caf\u00e9s y mostrar la informaci\u00f3n actualizada.</li> </ul> </li> </ol>"},{"location":"activities/p2/#parte-2-uso-de-git-y-github","title":"Parte 2: Uso de Git y GitHub","text":""},{"location":"activities/p2/#instrucciones_1","title":"Instrucciones","text":"<ol> <li>Configurar el entorno de Git:</li> <li>Instala Git en tu computador si no lo tienes (<code>sudo apt install git</code> en Linux, o descarga desde git-scm.com para Windows/Mac).</li> <li> <p>Configura tu nombre y correo electr\u00f3nico:      <pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tu.email@ejemplo.com\"\n</code></pre></p> </li> <li> <p>Crear un repositorio en GitHub:</p> </li> <li>Ve a GitHub.com y crea un nuevo repositorio llamado <code>TiendaCafePOO</code>.</li> <li>Selecciona la opci\u00f3n de inicializar con un archivo <code>README.md</code>.</li> <li> <p>Copia la URL del repositorio (por ejemplo, <code>https://github.com/tu-usuario/TiendaCafePOO.git</code>).</p> </li> <li> <p>Clonar el repositorio y trabajar en local:</p> </li> <li>Clona el repositorio en tu computador:      <pre><code>git clone https://github.com/tu-usuario/TiendaCafePOO.git\ncd TiendaCafePOO\n</code></pre></li> <li>Crea un nuevo archivo para tu c\u00f3digo Java (por ejemplo, <code>Cafe.java</code> y <code>TiendaCafe.java</code>).</li> <li> <p>Copia el c\u00f3digo de la Parte 1 en los archivos correspondientes.</p> </li> <li> <p>Realizar commits y subir cambios:</p> </li> <li>A\u00f1ade los archivos al control de versiones:      <pre><code>git add .\n</code></pre></li> <li>Realiza un commit con un mensaje descriptivo:      <pre><code>git commit -m \"A\u00f1adir clases Cafe y TiendaCafe para la actividad de POO\"\n</code></pre></li> <li> <p>Sube los cambios al repositorio remoto:      <pre><code>git push origin main\n</code></pre></p> </li> <li> <p>Crear una rama y realizar cambios adicionales:</p> </li> <li>Crea una nueva rama llamada <code>mejoras</code>:      <pre><code>git checkout -b mejoras\n</code></pre></li> <li>Agrega un nuevo m\u00e9todo a la clase <code>Cafe</code>, por ejemplo, <code>aplicarDescuento(double porcentaje)</code> que reduzca el <code>precioPorKilo</code> seg\u00fan un porcentaje dado.</li> <li>Realiza un commit con los cambios:      <pre><code>git add .\ngit commit -m \"A\u00f1adir m\u00e9todo aplicarDescuento a la clase Cafe\"\n</code></pre></li> <li> <p>Sube la rama al repositorio:      <pre><code>git push origin mejoras\n</code></pre></p> </li> <li> <p>Crear un Pull Request:</p> </li> <li>En GitHub, crea un Pull Request desde la rama <code>mejoras</code> a la rama <code>main</code>.</li> <li>Describe los cambios realizados y solicita una revisi\u00f3n (puedes asignar a un compa\u00f1ero o al profesor).</li> </ol>"},{"location":"activities/p3/","title":"Semana 4 - Actividad Pr\u00e1ctica: Del mundo real a objetos Java","text":""},{"location":"activities/p3/#objetivo-de-la-actividad","title":"Objetivo de la actividad","text":"<p>Convertir tres ideas cotidianas de tu entorno inmediato (casa, colegio, trabajo, parque, redes sociales, transporte, etc.) en tres clases Java totalmente encapsuladas que cumplan todos los requisitos solicitados.</p>"},{"location":"activities/p3/#instrucciones-paso-a-paso","title":"Instrucciones paso a paso","text":""},{"location":"activities/p3/#1-fase-de-exploracion-individual-o-parejas","title":"1. Fase de exploraci\u00f3n (individual o parejas)","text":"<p>Recorre tu entorno f\u00edsico o digital y elige tres \u201ccosas\u201d que te rodeen y que posean al menos seis caracter\u00edsticas medibles o distinguibles. Ejemplos v\u00e1lidos:  </p> <ul> <li>Un cafe\u0301 de especialidad (origen, temperatura, tama\u00f1o, precio, intensidad, fechaTostado).  </li> <li>Un ticket de transporte urbano (l\u00ednea, origen, destino, precio, fecha, hora salida).  </li> <li>Un perfil de red social (alias, n\u00fameroSeguidores, n\u00fameroSiguiendo, fotoPerfil, biograf\u00eda, fechaRegistro).  </li> </ul> <p>Tip</p> <p>Intenta que los tres dominios sean diferentes entre s\u00ed para practicar m\u00e1s conceptos.</p>"},{"location":"activities/p3/#2-diseno-uml-rapido","title":"2. Dise\u00f1o UML r\u00e1pido","text":"<p>Antes de tocar c\u00f3digo, dibuja en una libreta o en app.diagrams.net un diagrama de clases muy sencillo que contenga:</p> <ul> <li>Nombre de la clase centrado.  </li> <li>Secci\u00f3n de atributos (visibilidad <code>\u2013</code> + tipo + nombre).  </li> <li>Secci\u00f3n de constructores y m\u00e9todos (visibilidad <code>+</code>).  </li> </ul> <p>Ejemplo parcial para la clase <code>CafeEspecialidad</code>:</p> <pre><code>--------------------------\n|    - origen: String    |\n|    - temp: double      |\n|    - tamanio: int      |\n|    - precio: BigDecimal|\n|    - intensidad: int   |\n|    - fechaTostado: LocalDate |\n--------------------------\n| + CafeEspecialidad()          |\n| + CafeEspecialidad(...)       |\n| + get...() / set...()         |\n| + toString()                  |\n--------------------------\n</code></pre>"},{"location":"activities/p3/#3-implementacion-en-java","title":"3. Implementaci\u00f3n en Java","text":"<p>Crea un proyecto Maven o Gradle llamado EntornoPOO y dentro el paquete <code>modelo</code>. Cada clase debe cumplir todas y cada una de las siguientes especificaciones:</p> Requisito Detalle Atributos M\u00ednimo 6 atributos de tipos variados (al menos: <code>String</code>, primitivo num\u00e9rico, <code>boolean</code>, tipo fecha o decimal, un objeto propio o <code>List</code>). Encapsulamiento Todos los atributos private. Constructor vac\u00edo Constructor sin par\u00e1metros que inicialice valores por defecto razonables. Constructor por defecto Sin\u00f3nimo del vac\u00edo; si ya existe, d\u00e9jalo. Si tu IDE genera uno con valores por defecto, reg\u00edstralo con comentario <code>// Constructor por defecto</code>. Constructor con par\u00e1metros Constructor que reciba los 6 atributos y los asigne usando los setters para reutilizar validaciones. Getters y Setters Un par por atributo. Los setters deben validar (ej. no negativos, rangos, no nulos). toString() Override que devuelva una cadena legible con todos los atributos."},{"location":"activities/p3/#4-validaciones-minimas-por-setter-ejemplos","title":"4. Validaciones m\u00ednimas por setter (ejemplos)","text":"Atributo Regla de ejemplo <code>precio</code> Mayor que 0, menor que 10 000. <code>fechaTostado</code> No futura, no anterior a 2010. <code>intensidad</code> Solo entre 1 y 10."},{"location":"activities/p3/#5-entregables","title":"5. Entregables","text":"<ol> <li>Repositorio Git con:  <ul> <li>Carpetas <code>src/main/java/modelo</code> y <code>src/test/java</code>.  </li> <li>Las tres clases.  </li> <li>Una clase <code>Main</code> con un <code>public static void main(String[] args)</code> donde instancies al menos dos objetos por clase, uno con cada constructor, y los imprimas con <code>toString()</code>.  </li> </ul> </li> </ol>"},{"location":"activities/p4/","title":"Semana 5 - Actividad: Clase <code>Profesor</code> en Java","text":""},{"location":"activities/p4/#objetivo","title":"Objetivo","text":"<p>Familiarizarte con los conceptos de constructores, sobrecarga de m\u00e9todos y constructores, el uso del operador <code>this</code>, y la encapsulaci\u00f3n en Java, aplic\u00e1ndolos en el contexto de un sistema educativo. Implementar\u00e1s una clase <code>Profesor</code> que gestione informaci\u00f3n de docentes, sus asignaturas, y su carga horaria, con m\u00e9todos m\u00e1s complejos y pruebas en un entorno educativo.</p>"},{"location":"activities/p4/#instrucciones-generales","title":"Instrucciones Generales","text":"<ol> <li>Crea un proyecto en Java utilizando tu IDE favorito (Eclipse, IntelliJ, NetBeans, etc.).</li> <li>Implementa la clase <code>Profesor</code> con los atributos y m\u00e9todos descritos a continuaci\u00f3n.</li> <li>Crea una clase <code>Curso</code> para interactuar con <code>Profesor</code>.</li> <li>Prueba todas las funcionalidades en una clase <code>Main</code> con ejemplos realistas.</li> <li>Usa el operador <code>this</code> y sobrecarga de constructores/m\u00e9todos donde sea aplicable.</li> <li>Sube tu c\u00f3digo a un repositorio (opcional) o comp\u00e1rtelo con tu instructor.</li> </ol>"},{"location":"activities/p4/#ejercicio-1-implementacion-de-la-clase-profesor","title":"Ejercicio 1: Implementaci\u00f3n de la Clase <code>Profesor</code>","text":""},{"location":"activities/p4/#tarea","title":"Tarea","text":"<p>Crea una clase <code>Profesor</code> que represente a un docente en un sistema educativo. La clase debe incluir:</p> <ul> <li>Atributos:</li> <li><code>nombre</code> (String): Nombre completo del profesor.</li> <li><code>numeroIdentificacion</code> (String): C\u00e9dula o DNI del profesor.</li> <li><code>salarioMensual</code> (double): Salario mensual del profesor.</li> <li><code>horasSemanales</code> (int): Horas semanales asignadas para dictar clases.</li> <li> <p><code>esTiempoCompleto</code> (boolean): Indica si el profesor es de tiempo completo o no.</p> </li> <li> <p>Constructores:</p> </li> <li>Un constructor completo que reciba <code>nombre</code>, <code>numeroIdentificacion</code>, <code>salarioMensual</code>, <code>horasSemanales</code>, y <code>esTiempoCompleto</code>.</li> <li>Un constructor que reciba <code>nombre</code>, <code>numeroIdentificacion</code>, y <code>salarioMensual</code>, asignando <code>20</code> a <code>horasSemanales</code> y <code>false</code> a <code>esTiempoCompleto</code>.</li> <li>Un constructor por defecto que inicialice los atributos con valores predeterminados (<code>\"Sin nombre\"</code>, <code>\"Sin identificaci\u00f3n\"</code>, <code>0.0</code>, <code>0</code>, <code>false</code>).</li> <li> <p>Un constructor que reciba solo <code>nombre</code> y <code>numeroIdentificacion</code>, asignando valores predeterminados al resto (<code>0.0</code>, <code>10</code>, <code>false</code>).</p> </li> <li> <p>M\u00e9todos:</p> </li> <li><code>mostrarInformacion()</code>: Muestra todos los datos del profesor en un formato claro.</li> <li><code>calcularSalarioAnual()</code>: Sobrecarga este m\u00e9todo:<ul> <li>Sin par\u00e1metros: Calcula el salario anual (<code>salarioMensual * 12</code>).</li> <li>Con un par\u00e1metro <code>bonoAnual</code> (double): Calcula el salario anual incluyendo el bono.</li> <li>Con un par\u00e1metro <code>meses</code> (int): Calcula el salario para el n\u00famero de meses indicado.</li> </ul> </li> <li><code>asignarHorasSemanales(int horas)</code>: Actualiza las horas semanales, con validaci\u00f3n para no exceder 40 horas.</li> <li><code>evaluarCargaHoraria()</code>: Sobrecarga este m\u00e9todo:<ul> <li>Sin par\u00e1metros: Devuelve <code>\"Carga normal\"</code> si las horas semanales son menores o iguales a 20, de lo contrario <code>\"Carga alta\"</code>.</li> <li>Con un par\u00e1metro <code>limiteHoras</code> (int): Devuelve el estado seg\u00fan el l\u00edmite proporcionado.</li> </ul> </li> <li><code>asignarCurso(Curso curso)</code>: Registra al profesor en un curso, pasando el objeto actual (<code>this</code>) al m\u00e9todo <code>asignarProfesor</code> de la clase <code>Curso</code>.</li> <li> <p><code>calcularHorasAnuales()</code>: Calcula las horas anuales asumiendo 40 semanas laborales por a\u00f1o.</p> </li> <li> <p>Clase <code>Curso</code>:</p> </li> <li>Atributos: <code>nombreCurso</code> (String) y <code>profesorAsignado</code> (Profesor).</li> <li> <p>M\u00e9todos:</p> <ul> <li><code>asignarProfesor(Profesor profesor)</code>: Asigna un profesor al curso e imprime un mensaje de confirmaci\u00f3n.</li> <li><code>mostrarInformacionCurso()</code>: Muestra el nombre del curso y el nombre del profesor asignado (si existe).</li> </ul> </li> <li> <p>Encapsulaci\u00f3n:</p> </li> <li>Todos los atributos deben ser <code>private</code>.</li> <li>Incluye getters y setters para todos los atributos, con validaciones en los setters (por ejemplo, <code>salarioMensual</code> no puede ser negativo, <code>horasSemanales</code> no puede exceder 40).</li> </ul>"},{"location":"activities/p4/#ejercicio-2-pruebas-en-la-clase-main","title":"Ejercicio 2: Pruebas en la Clase <code>Main</code>","text":""},{"location":"activities/p4/#tarea_1","title":"Tarea","text":"<p>En la clase <code>Main</code>, escribe un programa que:</p> <ol> <li>Cree cuatro instancias de <code>Profesor</code> usando los cuatro constructores.</li> <li>Muestre la informaci\u00f3n de cada profesor con <code>mostrarInformacion()</code>.</li> <li>Pruebe los tres m\u00e9todos <code>calcularSalarioAnual()</code> para un profesor.</li> <li>Pruebe ambos m\u00e9todos <code>evaluarCargaHoraria()</code> para un profesor.</li> <li>Calcule las horas anuales de un profesor con <code>calcularHorasAnuales()</code>.</li> <li>Asigne un profesor a un curso y muestre la informaci\u00f3n del curso.</li> <li>Modifique las horas semanales de un profesor con <code>asignarHorasSemanales()</code> y muestre la informaci\u00f3n actualizada.</li> </ol>"},{"location":"activities/p5/","title":"Semana 7 - Actividad Pr\u00e1ctica: Implementaci\u00f3n de Herencia","text":""},{"location":"activities/p5/#objetivo","title":"Objetivo","text":"<p>Implementar un sistema de herencia en Java aplicando los conceptos aprendidos en clase, utilizando control de versiones con Git y GitHub.</p>"},{"location":"activities/p5/#instrucciones","title":"Instrucciones","text":""},{"location":"activities/p5/#paso-1-configuracion-del-repositorio","title":"Paso 1: Configuraci\u00f3n del Repositorio","text":"<ol> <li>Hacer Fork del Repositorio Base</li> <li>Accede al repositorio: <code>https://github.com/jfinfocesde/act_b1_s7.git</code></li> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino del fork</li> <li> <p>Espera a que se complete el proceso de fork</p> </li> <li> <p>Clonar tu Fork Localmente <pre><code>git clone https://github.com/TU_USUARIO/act_b1_s7.git\ncd act_b1_s7\n</code></pre></p> </li> <li> <p>Configurar Informaci\u00f3n Personal</p> </li> <li>Abre el archivo <code>info.json</code> en la ra\u00edz del proyecto</li> <li>Completa la informaci\u00f3n solicitada:</li> </ol> <pre><code>{\n    \"identificacion\": \"1234567890\",\n    \"nombres\": \"Tu Nombre Completo\",\n    \"apellidos\": \"Tus Apellidos Completos\", \n    \"grupo\": \"b1-martes\"\n}\n</code></pre>"},{"location":"activities/p5/#paso-2-desarrollo-de-la-actividad","title":"Paso 2: Desarrollo de la Actividad","text":"<p>Implementar el Sistema de Tienda de Productos</p> <p>Bas\u00e1ndote en el ejemplo de empleados visto en clase, debes crear un sistema de tienda con las siguientes caracter\u00edsticas:</p>"},{"location":"activities/p5/#logica-de-negocio-detallada","title":"\ud83c\udfea L\u00f3gica de Negocio Detallada","text":""},{"location":"activities/p5/#clase-padre-producto","title":"Clase Padre: <code>Producto</code>","text":"<p>Atributos protegidos:</p> <ul> <li><code>String nombre</code> - Nombre del producto</li> <li><code>double precioBase</code> - Precio base sin impuestos ni descuentos</li> <li><code>String codigo</code> - C\u00f3digo \u00fanico del producto (formato: \"PROD-XXXX\")</li> <li><code>int cantidadStock</code> - Cantidad disponible en inventario</li> <li><code>String categoria</code> - Categor\u00eda general del producto</li> <li><code>boolean activo</code> - Si el producto est\u00e1 activo para venta</li> </ul> <p>Constructor: <pre><code>public Producto(String nombre, double precioBase, String codigo, \n               int cantidadStock, String categoria)\n</code></pre></p> <p>M\u00e9todos obligatorios:</p> <ol> <li> <p>Getters y Setters con validaciones:</p> <ul> <li><code>setPrecioBase()</code>: Solo acepta valores &gt; 0</li> <li><code>setCantidadStock()</code>: Solo acepta valores &gt;= 0</li> <li><code>setCodigo()</code>: Debe seguir formato \"PROD-XXXX\"</li> </ul> </li> <li> <p>L\u00f3gica de negocio base: <pre><code>public double calcularPrecioFinal() {\n    // TODO: Calcular precio base + IVA (19%)\n    // Retornar el precio base multiplicado por 1.19\n}\n\npublic boolean hayStock(int cantidad) {\n    // TODO: Verificar si hay suficiente stock disponible\n    // Comprobar que cantidadStock &gt;= cantidad Y que el producto est\u00e9 activo\n    // Retornar true si ambas condiciones se cumplen, false en caso contrario\n}\n\npublic void vender(int cantidad) {\n    // TODO: Implementar l\u00f3gica de venta\n    // 1. Verificar si hay suficiente stock usando hayStock()\n    // 2. Si hay stock: reducir cantidadStock en la cantidad vendida\n    // 3. Mostrar mensaje \"Venta exitosa: [cantidad] unidades de [nombre]\"\n    // 4. Si no hay stock: mostrar mensaje \"Error: Stock insuficiente\"\n}\n\npublic void reabastecer(int cantidad) {\n    // TODO: Aumentar el stock del producto\n    // 1. Sumar la cantidad al cantidadStock actual\n    // 2. Mostrar mensaje \"Reabastecimiento exitoso: +[cantidad] unidades de [nombre]\"\n}\n\npublic double calcularDescuento() {\n    // TODO: Retornar descuento base\n    // La clase padre no tiene descuentos, retornar 0.0\n}\n</code></pre></p> </li> </ol>"},{"location":"activities/p5/#clase-hija-productoelectronico","title":"Clase Hija: <code>ProductoElectronico</code>","text":"<p>Atributos adicionales:</p> <ul> <li><code>int garantiaMeses</code> - Meses de garant\u00eda</li> <li><code>String marca</code> - Marca del producto</li> <li><code>double voltaje</code> - Voltaje de operaci\u00f3n</li> <li><code>boolean esImportado</code> - Si es producto importado</li> </ul> <p>L\u00f3gica de negocio espec\u00edfica:</p> <ol> <li> <p>M\u00e9todo espec\u00edfico <code>calcularPrecioElectronico()</code>: <pre><code>public double calcularPrecioElectronico() {\n    // TODO: Calcular precio final para productos electr\u00f3nicos\n    // 1. Obtener precio con IVA usando calcularPrecioFinal()\n    // 2. Si esImportado es true: agregar impuesto adicional del 5% sobre precioBase\n    // 3. Calcular descuento usando calcularDescuentoGarantia()\n    // 4. Aplicar descuento: precio - (precio * descuento)\n    // 5. Retornar el precio final calculado\n}\n</code></pre></p> </li> <li> <p>M\u00e9todo espec\u00edfico <code>calcularDescuentoGarantia()</code>: <pre><code>public double calcularDescuentoGarantia() {\n    // TODO: Calcular descuento basado en meses de garant\u00eda\n    // Si garantiaMeses &gt;= 24: retornar 0.10 (10% descuento)\n    // Si garantiaMeses &gt;= 12: retornar 0.05 (5% descuento)\n    // En otros casos: retornar 0.0 (sin descuento)\n}\n</code></pre></p> </li> <li> <p>M\u00e9todos espec\u00edficos: <pre><code>public boolean esGarantiaExtendida() {\n    // TODO: Verificar si la garant\u00eda es extendida\n    // Retornar true si garantiaMeses &gt; 12, false en caso contrario\n}\n\npublic double calcularCostoGarantia() {\n    // TODO: Calcular costo de la garant\u00eda\n    // F\u00f3rmula: precioBase * 0.02 * garantiaMeses\n    // (2% del precio base por cada mes de garant\u00eda)\n}\n\npublic boolean esCompatibleVoltaje(double voltajeLocal) {\n    // TODO: Verificar compatibilidad de voltaje\n    // Calcular diferencia absoluta entre voltaje y voltajeLocal\n    // Retornar true si la diferencia es &lt;= 10% del voltajeLocal\n    // Usar Math.abs() para valor absoluto\n}\n</code></pre></p> </li> </ol>"},{"location":"activities/p5/#clase-hija-productoalimenticio","title":"Clase Hija: <code>ProductoAlimenticio</code>","text":"<p>Atributos adicionales:</p> <ul> <li><code>boolean refrigerado</code> - Si requiere refrigeraci\u00f3n</li> <li><code>String lote</code> - N\u00famero de lote de producci\u00f3n</li> <li><code>int diasParaVencer</code> - D\u00edas restantes para vencimiento</li> </ul> <p>L\u00f3gica de negocio espec\u00edfica:</p> <ol> <li> <p>M\u00e9todo espec\u00edfico <code>calcularPrecioAlimenticio()</code>: <pre><code>public double calcularPrecioAlimenticio() {\n    // TODO: Calcular precio final para productos alimenticios\n    // 1. Obtener precio con IVA usando calcularPrecioFinal()\n    // 2. Si refrigerado es true: agregar costo adicional del 8% sobre precioBase\n    // 3. Calcular descuento usando calcularDescuentoVencimiento()\n    // 4. Aplicar descuento: precio - (precio * descuento)\n    // 5. Retornar el precio final calculado\n}\n</code></pre></p> </li> <li> <p>M\u00e9todo espec\u00edfico <code>calcularDescuentoVencimiento()</code>: <pre><code>public double calcularDescuentoVencimiento() {\n    // TODO: Calcular descuento basado en d\u00edas para vencer\n    // Si diasParaVencer &lt;= 3: retornar 0.50 (50% descuento)\n    // Si diasParaVencer &lt;= 7: retornar 0.30 (30% descuento)\n    // Si diasParaVencer &lt;= 15: retornar 0.15 (15% descuento)\n    // En otros casos: retornar 0.0 (sin descuento)\n}\n</code></pre></p> </li> <li> <p>M\u00e9todos espec\u00edficos: <pre><code>public boolean estaProximoAVencer() {\n    // TODO: Verificar si el producto est\u00e1 pr\u00f3ximo a vencer\n    // Retornar true si diasParaVencer &lt;= 7, false en caso contrario\n}\n\npublic boolean estaVencido() {\n    // TODO: Verificar si el producto est\u00e1 vencido\n    // Retornar true si diasParaVencer &lt;= 0, false en caso contrario\n}\n\npublic String obtenerEstadoFrescura() {\n    // TODO: Determinar el estado de frescura del producto\n    // Si estaVencido(): retornar \"VENCIDO\"\n    // Si diasParaVencer &lt;= 3: retornar \"URGENTE\"\n    // Si diasParaVencer &lt;= 7: retornar \"PR\u00d3XIMO A VENCER\"\n    // Si diasParaVencer &lt;= 15: retornar \"CONSUMIR PRONTO\"\n    // En otros casos: retornar \"FRESCO\"\n}\n\npublic double calcularPerdidaPorVencimiento() {\n    // TODO: Calcular p\u00e9rdida econ\u00f3mica por vencimiento\n    // Si estaVencido(): retornar precioBase * cantidadStock\n    // En otros casos: retornar 0.0\n}\n</code></pre></p> </li> </ol>"},{"location":"activities/p5/#clase-de-prueba-sistematienda","title":"Clase de Prueba: <code>SistemaTienda</code>","text":"<p>Funcionalidades a implementar:</p> <ol> <li>Crear inventario diverso: <pre><code>// Crear productos electr\u00f3nicos\nProductoElectronico laptop = new ProductoElectronico(...);\nProductoElectronico celular = new ProductoElectronico(...);\n\n// Crear productos alimenticios\nProductoAlimenticio leche = new ProductoAlimenticio(...);\nProductoAlimenticio pan = new ProductoAlimenticio(...);\n</code></pre></li> </ol>"},{"location":"activities/p5/#casos-de-prueba-obligatorios","title":"\ud83d\udccb Casos de Prueba Obligatorios","text":"<ol> <li> <p>Producto Electr\u00f3nico:</p> <ul> <li>Laptop importada, 24 meses garant\u00eda, 110V</li> <li>Precio base: $2,500,000</li> <li>Stock: 5 unidades</li> </ul> </li> <li> <p>Producto Alimenticio:</p> <ul> <li>Leche refrigerada, 5 d\u00edas para vencer</li> <li>Precio base: $4,500</li> <li>Stock: 20 unidades</li> </ul> </li> <li> <p>Operaciones a probar:</p> <ul> <li>Crear objetos de cada tipo por separado</li> <li>Venta exitosa y fallida por falta de stock</li> <li>C\u00e1lculo de precios usando m\u00e9todos espec\u00edficos de cada clase</li> <li>Reabastecimiento de inventario</li> <li>Verificaci\u00f3n de compatibilidad de voltaje</li> <li>Comparaci\u00f3n entre precio base y precios espec\u00edficos</li> <li>Demostrar funcionalidades \u00fanicas de cada tipo</li> </ul> </li> </ol>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/curso/","title":"Curso de Programaci\u00f3n Orientada a Objetos en Java - Temas para 10 Clases","text":"<ol> <li>Introducci\u00f3n a POO y Java </li> <li>Conceptos b\u00e1sicos de POO (clases, objetos, encapsulamiento, herencia, polimorfismo)  </li> <li>Configuraci\u00f3n del entorno de desarrollo (JDK, IDE)  </li> <li> <p>Estructura b\u00e1sica de un programa en Java  </p> </li> <li> <p>Clases y Objetos </p> </li> <li>Definici\u00f3n de clases y objetos  </li> <li>Atributos y m\u00e9todos  </li> <li> <p>Creaci\u00f3n e instanciaci\u00f3n de objetos  </p> </li> <li> <p>Encapsulamiento y Modificadores de Acceso </p> </li> <li>Modificadores de acceso (public, private, protected, default)  </li> <li>Getters y setters  </li> <li> <p>Principios de encapsulamiento  </p> </li> <li> <p>Constructores y Sobrecarga </p> </li> <li>Tipos de constructores (por defecto, parametrizados)  </li> <li>Sobrecarga de constructores  </li> <li> <p>Inicializaci\u00f3n de objetos  </p> </li> <li> <p>Herencia </p> </li> <li>Concepto de herencia y jerarqu\u00eda de clases  </li> <li>Uso de la palabra clave <code>extends</code> </li> <li> <p>Sobrescritura de m\u00e9todos y la anotaci\u00f3n <code>@Override</code> </p> </li> <li> <p>Polimorfismo </p> </li> <li>Polimorfismo en tiempo de compilaci\u00f3n y ejecuci\u00f3n  </li> <li>Uso de <code>super</code> y <code>this</code> </li> <li> <p>Casting de objetos  </p> </li> <li> <p>Clases Abstractas e Interfaces </p> </li> <li>Definici\u00f3n y uso de clases abstractas  </li> <li>Creaci\u00f3n e implementaci\u00f3n de interfaces  </li> <li> <p>Diferencias entre clases abstractas e interfaces  </p> </li> <li> <p>Manejo de Excepciones </p> </li> <li>Estructura try-catch  </li> <li>Lanzamiento de excepciones (<code>throw</code>, <code>throws</code>)  </li> <li> <p>Creaci\u00f3n de excepciones personalizadas  </p> </li> <li> <p>Paquetes y Modularidad </p> </li> <li>Organizaci\u00f3n de clases en paquetes  </li> <li>Importaci\u00f3n de clases y uso de <code>import</code> </li> <li> <p>Visibilidad y control de acceso en paquetes  </p> </li> <li> <p>Conceptos Avanzados y Buenas Pr\u00e1cticas </p> <ul> <li>Principios SOLID en POO  </li> <li>Uso de colecciones (ArrayList, HashMap)  </li> <li>Introducci\u00f3n a patrones de dise\u00f1o b\u00e1sicos (Singleton, Factory)</li> </ul> </li> </ol>"},{"location":"content/p1/","title":"Semana 1 - Pacto pedag\u00f3gico","text":"<p>El pacto pedag\u00f3gico es un acuerdo que se establece entre el docente y los estudiantes al inicio de un curso, con el fin de establecer las normas, expectativas, responsabilidades y compromisos de todas las partes involucradas en el proceso de ense\u00f1anza-aprendizaje.</p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p>"},{"location":"content/p1/#introduccion-a-programacion-orientada-a-objetos-y-java","title":"Introducci\u00f3n a Programaci\u00f3n Orientada a Objetos y Java","text":""},{"location":"content/p1/#objetivos-de-la-clase","title":"Objetivos de la Clase","text":"<ul> <li>Comprender los fundamentos de la Programaci\u00f3n Orientada a Objetos (POO) y su importancia en el desarrollo de software.</li> <li>Configurar un entorno de desarrollo para programar en Java.</li> <li>Analizar la estructura b\u00e1sica de un programa en Java y escribir un primer programa funcional.</li> </ul>"},{"location":"content/p1/#1-conceptos-basicos-de-poo","title":"1. Conceptos B\u00e1sicos de POO","text":"<p>La Programaci\u00f3n Orientada a Objetos (POO) es un paradigma de programaci\u00f3n que organiza el c\u00f3digo en torno a \"objetos\" que representan entidades del mundo real. Estos objetos combinan datos (atributos) y comportamientos (m\u00e9todos) para modelar sistemas de manera modular y reutilizable. Los principales conceptos de POO son:</p>"},{"location":"content/p1/#11-clases","title":"1.1. Clases","text":"<p>Una clase es una plantilla o blueprint que define las propiedades y comportamientos de un tipo de objeto. Por ejemplo, una clase <code>Coche</code> puede describir atributos como <code>color</code> o <code>marca</code> y m\u00e9todos como <code>acelerar()</code> o <code>frenar()</code>.</p> <pre><code>public class Coche {\n    String color; // Atributo\n    String marca;\n\n    void acelerar() { // M\u00e9todo\n        System.out.println(\"El coche est\u00e1 acelerando.\");\n    }\n}\n</code></pre>"},{"location":"content/p1/#12-objetos","title":"1.2. Objetos","text":"<p>Un objeto es una instancia de una clase. Representa una entidad espec\u00edfica creada a partir de la plantilla de la clase. Por ejemplo, un objeto de la clase <code>Coche</code> podr\u00eda ser un coche rojo de marca Toyota.</p> <pre><code>Coche miCoche = new Coche(); // Creaci\u00f3n de un objeto\nmiCoche.color = \"Rojo\";\nmiCoche.marca = \"Toyota\";\nmiCoche.acelerar();\n</code></pre>"},{"location":"content/p1/#13-encapsulamiento","title":"1.3. Encapsulamiento","text":"<p>El encapsulamiento consiste en ocultar los detalles internos de una clase y exponer solo lo necesario a trav\u00e9s de m\u00e9todos p\u00fablicos. Esto se logra usando modificadores de acceso (<code>private</code>, <code>public</code>) y m\u00e9todos <code>getters</code> y <code>setters</code>.</p> <pre><code>public class Coche {\n    private String color; // Atributo privado\n\n    public String getColor() { // Getter\n        return color;\n    }\n\n    public void setColor(String color) { // Setter\n        this.color = color;\n    }\n}\n</code></pre>"},{"location":"content/p1/#14-herencia","title":"1.4. Herencia","text":"<p>La herencia permite que una clase (subclase) herede atributos y m\u00e9todos de otra clase (superclase), promoviendo la reutilizaci\u00f3n de c\u00f3digo. Por ejemplo, una clase <code>Camion</code> puede heredar de <code>Vehiculo</code>.</p> <pre><code>public class Vehiculo {\n    String marca;\n    void mover() {\n        System.out.println(\"El veh\u00edculo se mueve.\");\n    }\n}\n\npublic class Camion extends Vehiculo {\n    int capacidadCarga;\n}\n</code></pre>"},{"location":"content/p1/#15-polimorfismo","title":"1.5. Polimorfismo","text":"<p>El polimorfismo permite que objetos de diferentes clases sean tratados como objetos de una clase com\u00fan, generalmente a trav\u00e9s de herencia o interfaces. Por ejemplo, un m\u00e9todo puede aceptar un <code>Vehiculo</code> pero trabajar con un <code>Coche</code> o un <code>Camion</code>.</p> <pre><code>Vehiculo miVehiculo = new Coche(); // Polimorfismo\nmiVehiculo.mover();\n</code></pre>"},{"location":"content/p1/#2-configuracion-del-entorno-de-desarrollo","title":"2. Configuraci\u00f3n del Entorno de Desarrollo","text":"<p>Para programar en Java, es necesario configurar un entorno de desarrollo adecuado. Los componentes principales son el JDK (Java Development Kit) y un IDE (Entorno de Desarrollo Integrado).</p>"},{"location":"content/p1/#21-instalacion-del-jdk","title":"2.1. Instalaci\u00f3n del JDK","text":"<p>El JDK incluye las herramientas necesarias para compilar y ejecutar programas en Java. Sigue estos pasos:</p> <ol> <li>Descarga del JDK:</li> <li>Visita el sitio oficial de Oracle o adopta un JDK de OpenJDK (recomendado: OpenJDK 17 o superior).</li> <li> <p>Descarga la versi\u00f3n adecuada para tu sistema operativo (Windows, macOS, Linux).</p> </li> <li> <p>Instalaci\u00f3n:</p> </li> <li>Sigue las instrucciones del instalador para tu sistema operativo.</li> <li> <p>Configura la variable de entorno <code>JAVA_HOME</code> para apuntar al directorio de instalaci\u00f3n del JDK.</p> </li> <li> <p>Verificaci\u00f3n:</p> </li> <li>Abre una terminal y ejecuta:      <pre><code>java -version\njavac -version\n</code></pre></li> <li>Deber\u00edas ver la versi\u00f3n instalada del JDK.</li> </ol>"},{"location":"content/p1/#22-instalacion-de-un-ide","title":"2.2. Instalaci\u00f3n de un IDE","text":"<p>Un IDE facilita la escritura, depuraci\u00f3n y ejecuci\u00f3n de c\u00f3digo. Opciones populares incluyen: - IntelliJ IDEA (recomendado para principiantes y profesionales). - Eclipse (gratuito y ampliamente usado). - Visual Studio Code (con extensiones para Java).</p> <p>Pasos para IntelliJ IDEA: 1. Descarga e instala IntelliJ IDEA Community Edition desde el sitio oficial. 2. Crea un nuevo proyecto Java y configura el JDK instalado. 3. Escribe y ejecuta tu primer programa.</p>"},{"location":"content/p1/#23-configuracion-basica","title":"2.3. Configuraci\u00f3n B\u00e1sica","text":"<ul> <li>Aseg\u00farate de que el proyecto est\u00e9 configurado para usar el JDK instalado.</li> <li>Crea un archivo <code>.java</code> (por ejemplo, <code>Main.java</code>) para comenzar a programar.</li> </ul>"},{"location":"content/p1/#3-estructura-basica-de-un-programa-en-java","title":"3. Estructura B\u00e1sica de un Programa en Java","text":"<p>Un programa en Java sigue una estructura definida que incluye clases, m\u00e9todos y un punto de entrada principal (<code>main</code>). A continuaci\u00f3n, se detalla la estructura b\u00e1sica:</p>"},{"location":"content/p1/#31-componentes-de-un-programa","title":"3.1. Componentes de un Programa","text":"<ul> <li>Clase: Todo programa en Java est\u00e1 contenido en una clase.</li> <li>M\u00e9todo <code>main</code>: Es el punto de entrada del programa. Debe ser <code>public</code>, <code>static</code>, y devolver <code>void</code>.</li> <li>Paquete: Organiza las clases en directorios l\u00f3gicos (opcional para programas simples).</li> </ul>"},{"location":"content/p1/#32-ejemplo-de-programa-basico","title":"3.2. Ejemplo de Programa B\u00e1sico","text":"<p>El siguiente c\u00f3digo muestra un programa simple que imprime \"\u00a1Hola, mundo!\" en la consola:</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"\u00a1Hola, mundo!\");\n    }\n}\n</code></pre>"},{"location":"content/p1/#33-explicacion-del-codigo","title":"3.3. Explicaci\u00f3n del C\u00f3digo","text":"<ul> <li><code>public class Main</code>: Define una clase llamada <code>Main</code>. El nombre del archivo debe coincidir con el nombre de la clase.</li> <li><code>public static void main(String[] args)</code>: M\u00e9todo principal que Java ejecuta al iniciar el programa.</li> <li><code>System.out.println</code>: Imprime texto en la consola, seguido de un salto de l\u00ednea.</li> </ul>"},{"location":"content/p1/#34-compilacion-y-ejecucion","title":"3.4. Compilaci\u00f3n y Ejecuci\u00f3n","text":"<ol> <li>Compilar:</li> <li>Guarda el c\u00f3digo en un archivo llamado <code>Main.java</code>.</li> <li>En la terminal, navega al directorio del archivo y ejecuta:      <pre><code>javac Main.java\n</code></pre></li> <li> <p>Esto genera un archivo <code>Main.class</code> (bytecode).</p> </li> <li> <p>Ejecutar:</p> </li> <li>Ejecuta el programa con:      <pre><code>java Main\n</code></pre></li> <li>Salida esperada: <code>\u00a1Hola, mundo!</code></li> </ol>"},{"location":"content/p1/#35-convenciones-de-codificacion","title":"3.5. Convenciones de Codificaci\u00f3n","text":"<ul> <li>Nombres de clases: Usa <code>UpperCamelCase</code> (por ejemplo, <code>MiClase</code>).</li> <li>Nombres de m\u00e9todos y variables: Usa <code>lowerCamelCase</code> (por ejemplo, <code>miMetodo</code>).</li> <li>Indentaci\u00f3n: Usa 4 espacios o una tabulaci\u00f3n para mantener el c\u00f3digo legible.</li> </ul>"},{"location":"content/p1/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<ol> <li>Ejercicio 1: Escribe un programa que imprima tu nombre y edad en la consola.</li> <li>Ejercicio 2: Crea una clase <code>Persona</code> con atributos <code>nombre</code> y <code>edad</code>, y un m\u00e9todo <code>presentarse</code> que imprima un mensaje como \"Hola, soy [nombre] y tengo [edad] a\u00f1os\".</li> <li>Ejercicio 3: Configura tu IDE y compila el programa \"\u00a1Hola, mundo!\" desde el IDE.</li> </ol>"},{"location":"content/p10/","title":"Semana 10 - Conversor Universal - Tutorial Completo","text":""},{"location":"content/p10/#introduccion","title":"Introducci\u00f3n","text":"<p>Este proyecto es una aplicaci\u00f3n web de conversores desarrollada en Java utilizando el framework Vaadin para la interfaz de usuario. La aplicaci\u00f3n demuestra la implementaci\u00f3n pr\u00e1ctica de los cuatro pilares fundamentales de la Programaci\u00f3n Orientada a Objetos (POO):</p> <ul> <li>\u2728 Abstracci\u00f3n</li> <li>\ud83d\udd12 Encapsulaci\u00f3n </li> <li>\ud83e\uddec Herencia</li> <li>\ud83c\udfad Polimorfismo</li> </ul>"},{"location":"content/p10/#objetivo-del-proyecto","title":"\ud83c\udfaf Objetivo del Proyecto","text":"<p>Crear una aplicaci\u00f3n funcional que permita realizar conversiones entre diferentes unidades de medida, implementando buenas pr\u00e1cticas de POO y manteniendo un dise\u00f1o simple y elegante.</p>"},{"location":"content/p10/#caracteristicas-principales","title":"\ud83d\ude80 Caracter\u00edsticas Principales","text":""},{"location":"content/p10/#tipos-de-conversion-disponibles","title":"Tipos de Conversi\u00f3n Disponibles","text":"<ol> <li>\ud83c\udf21\ufe0f Temperatura: Celsius a Fahrenheit</li> <li>\ud83d\udccf Longitud: Metros a Pies</li> <li>\u2696\ufe0f Peso: Kilogramos a Libras</li> <li>\ud83d\udcb0 Moneda: D\u00f3lares USD a Euros EUR</li> </ol>"},{"location":"content/p10/#tecnologias-utilizadas","title":"Tecnolog\u00edas Utilizadas","text":"<ul> <li>Java 21: Lenguaje de programaci\u00f3n principal</li> <li>Spring Boot: Framework para la aplicaci\u00f3n</li> <li>Vaadin 24.8.7: Framework para la interfaz de usuario</li> <li>Maven: Gesti\u00f3n de dependencias</li> <li>H2 Database: Base de datos en memoria (incluida por defecto)</li> </ul>"},{"location":"content/p10/#estructura-del-tutorial","title":"\ud83d\udcda Estructura del Tutorial","text":"<p>Este tutorial est\u00e1 organizado en los siguientes archivos:</p>"},{"location":"content/p10/#1-conceptos-de-poo","title":"1. Conceptos de POO","text":"<p>Explicaci\u00f3n detallada de c\u00f3mo se implementan los cuatro pilares de POO en nuestra aplicaci\u00f3n.</p>"},{"location":"content/p10/#2-arquitectura-del-codigo","title":"2. Arquitectura del C\u00f3digo","text":"<p>An\u00e1lisis de la estructura del proyecto y las decisiones de dise\u00f1o.</p>"},{"location":"content/p10/#3-implementacion-paso-a-paso","title":"3. Implementaci\u00f3n Paso a Paso","text":"<p>Gu\u00eda completa para crear cada componente de la aplicaci\u00f3n desde cero.</p>"},{"location":"content/p10/#4-interfaz-de-usuario-con-vaadin","title":"4. Interfaz de Usuario con Vaadin","text":"<p>Tutorial sobre la creaci\u00f3n de la interfaz web usando Vaadin.</p>"},{"location":"content/p10/#5-manual-de-usuario","title":"5. Manual de Usuario","text":"<p>Gu\u00eda para usar la aplicaci\u00f3n una vez implementada.</p>"},{"location":"content/p10/#estructura-del-proyecto","title":"\ud83c\udfd7\ufe0f Estructura del Proyecto","text":"<pre><code>src/main/java/com/example/application/views/inicio/\n\u251c\u2500\u2500 Conversor.java                 # Clase abstracta base\n\u251c\u2500\u2500 ConversorTemperatura.java      # Conversor espec\u00edfico\n\u251c\u2500\u2500 ConversorLongitud.java         # Conversor espec\u00edfico\n\u251c\u2500\u2500 ConversorPeso.java             # Conversor espec\u00edfico\n\u251c\u2500\u2500 ConversorMoneda.java           # Conversor espec\u00edfico\n\u251c\u2500\u2500 CalculadoraConversores.java    # Clase gestora\n\u2514\u2500\u2500 InicioView.java                # Interfaz de usuario\n</code></pre>"},{"location":"content/p10/#principios-de-diseno-aplicados","title":"\ud83c\udfa8 Principios de Dise\u00f1o Aplicados","text":"<ul> <li>Simplicidad: Interfaz limpia y f\u00e1cil de usar</li> <li>Extensibilidad: F\u00e1cil agregar nuevos tipos de conversores</li> <li>Mantenibilidad: C\u00f3digo bien estructurado y documentado</li> <li>Reutilizaci\u00f3n: Componentes reutilizables y modulares</li> </ul>"},{"location":"content/p10/#como-ejecutar-la-aplicacion","title":"\ud83d\ude80 C\u00f3mo Ejecutar la Aplicaci\u00f3n","text":"<ol> <li>Prerrequisitos:</li> <li>Java 21 o superior</li> <li> <p>Maven 3.6 o superior</p> </li> <li> <p>Ejecutar:    <pre><code>./mvnw spring-boot:run\n</code></pre></p> </li> <li> <p>Acceder:</p> </li> <li>Abrir navegador en: <code>http://localhost:8080</code></li> </ol>"},{"location":"content/p10/#repositorio","title":"Repositorio","text":"<pre><code>https://github.com/jfinfocesde/pi_backend1_ejemplo.git\n</code></pre>"},{"location":"content/p11/","title":"Semana 11 - Interfaces en Java","text":""},{"location":"content/p11/#que-es-una-interfaz","title":"\ud83d\udcda \u00bfQu\u00e9 es una Interfaz?","text":"<p>Una interfaz en Java es un contrato que define qu\u00e9 m\u00e9todos debe implementar una clase, pero no especifica c\u00f3mo implementarlos. Es como un \"acuerdo\" o \"promesa\" que una clase hace sobre qu\u00e9 comportamientos va a proporcionar.</p>"},{"location":"content/p11/#caracteristicas-principales","title":"\ud83d\udd0d Caracter\u00edsticas Principales","text":"<ul> <li>Contrato de comportamiento: Define QU\u00c9 debe hacer una clase, no C\u00d3MO</li> <li>Abstracci\u00f3n pura: Todos los m\u00e9todos son abstractos por defecto (hasta Java 8)</li> <li>Implementaci\u00f3n m\u00faltiple: Una clase puede implementar varias interfaces</li> <li>Sin estado: No pueden tener variables de instancia (solo constantes)</li> <li>Herencia m\u00faltiple de comportamiento: Permite simular herencia m\u00faltiple</li> </ul>"},{"location":"content/p11/#analogia-del-mundo-real","title":"\ud83c\udf1f Analog\u00eda del Mundo Real","text":"<p>Imagina una licencia de conducir: - La licencia es como una interfaz que dice \"esta persona puede conducir\" - No importa si conduces un carro, moto o cami\u00f3n (diferentes implementaciones) - Todos los conductores deben saber acelerar, frenar y girar (m\u00e9todos obligatorios) - Cada veh\u00edculo implementa estos comportamientos de manera diferente</p> <pre><code>// La \"licencia\" ser\u00eda nuestra interfaz\ninterface Conductor {\n    void acelerar();\n    void frenar();\n    void girar(String direccion);\n}\n</code></pre>"},{"location":"content/p11/#declaracion-de-una-interfaz","title":"\ud83d\udee0\ufe0f Declaraci\u00f3n de una Interfaz","text":""},{"location":"content/p11/#sintaxis-basica","title":"Sintaxis B\u00e1sica","text":"<pre><code>[modificador] interface NombreInterfaz {\n    // Constantes (impl\u00edcitamente public, static, final)\n    tipo CONSTANTE = valor;\n\n    // M\u00e9todos abstractos (impl\u00edcitamente public y abstract)\n    tipoRetorno nombreMetodo(parametros);\n}\n</code></pre>"},{"location":"content/p11/#ejemplo-basico","title":"\ud83d\udcdd Ejemplo B\u00e1sico","text":"<pre><code>public interface Vehiculo {\n    // Constante - velocidad m\u00e1xima permitida\n    int VELOCIDAD_MAXIMA = 120;\n\n    // M\u00e9todos abstractos que deben implementar las clases\n    void encender();\n    void apagar();\n    void acelerar(int velocidad);\n    void frenar();\n    String obtenerTipo();\n}\n</code></pre>"},{"location":"content/p11/#ejemplo-con-multiples-metodos","title":"\ud83c\udfa8 Ejemplo con M\u00faltiples M\u00e9todos","text":"<pre><code>public interface Reproductor {\n    // Constantes\n    int VOLUMEN_MAXIMO = 100;\n    int VOLUMEN_MINIMO = 0;\n\n    // M\u00e9todos que debe implementar cualquier reproductor\n    void reproducir();\n    void pausar();\n    void detener();\n    void siguienteCancion();\n    void cancionAnterior();\n    void ajustarVolumen(int volumen);\n    boolean estaReproduciendo();\n}\n</code></pre>"},{"location":"content/p11/#caracteristicas-de-los-metodos-en-interfaces","title":"\u26a1 Caracter\u00edsticas de los M\u00e9todos en Interfaces","text":"<pre><code>public interface EjemploCaracteristicas {\n    // \u274c INCORRECTO - no puede tener variables de instancia\n    // private String nombre;\n\n    // \u2705 CORRECTO - constantes (public static final impl\u00edcito)\n    String TIPO_DEFECTO = \"Gen\u00e9rico\";\n    int NUMERO_MAXIMO = 1000;\n\n    // \u2705 CORRECTO - m\u00e9todos abstractos (public abstract impl\u00edcito)\n    void metodoAbstracto();\n    String obtenerInformacion();\n\n    // \u274c INCORRECTO - no puede tener constructores\n    // public EjemploCaracteristicas() { }\n}\n</code></pre>"},{"location":"content/p11/#implementacion-de-una-interfaz-uso-de-implements","title":"\ud83d\udd27 Implementaci\u00f3n de una Interfaz - Uso de <code>implements</code>","text":""},{"location":"content/p11/#sintaxis-de-implementacion","title":"Sintaxis de Implementaci\u00f3n","text":"<pre><code>public class NombreClase implements NombreInterfaz {\n    // Debe implementar TODOS los m\u00e9todos de la interfaz\n    @Override\n    public tipoRetorno nombreMetodo(parametros) {\n        // Implementaci\u00f3n espec\u00edfica\n    }\n}\n</code></pre>"},{"location":"content/p11/#ejemplo-practico-sistema-de-dispositivos","title":"\ud83d\udcf1 Ejemplo Pr\u00e1ctico: Sistema de Dispositivos","text":"<pre><code>// 1. Declaramos la interfaz\npublic interface DispositivoElectronico {\n    String MARCA_DEFECTO = \"Gen\u00e9rica\";\n\n    void encender();\n    void apagar();\n    void mostrarEstado();\n    int obtenerConsumoEnergia();\n}\n\n// 2. Implementamos la interfaz en diferentes clases\npublic class Telefono implements DispositivoElectronico {\n    private boolean encendido;\n    private String modelo;\n    private int bateria;\n\n    public Telefono(String modelo, int bateria) {\n        this.modelo = modelo;\n        this.bateria = bateria;\n        this.encendido = false;\n    }\n\n    @Override\n    public void encender() {\n        if (bateria &gt; 0) {\n            encendido = true;\n            System.out.println(\"\ud83d\udcf1 Tel\u00e9fono \" + modelo + \" encendido\");\n        } else {\n            System.out.println(\"\u274c Bater\u00eda agotada, no se puede encender\");\n        }\n    }\n\n    @Override\n    public void apagar() {\n        encendido = false;\n        System.out.println(\"\ud83d\udcf1 Tel\u00e9fono \" + modelo + \" apagado\");\n    }\n\n    @Override\n    public void mostrarEstado() {\n        String estado = encendido ? \"Encendido\" : \"Apagado\";\n        System.out.println(\"\ud83d\udcf1 \" + modelo + \" - Estado: \" + estado + \" - Bater\u00eda: \" + bateria + \"%\");\n    }\n\n    @Override\n    public int obtenerConsumoEnergia() {\n        return encendido ? 15 : 2; // Watts\n    }\n\n    // M\u00e9todo espec\u00edfico del tel\u00e9fono\n    public void llamar(String numero) {\n        if (encendido) {\n            System.out.println(\"\ud83d\udcde Llamando a \" + numero);\n        } else {\n            System.out.println(\"\u274c Enciende el tel\u00e9fono primero\");\n        }\n    }\n}\n\npublic class Laptop implements DispositivoElectronico {\n    private boolean encendida;\n    private String marca;\n    private String procesador;\n\n    public Laptop(String marca, String procesador) {\n        this.marca = marca;\n        this.procesador = procesador;\n        this.encendida = false;\n    }\n\n    @Override\n    public void encender() {\n        encendida = true;\n        System.out.println(\"\ud83d\udcbb Laptop \" + marca + \" iniciando sistema...\");\n        System.out.println(\"\ud83d\udcbb Sistema operativo cargado\");\n    }\n\n    @Override\n    public void apagar() {\n        encendida = false;\n        System.out.println(\"\ud83d\udcbb Cerrando aplicaciones...\");\n        System.out.println(\"\ud83d\udcbb Laptop \" + marca + \" apagada\");\n    }\n\n    @Override\n    public void mostrarEstado() {\n        String estado = encendida ? \"Encendida\" : \"Apagada\";\n        System.out.println(\"\ud83d\udcbb \" + marca + \" (\" + procesador + \") - Estado: \" + estado);\n    }\n\n    @Override\n    public int obtenerConsumoEnergia() {\n        return encendida ? 65 : 5; // Watts\n    }\n\n    // M\u00e9todo espec\u00edfico de la laptop\n    public void ejecutarPrograma(String programa) {\n        if (encendida) {\n            System.out.println(\"\ud83d\udcbb Ejecutando \" + programa);\n        } else {\n            System.out.println(\"\u274c Enciende la laptop primero\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p11/#ejemplo-de-uso","title":"\ud83c\udfae Ejemplo de Uso","text":"<pre><code>public class PruebaDispositivos {\n    public static void main(String[] args) {\n        // Crear dispositivos\n        Telefono miTelefono = new Telefono(\"iPhone 15\", 85);\n        Laptop miLaptop = new Laptop(\"Dell\", \"Intel i7\");\n\n        // Usar como objetos espec\u00edficos\n        System.out.println(\"=== USO ESPEC\u00cdFICO ===\");\n        miTelefono.encender();\n        miTelefono.llamar(\"123-456-7890\");\n\n        miLaptop.encender();\n        miLaptop.ejecutarPrograma(\"Visual Studio Code\");\n\n        // Usar polimorfismo con la interfaz\n        System.out.println(\"\\n=== POLIMORFISMO ===\");\n        DispositivoElectronico[] dispositivos = {miTelefono, miLaptop};\n\n        for (DispositivoElectronico dispositivo : dispositivos) {\n            dispositivo.mostrarEstado();\n            System.out.println(\"Consumo: \" + dispositivo.obtenerConsumoEnergia() + \"W\");\n            System.out.println(\"Marca por defecto: \" + DispositivoElectronico.MARCA_DEFECTO);\n            System.out.println(\"---\");\n        }\n\n        // Apagar todos los dispositivos\n        System.out.println(\"=== APAGANDO DISPOSITIVOS ===\");\n        for (DispositivoElectronico dispositivo : dispositivos) {\n            dispositivo.apagar();\n        }\n    }\n}\n</code></pre>"},{"location":"content/p11/#implementacion-multiple","title":"\ud83d\udd04 Implementaci\u00f3n M\u00faltiple","text":"<p>Una de las grandes ventajas de las interfaces es que una clase puede implementar m\u00faltiples interfaces.</p>"},{"location":"content/p11/#ejemplo-sistema-de-biblioteca","title":"\ud83d\udcda Ejemplo: Sistema de Biblioteca","text":"<pre><code>// Interfaces separadas para diferentes comportamientos\npublic interface Prestable {\n    void prestar(String usuario);\n    void devolver();\n    boolean estaPrestado();\n}\n\npublic interface Catalogable {\n    String obtenerCodigo();\n    String obtenerCategoria();\n    void actualizarUbicacion(String nuevaUbicacion);\n}\n\npublic interface Renovable {\n    void renovar();\n    boolean puedeRenovarse();\n    int diasRestantes();\n}\n\n// Clase que implementa m\u00faltiples interfaces\npublic class Libro implements Prestable, Catalogable, Renovable {\n    private String titulo;\n    private String autor;\n    private String codigo;\n    private String categoria;\n    private String ubicacion;\n    private boolean prestado;\n    private String usuarioPrestamo;\n    private int diasPrestamo;\n\n    public Libro(String titulo, String autor, String codigo, String categoria) {\n        this.titulo = titulo;\n        this.autor = autor;\n        this.codigo = codigo;\n        this.categoria = categoria;\n        this.ubicacion = \"Estanter\u00eda Principal\";\n        this.prestado = false;\n        this.diasPrestamo = 0;\n    }\n\n    // Implementaci\u00f3n de Prestable\n    @Override\n    public void prestar(String usuario) {\n        if (!prestado) {\n            prestado = true;\n            usuarioPrestamo = usuario;\n            diasPrestamo = 14; // 2 semanas\n            System.out.println(\"\ud83d\udcd6 '\" + titulo + \"' prestado a \" + usuario);\n        } else {\n            System.out.println(\"\u274c El libro ya est\u00e1 prestado\");\n        }\n    }\n\n    @Override\n    public void devolver() {\n        if (prestado) {\n            prestado = false;\n            System.out.println(\"\ud83d\udcd6 '\" + titulo + \"' devuelto por \" + usuarioPrestamo);\n            usuarioPrestamo = null;\n            diasPrestamo = 0;\n        } else {\n            System.out.println(\"\u274c El libro no est\u00e1 prestado\");\n        }\n    }\n\n    @Override\n    public boolean estaPrestado() {\n        return prestado;\n    }\n\n    // Implementaci\u00f3n de Catalogable\n    @Override\n    public String obtenerCodigo() {\n        return codigo;\n    }\n\n    @Override\n    public String obtenerCategoria() {\n        return categoria;\n    }\n\n    @Override\n    public void actualizarUbicacion(String nuevaUbicacion) {\n        this.ubicacion = nuevaUbicacion;\n        System.out.println(\"\ud83d\udccd Ubicaci\u00f3n actualizada: \" + nuevaUbicacion);\n    }\n\n    // Implementaci\u00f3n de Renovable\n    @Override\n    public void renovar() {\n        if (prestado &amp;&amp; puedeRenovarse()) {\n            diasPrestamo += 7; // Una semana m\u00e1s\n            System.out.println(\"\ud83d\udd04 Pr\u00e9stamo renovado. Nuevos d\u00edas: \" + diasPrestamo);\n        } else {\n            System.out.println(\"\u274c No se puede renovar\");\n        }\n    }\n\n    @Override\n    public boolean puedeRenovarse() {\n        return prestado &amp;&amp; diasPrestamo &lt;= 7; // Solo si quedan pocos d\u00edas\n    }\n\n    @Override\n    public int diasRestantes() {\n        return prestado ? diasPrestamo : 0;\n    }\n\n    // M\u00e9todo espec\u00edfico del libro\n    public void mostrarInformacion() {\n        System.out.println(\"\ud83d\udcda \" + titulo + \" por \" + autor);\n        System.out.println(\"   C\u00f3digo: \" + codigo + \" | Categor\u00eda: \" + categoria);\n        System.out.println(\"   Ubicaci\u00f3n: \" + ubicacion);\n        if (prestado) {\n            System.out.println(\"   Prestado a: \" + usuarioPrestamo + \" | D\u00edas restantes: \" + diasPrestamo);\n        } else {\n            System.out.println(\"   Estado: Disponible\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/p11/#prueba-del-sistema","title":"\ud83e\uddea Prueba del Sistema","text":"<pre><code>public class PruebaBiblioteca {\n    public static void main(String[] args) {\n        Libro libro = new Libro(\"Cien A\u00f1os de Soledad\", \"Gabriel Garc\u00eda M\u00e1rquez\", \"LIT001\", \"Literatura\");\n\n        // Mostrar informaci\u00f3n inicial\n        libro.mostrarInformacion();\n\n        // Probar funcionalidades de Prestable\n        System.out.println(\"\\n=== PR\u00c9STAMO ===\");\n        libro.prestar(\"Juan P\u00e9rez\");\n        libro.mostrarInformacion();\n\n        // Probar funcionalidades de Catalogable\n        System.out.println(\"\\n=== CATALOGACI\u00d3N ===\");\n        System.out.println(\"C\u00f3digo: \" + libro.obtenerCodigo());\n        System.out.println(\"Categor\u00eda: \" + libro.obtenerCategoria());\n        libro.actualizarUbicacion(\"Secci\u00f3n Pr\u00e9stamos\");\n\n        // Probar funcionalidades de Renovable\n        System.out.println(\"\\n=== RENOVACI\u00d3N ===\");\n        System.out.println(\"\u00bfPuede renovarse? \" + libro.puedeRenovarse());\n        System.out.println(\"D\u00edas restantes: \" + libro.diasRestantes());\n        libro.renovar();\n\n        // Devolver el libro\n        System.out.println(\"\\n=== DEVOLUCI\u00d3N ===\");\n        libro.devolver();\n        libro.mostrarInformacion();\n    }\n}\n</code></pre>"},{"location":"content/p11/#ventajas-de-las-interfaces","title":"\ud83c\udfaf Ventajas de las Interfaces","text":""},{"location":"content/p11/#1-flexibilidad-en-el-diseno","title":"1. Flexibilidad en el Dise\u00f1o","text":"<pre><code>// Diferentes implementaciones de la misma interfaz\ninterface Notificacion {\n    void enviar(String mensaje);\n}\n\nclass NotificacionEmail implements Notificacion {\n    public void enviar(String mensaje) {\n        System.out.println(\"\ud83d\udce7 Email: \" + mensaje);\n    }\n}\n\nclass NotificacionSMS implements Notificacion {\n    public void enviar(String mensaje) {\n        System.out.println(\"\ud83d\udcf1 SMS: \" + mensaje);\n    }\n}\n\nclass NotificacionPush implements Notificacion {\n    public void enviar(String mensaje) {\n        System.out.println(\"\ud83d\udd14 Push: \" + mensaje);\n    }\n}\n</code></pre>"},{"location":"content/p11/#2-polimorfismo-poderoso","title":"2. Polimorfismo Poderoso","text":"<pre><code>public class ServicioNotificaciones {\n    public void enviarNotificacion(Notificacion notificacion, String mensaje) {\n        notificacion.enviar(mensaje); // No importa qu\u00e9 tipo espec\u00edfico sea\n    }\n\n    public static void main(String[] args) {\n        ServicioNotificaciones servicio = new ServicioNotificaciones();\n\n        // Mismo m\u00e9todo, diferentes comportamientos\n        servicio.enviarNotificacion(new NotificacionEmail(), \"Bienvenido!\");\n        servicio.enviarNotificacion(new NotificacionSMS(), \"C\u00f3digo: 1234\");\n        servicio.enviarNotificacion(new NotificacionPush(), \"Nueva actualizaci\u00f3n\");\n    }\n}\n</code></pre>"},{"location":"content/p11/#3-desacoplamiento-de-codigo","title":"3. Desacoplamiento de C\u00f3digo","text":"<pre><code>// \u274c MALO - Acoplado a implementaci\u00f3n espec\u00edfica\nclass ProcesadorPagos {\n    private PayPal paypal = new PayPal();\n\n    public void procesar(double monto) {\n        paypal.pagar(monto); // Solo funciona con PayPal\n    }\n}\n\n// \u2705 BUENO - Desacoplado usando interfaz\ninterface ProcesadorPago {\n    void procesar(double monto);\n}\n\nclass ProcesadorPagosFlexible {\n    private ProcesadorPago procesador;\n\n    public ProcesadorPagosFlexible(ProcesadorPago procesador) {\n        this.procesador = procesador;\n    }\n\n    public void procesar(double monto) {\n        procesador.procesar(monto); // Funciona con cualquier implementaci\u00f3n\n    }\n}\n</code></pre>"},{"location":"content/p11/#ejercicios-practicos","title":"\ud83c\udfcb\ufe0f Ejercicios Pr\u00e1cticos","text":""},{"location":"content/p11/#ejercicio-1-sistema-de-formas-geometricas","title":"Ejercicio 1: Sistema de Formas Geom\u00e9tricas","text":"<pre><code>// Crea una interfaz y implementaciones\ninterface Forma {\n    double calcularArea();\n    double calcularPerimetro();\n    void dibujar();\n}\n\n// Implementa para: C\u00edrculo, Rect\u00e1ngulo, Tri\u00e1ngulo\n</code></pre>"},{"location":"content/p11/#ejercicio-2-sistema-de-empleados","title":"Ejercicio 2: Sistema de Empleados","text":"<pre><code>// Crea interfaces para diferentes roles\ninterface Trabajador {\n    void trabajar();\n    double calcularSalario();\n}\n\ninterface Supervisor {\n    void supervisar();\n    void asignarTarea(String tarea);\n}\n\n// Implementa: Desarrollador, Gerente (que es Trabajador y Supervisor)\n</code></pre>"},{"location":"content/p11/#ejercicio-3-sistema-de-vehiculos","title":"Ejercicio 3: Sistema de Veh\u00edculos","text":"<pre><code>interface Vehiculo {\n    void acelerar();\n    void frenar();\n    int obtenerVelocidadMaxima();\n}\n\ninterface Volador {\n    void despegar();\n    void aterrizar();\n    int obtenerAltitudMaxima();\n}\n\n// Implementa: Carro, Avi\u00f3n (que es Vehiculo y Volador)\n</code></pre>"},{"location":"content/p11/#mejores-practicas","title":"\u2705 Mejores Pr\u00e1cticas","text":""},{"location":"content/p11/#1-nombres-descriptivos","title":"1. Nombres Descriptivos","text":"<pre><code>// \u2705 BUENO\ninterface Reproducible {\n    void reproducir();\n}\n\n// \u274c MALO\ninterface I {\n    void r();\n}\n</code></pre>"},{"location":"content/p11/#2-interfaces-cohesivas","title":"2. Interfaces Cohesivas","text":"<pre><code>// \u2705 BUENO - Una responsabilidad clara\ninterface Calculadora {\n    double sumar(double a, double b);\n    double restar(double a, double b);\n}\n\n// \u274c MALO - M\u00faltiples responsabilidades\ninterface CalculadoraYBaseDatos {\n    double sumar(double a, double b);\n    void guardarEnBaseDatos(String datos);\n}\n</code></pre>"},{"location":"content/p11/#3-usar-constantes-apropiadamente","title":"3. Usar Constantes Apropiadamente","text":"<pre><code>interface ConfiguracionJuego {\n    int VIDAS_INICIALES = 3;\n    int PUNTOS_POR_NIVEL = 100;\n    String VERSION = \"1.0\";\n\n    void iniciarJuego();\n    void terminarJuego();\n}\n</code></pre>"},{"location":"content/p12/","title":"Semana 12 - Evaluaci\u00f3n Segundo Momento","text":""},{"location":"content/p12/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: https://seia-stalone.vercel.app/</p>"},{"location":"content/p13/","title":"Semana 13: Gestores de Dependencias en Java con VS Code","text":""},{"location":"content/p13/#introduccion","title":"Introducci\u00f3n","text":"<p>Los gestores de dependencias son herramientas fundamentales en el desarrollo de Java que nos permiten:</p> <ul> <li>Gestionar librer\u00edas externas de forma autom\u00e1tica</li> <li>Resolver conflictos entre versiones de dependencias</li> <li>Automatizar la construcci\u00f3n del proyecto</li> <li>Mantener la consistencia entre diferentes entornos de desarrollo</li> </ul> <p>En esta semana exploraremos los dos gestores m\u00e1s populares: Maven y Gradle, utilizando las extensiones de Visual Studio Code.</p>"},{"location":"content/p13/#extensiones-de-vs-code-para-java","title":"Extensiones de VS Code para Java","text":""},{"location":"content/p13/#extension-pack-for-java","title":"Extension Pack for Java","text":"<p>La extensi\u00f3n principal que necesitamos es Extension Pack for Java, que incluye:</p> <ul> <li>Language Support for Java\u2122 by Red Hat</li> <li>Debugger for Java</li> <li>Test Runner for Java</li> <li>Maven for Java</li> <li>Project Manager for Java</li> <li>Visual Studio IntelliCode</li> </ul>"},{"location":"content/p13/#extensiones-adicionales-recomendadas","title":"Extensiones Adicionales Recomendadas","text":"<ul> <li>Gradle for Java: Soporte espec\u00edfico para proyectos Gradle</li> <li>Spring Boot Extension Pack: Para proyectos Spring Boot</li> <li>Lombok Annotations Support for VS Code: Soporte mejorado para Lombok</li> </ul>"},{"location":"content/p13/#maven-gestion-de-dependencias","title":"Maven: Gesti\u00f3n de Dependencias","text":""},{"location":"content/p13/#estructura-de-un-proyecto-maven","title":"Estructura de un Proyecto Maven","text":"<pre><code>mi-proyecto-maven/\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u2514\u2500\u2500 java/\n\u2502   \u2502       \u2514\u2500\u2500 com/\n\u2502   \u2502           \u2514\u2500\u2500 ejemplo/\n\u2502   \u2502               \u2514\u2500\u2500 App.java\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/\n\u2502               \u2514\u2500\u2500 ejemplo/\n\u2502                   \u2514\u2500\u2500 AppTest.java\n\u2514\u2500\u2500 target/\n</code></pre>"},{"location":"content/p13/#configuracion-del-archivo-pomxml","title":"Configuraci\u00f3n del archivo pom.xml","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n         http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;!-- Informaci\u00f3n del proyecto --&gt;\n    &lt;groupId&gt;com.ejemplo&lt;/groupId&gt;\n    &lt;artifactId&gt;mi-proyecto-maven&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;name&gt;Mi Proyecto Maven&lt;/name&gt;\n    &lt;description&gt;Ejemplo de proyecto Maven con Lombok&lt;/description&gt;\n\n    &lt;!-- Propiedades del proyecto --&gt;\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n        &lt;lombok.version&gt;1.18.30&lt;/lombok.version&gt;\n    &lt;/properties&gt;\n\n    &lt;!-- Dependencias --&gt;\n    &lt;dependencies&gt;\n        &lt;!-- Lombok para reducir c\u00f3digo boilerplate --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.30&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;!-- Configuraci\u00f3n de plugins --&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!-- Plugin del compilador --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.11.0&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;17&lt;/source&gt;\n                    &lt;target&gt;17&lt;/target&gt;\n                    &lt;annotationProcessorPaths&gt;\n                        &lt;path&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                            &lt;version&gt;${lombok.version}&lt;/version&gt;\n                        &lt;/path&gt;\n                    &lt;/annotationProcessorPaths&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"content/p13/#uso-de-maven-en-vs-code","title":"Uso de Maven en VS Code","text":"<ol> <li>Crear proyecto: Usar Command Palette (<code>Ctrl+Shift+P</code>) \u2192 \"Java: Create Java Project\" \u2192 \"Maven\"</li> <li>Gesti\u00f3n de dependencias: </li> <li>Editar <code>pom.xml</code></li> <li>VS Code detecta autom\u00e1ticamente los cambios</li> <li>Usar \"Java: Reload Projects\" si es necesario</li> <li>Comandos Maven: Disponibles en la paleta de comandos con prefijo \"Maven:\"</li> </ol>"},{"location":"content/p13/#ejemplo-practico-con-maven-y-lombok","title":"Ejemplo Pr\u00e1ctico con Maven y Lombok","text":""},{"location":"content/p13/#clase-de-ejemplo-con-lombok-maven","title":"Clase de Ejemplo con Lombok (Maven)","text":"<pre><code>package com.ejemplo.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * Clase que representa un Usuario del sistema\n * Utiliza Lombok para reducir c\u00f3digo boilerplate\n * Configurado para proyecto Maven\n */\n@Data                    // Genera getters, setters, toString, equals y hashCode\n@NoArgsConstructor       // Genera constructor sin par\u00e1metros\n@AllArgsConstructor      // Genera constructor con todos los par\u00e1metros\n@Builder                 // Genera patr\u00f3n Builder\npublic class Usuario {\n\n    private Long id;\n    private String nombre;\n    private String email;\n    private LocalDateTime fechaCreacion;\n    private List&lt;String&gt; roles;\n    private boolean activo;\n\n    /**\n     * M\u00e9todo personalizado que utiliza el logger de Lombok\n     */\n    public void saludar() {\n        System.out.println(\"Hola, soy \" + nombre + \" con email \" + email);\n    }\n\n    /**\n     * M\u00e9todo que demuestra el uso del builder\n     */\n    public static Usuario crearUsuarioEjemplo() {\n        return Usuario.builder()\n                .nombre(\"Juan P\u00e9rez\")\n                .email(\"juan.perez@ejemplo.com\")\n                .fechaCreacion(LocalDateTime.now())\n                .roles(List.of(\"USER\", \"ADMIN\"))\n                .activo(true)\n                .build();\n    }\n}\n</code></pre>"},{"location":"content/p13/#clase-principal-de-ejemplo-maven","title":"Clase Principal de Ejemplo (Maven)","text":"<pre><code>package com.ejemplo;\n\nimport com.ejemplo.model.Usuario;\n\nimport java.time.LocalDateTime;\nimport java.util.Arrays;\n\n/**\n * Clase principal que demuestra el uso de Lombok en Maven\n */\npublic class App {\n\n    public static void main(String[] args) {\n        System.out.println(\"Iniciando aplicaci\u00f3n Maven con Lombok\");\n\n        // Ejemplo 1: Usando constructor sin par\u00e1metros y setters\n        Usuario usuario1 = new Usuario();\n        usuario1.setNombre(\"Mar\u00eda Garc\u00eda\");\n        usuario1.setEmail(\"maria.garcia@ejemplo.com\");\n        usuario1.setFechaCreacion(LocalDateTime.now());\n        usuario1.setActivo(true);\n\n        System.out.println(\"Usuario 1 creado: \" + usuario1);\n\n        // Ejemplo 2: Usando constructor con todos los par\u00e1metros\n        Usuario usuario2 = new Usuario(\n            2L,\n            \"Carlos L\u00f3pez\",\n            \"carlos.lopez@ejemplo.com\",\n            LocalDateTime.now(),\n            Arrays.asList(\"USER\"),\n            true\n        );\n\n        System.out.println(\"Usuario 2 creado: \" + usuario2);\n\n        // Ejemplo 3: Usando el patr\u00f3n Builder\n        Usuario usuario3 = Usuario.builder()\n                .id(3L)\n                .nombre(\"Ana Mart\u00ednez\")\n                .email(\"ana.martinez@ejemplo.com\")\n                .fechaCreacion(LocalDateTime.now())\n                .roles(Arrays.asList(\"USER\", \"MODERATOR\"))\n                .activo(true)\n                .build();\n\n        System.out.println(\"Usuario 3 creado con Builder: \" + usuario3);\n\n        // Ejemplo 4: Usando m\u00e9todo est\u00e1tico\n        Usuario usuario4 = Usuario.crearUsuarioEjemplo();\n        usuario4.saludar();\n\n        // Demostrando m\u00e9todos generados autom\u00e1ticamente\n        demostrarMetodosLombok(usuario1, usuario2, usuario3, usuario4);\n    }\n\n    private static void demostrarMetodosLombok(Usuario... usuarios) {\n        System.out.println(\"=== Demostrando m\u00e9todos generados por Lombok en Maven ===\");\n\n        for (Usuario usuario : usuarios) {\n            // toString() generado autom\u00e1ticamente\n            System.out.println(\"toString(): \" + usuario.toString());\n\n            // Getters generados autom\u00e1ticamente\n            System.out.println(\"Nombre: \" + usuario.getNombre() + \n                    \", Email: \" + usuario.getEmail() + \n                    \", Activo: \" + usuario.isActivo());\n        }\n\n        // equals() y hashCode() generados autom\u00e1ticamente\n        Usuario usuarioCopia = new Usuario();\n        usuarioCopia.setNombre(usuarios[0].getNombre());\n        usuarioCopia.setEmail(usuarios[0].getEmail());\n        usuarioCopia.setFechaCreacion(usuarios[0].getFechaCreacion());\n        usuarioCopia.setActivo(usuarios[0].isActivo());\n\n        System.out.println(\"\u00bfSon iguales usuario1 y usuarioCopia? \" + \n                usuarios[0].equals(usuarioCopia));\n    }\n}\n</code></pre>"},{"location":"content/p13/#configuracion-de-vs-code-para-maven-y-lombok","title":"Configuraci\u00f3n de VS Code para Maven y Lombok","text":""},{"location":"content/p13/#configuracion-especifica-para-maven-en-settingsjson","title":"Configuraci\u00f3n espec\u00edfica para Maven en settings.json","text":"<pre><code>{\n    \"java.configuration.updateBuildConfiguration\": \"automatic\",\n    \"java.compile.nullAnalysis.mode\": \"automatic\",\n    \"java.saveActions.organizeImports\": true,\n    \"java.format.settings.url\": \"https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml\",\n    \"lombok.enabled\": true,\n    \"maven.executable.path\": \"auto\",\n    \"maven.terminal.useJavaHome\": true,\n    \"maven.view\": \"hierarchical\"\n}\n</code></pre>"},{"location":"content/p13/#configuracion-en-launchjson-para-debugging-con-maven","title":"Configuraci\u00f3n en launch.json para debugging con Maven","text":"<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"java\",\n            \"name\": \"Launch App (Maven)\",\n            \"request\": \"launch\",\n            \"mainClass\": \"com.ejemplo.App\",\n            \"projectName\": \"mi-proyecto-maven\",\n            \"vmArgs\": \"-javaagent:${userHome}/.m2/repository/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar\"\n        }\n    ]\n}\n</code></pre>"},{"location":"content/p13/#mejores-practicas-para-maven","title":"Mejores Pr\u00e1cticas para Maven","text":"<ol> <li>Usar propiedades para versiones de dependencias</li> <li>Definir encoding expl\u00edcitamente</li> <li>Usar dependency management para proyectos multi-m\u00f3dulo</li> <li>Mantener pom.xml limpio y bien documentado</li> <li>Configurar annotation processors correctamente para Lombok</li> <li>Usar perfiles para diferentes entornos</li> </ol>"},{"location":"content/p13/#troubleshooting-maven","title":"Troubleshooting Maven","text":""},{"location":"content/p13/#problemas-comunes-con-maven-y-lombok","title":"Problemas comunes con Maven y Lombok","text":"<ol> <li>Lombok no funciona: Verificar que la extensi\u00f3n est\u00e9 instalada y habilitada</li> <li>Errores de compilaci\u00f3n: Asegurar que annotation processor est\u00e9 configurado en el plugin del compilador</li> <li>M\u00e9todos no reconocidos: Recargar el proyecto Java con <code>Ctrl+Shift+P</code> \u2192 \"Java: Reload Projects\"</li> <li>Dependencias no se descargan: Verificar conexi\u00f3n y repositorios en pom.xml</li> <li>Versi\u00f3n de Java incorrecta: Revisar propiedades del compilador</li> </ol>"},{"location":"content/p13/#gradle-gestion-de-dependencias","title":"Gradle: Gesti\u00f3n de Dependencias","text":""},{"location":"content/p13/#estructura-de-un-proyecto-gradle","title":"Estructura de un Proyecto Gradle","text":"<pre><code>mi-proyecto-gradle/\n\u251c\u2500\u2500 build.gradle\n\u251c\u2500\u2500 settings.gradle\n\u251c\u2500\u2500 gradle/\n\u2502   \u2514\u2500\u2500 wrapper/\n\u251c\u2500\u2500 gradlew\n\u251c\u2500\u2500 gradlew.bat\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 main/\n    \u2502   \u2514\u2500\u2500 java/\n    \u2502       \u2514\u2500\u2500 com/\n    \u2502           \u2514\u2500\u2500 ejemplo/\n    \u2502               \u2514\u2500\u2500 App.java\n    \u2514\u2500\u2500 test/\n        \u2514\u2500\u2500 java/\n            \u2514\u2500\u2500 com/\n                \u2514\u2500\u2500 ejemplo/\n                    \u2514\u2500\u2500 AppTest.java\n</code></pre>"},{"location":"content/p13/#configuracion-del-archivo-buildgradle","title":"Configuraci\u00f3n del archivo build.gradle","text":"<pre><code>plugins {\n    id 'java'\n    id 'application'\n}\n\n// Informaci\u00f3n del proyecto\ngroup = 'com.ejemplo'\nversion = '1.0.0'\ndescription = 'Ejemplo de proyecto Gradle con Lombok'\n\n// Configuraci\u00f3n de Java\njava {\n    sourceCompatibility = JavaVersion.VERSION_17\n    targetCompatibility = JavaVersion.VERSION_17\n}\n\n// Configuraci\u00f3n de la aplicaci\u00f3n\napplication {\n    mainClass = 'com.ejemplo.App'\n}\n\n// Repositorios donde buscar dependencias\nrepositories {\n    mavenCentral()\n}\n\n// Versiones de dependencias\next {\n    lombokVersion = '1.18.30'\n}\n\n// Dependencias del proyecto\ndependencies {\n    // Lombok para reducir c\u00f3digo boilerplate\n    compileOnly \"org.projectlombok:lombok:${lombokVersion}\"\n    annotationProcessor \"org.projectlombok:lombok:${lombokVersion}\"\n\n    // Dependencias para testing\n    testCompileOnly \"org.projectlombok:lombok:${lombokVersion}\"\n    testAnnotationProcessor \"org.projectlombok:lombok:${lombokVersion}\"\n}\n\n// Configuraci\u00f3n de tareas\ntasks.named('test') {\n    useJUnitPlatform()\n}\n\n// Configuraci\u00f3n del compilador\ntasks.withType(JavaCompile) {\n    options.encoding = 'UTF-8'\n    options.compilerArgs += ['-parameters']\n}\n\n// Configuraci\u00f3n para generar JAR ejecutable\njar {\n    manifest {\n        attributes(\n            'Main-Class': 'com.ejemplo.App'\n        )\n    }\n}\n</code></pre>"},{"location":"content/p13/#configuracion-del-archivo-settingsgradle","title":"Configuraci\u00f3n del archivo settings.gradle","text":"<pre><code>rootProject.name = 'mi-proyecto-gradle'\n</code></pre>"},{"location":"content/p13/#uso-de-gradle-en-vs-code","title":"Uso de Gradle en VS Code","text":"<ol> <li>Crear proyecto: Usar Command Palette \u2192 \"Java: Create Java Project\" \u2192 \"Gradle\"</li> <li>Gesti\u00f3n de dependencias: </li> <li>Editar <code>build.gradle</code></li> <li>VS Code sincroniza autom\u00e1ticamente</li> <li>Usar \"Java: Reload Projects\" para forzar sincronizaci\u00f3n</li> <li>Comandos Gradle: Disponibles en la paleta de comandos con prefijo \"Gradle:\"</li> </ol>"},{"location":"content/p13/#ejemplo-practico-con-gradle-y-lombok","title":"Ejemplo Pr\u00e1ctico con Gradle y Lombok","text":""},{"location":"content/p13/#clase-de-ejemplo-con-lombok-gradle","title":"Clase de Ejemplo con Lombok (Gradle)","text":"<pre><code>package com.ejemplo.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Arrays;\n\n/**\n * Clase que representa un Usuario del sistema\n * Utiliza Lombok para reducir c\u00f3digo boilerplate\n * Configurado para proyecto Gradle\n */\n@Data                    // Genera getters, setters, toString, equals y hashCode\n@NoArgsConstructor       // Genera constructor sin par\u00e1metros\n@AllArgsConstructor      // Genera constructor con todos los par\u00e1metros\n@Builder                 // Genera patr\u00f3n Builder\npublic class Usuario {\n\n    private Long id;\n    private String nombre;\n    private String email;\n    private LocalDateTime fechaCreacion;\n    private List&lt;String&gt; roles;\n    private boolean activo;\n\n    /**\n     * M\u00e9todo personalizado que utiliza el logger de Lombok\n     */\n    public void saludar() {\n        System.out.println(\"Hola, soy \" + nombre + \" con email \" + email);\n    }\n\n    /**\n     * M\u00e9todo que demuestra el uso del builder\n     */\n    public static Usuario crearUsuarioEjemplo() {\n        return Usuario.builder()\n                .nombre(\"Ana Rodr\u00edguez\")\n                .email(\"ana.rodriguez@ejemplo.com\")\n                .fechaCreacion(LocalDateTime.now())\n                .roles(List.of(\"USER\", \"DEVELOPER\"))\n                .activo(true)\n                .build();\n    }\n}\n</code></pre>"},{"location":"content/p13/#clase-principal-de-ejemplo-gradle","title":"Clase Principal de Ejemplo (Gradle)","text":"<pre><code>package com.ejemplo;\n\nimport com.ejemplo.model.Usuario;\n\nimport java.time.LocalDateTime;\nimport java.util.Arrays;\n\n/**\n * Clase principal que demuestra el uso de Lombok en Gradle\n */\npublic class App {\n\n    public static void main(String[] args) {\n        System.out.println(\"Iniciando aplicaci\u00f3n Gradle con Lombok\");\n\n        // Ejemplo 1: Usando constructor sin par\u00e1metros y setters\n        Usuario usuario1 = new Usuario();\n        usuario1.setNombre(\"Pedro Mart\u00edn\");\n        usuario1.setEmail(\"pedro.martin@ejemplo.com\");\n        usuario1.setFechaCreacion(LocalDateTime.now());\n        usuario1.setActivo(true);\n\n        System.out.println(\"Usuario 1 creado: \" + usuario1);\n\n        // Ejemplo 2: Usando constructor con todos los par\u00e1metros\n        Usuario usuario2 = new Usuario(\n            2L,\n            \"Laura S\u00e1nchez\",\n            \"laura.sanchez@ejemplo.com\",\n            LocalDateTime.now(),\n            Arrays.asList(\"USER\", \"TESTER\"),\n            true\n        );\n\n        System.out.println(\"Usuario 2 creado: \" + usuario2);\n\n        // Ejemplo 3: Usando el patr\u00f3n Builder\n        Usuario usuario3 = Usuario.builder()\n                .id(3L)\n                .nombre(\"Miguel Torres\")\n                .email(\"miguel.torres@ejemplo.com\")\n                .fechaCreacion(LocalDateTime.now())\n                .roles(Arrays.asList(\"USER\", \"ARCHITECT\"))\n                .activo(true)\n                .build();\n\n        System.out.println(\"Usuario 3 creado con Builder: \" + usuario3);\n\n        // Ejemplo 4: Usando m\u00e9todo est\u00e1tico\n        Usuario usuario4 = Usuario.crearUsuarioEjemplo();\n        usuario4.saludar();\n\n        // Demostrando m\u00e9todos generados autom\u00e1ticamente\n        demostrarMetodosLombok(usuario1, usuario2, usuario3, usuario4);\n    }\n\n    private static void demostrarMetodosLombok(Usuario... usuarios) {\n        System.out.println(\"=== Demostrando m\u00e9todos generados por Lombok en Gradle ===\");\n\n        for (Usuario usuario : usuarios) {\n            // toString() generado autom\u00e1ticamente\n            System.out.println(\"toString(): \" + usuario.toString());\n\n            // Getters generados autom\u00e1ticamente\n            System.out.println(\"Nombre: \" + usuario.getNombre() + \n                    \", Email: \" + usuario.getEmail() + \n                    \", Activo: \" + usuario.isActivo());\n        }\n\n        // equals() y hashCode() generados autom\u00e1ticamente\n        Usuario usuarioCopia = new Usuario();\n        usuarioCopia.setNombre(usuarios[0].getNombre());\n        usuarioCopia.setEmail(usuarios[0].getEmail());\n        usuarioCopia.setFechaCreacion(usuarios[0].getFechaCreacion());\n        usuarioCopia.setActivo(usuarios[0].isActivo());\n\n        System.out.println(\"\u00bfSon iguales usuario1 y usuarioCopia? \" + \n                usuarios[0].equals(usuarioCopia));\n    }\n}\n</code></pre>"},{"location":"content/p13/#configuracion-de-vs-code-para-gradle-y-lombok","title":"Configuraci\u00f3n de VS Code para Gradle y Lombok","text":""},{"location":"content/p13/#configuracion-especifica-para-gradle-en-settingsjson","title":"Configuraci\u00f3n espec\u00edfica para Gradle en settings.json","text":"<pre><code>{\n    \"java.configuration.updateBuildConfiguration\": \"automatic\",\n    \"java.compile.nullAnalysis.mode\": \"automatic\",\n    \"java.saveActions.organizeImports\": true,\n    \"java.format.settings.url\": \"https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml\",\n    \"lombok.enabled\": true,\n    \"gradle.nestedProjects\": true,\n    \"gradle.synchronization.enabled\": true,\n    \"gradle.experimental.refreshDependencies\": true\n}\n</code></pre>"},{"location":"content/p13/#configuracion-en-launchjson-para-debugging-con-gradle","title":"Configuraci\u00f3n en launch.json para debugging con Gradle","text":"<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"java\",\n            \"name\": \"Launch App (Gradle)\",\n            \"request\": \"launch\",\n            \"mainClass\": \"com.ejemplo.App\",\n            \"projectName\": \"mi-proyecto-gradle\",\n            \"classPaths\": [\"${workspaceFolder}/build/classes/java/main\"],\n            \"vmArgs\": \"-javaagent:${userHome}/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.30/lombok-1.18.30.jar\"\n        }\n    ]\n}\n</code></pre>"},{"location":"content/p13/#mejores-practicas-para-gradle","title":"Mejores Pr\u00e1cticas para Gradle","text":"<ol> <li>Usar ext block para variables globales</li> <li>Aprovechar los plugins oficiales</li> <li>Configurar wrapper para consistencia de versiones</li> <li>Usar buildSrc para l\u00f3gica compleja de build</li> <li>Configurar annotation processors correctamente para Lombok</li> <li>Aprovechar builds incrementales para mejor rendimiento</li> </ol>"},{"location":"content/p13/#troubleshooting-gradle","title":"Troubleshooting Gradle","text":""},{"location":"content/p13/#problemas-comunes-con-gradle-y-lombok","title":"Problemas comunes con Gradle y Lombok","text":"<ol> <li>Lombok no funciona: Verificar que tanto <code>compileOnly</code> como <code>annotationProcessor</code> est\u00e9n configurados</li> <li>Errores de compilaci\u00f3n: Asegurar que annotation processor est\u00e9 configurado para compile y test</li> <li>M\u00e9todos no reconocidos: Ejecutar <code>./gradlew clean build</code> y recargar proyecto</li> <li>Build falla: Verificar sintaxis de build.gradle y compatibilidad de versiones</li> <li>Dependencias no resuelven: Revisar repositorios configurados y conectividad</li> <li>Wrapper no funciona: Verificar permisos de ejecuci\u00f3n en gradlew</li> </ol>"},{"location":"content/p13/#comparacion-y-conclusiones","title":"COMPARACI\u00d3N Y CONCLUSIONES","text":""},{"location":"content/p13/#comparacion-maven-vs-gradle","title":"Comparaci\u00f3n: Maven vs Gradle","text":"Aspecto Maven Gradle Configuraci\u00f3n XML (pom.xml) Groovy/Kotlin DSL (build.gradle) Curva de aprendizaje M\u00e1s f\u00e1cil para principiantes M\u00e1s flexible, requiere m\u00e1s conocimiento Rendimiento M\u00e1s lento en builds grandes M\u00e1s r\u00e1pido, builds incrementales Ecosistema Muy maduro, amplia adopci\u00f3n Moderno, creciente adopci\u00f3n Flexibilidad Menos flexible, m\u00e1s convenciones Muy flexible, altamente personalizable Configuraci\u00f3n Lombok Plugin del compilador compileOnly + annotationProcessor Soporte VS Code Excelente, integraci\u00f3n nativa Muy bueno, extensi\u00f3n adicional"},{"location":"content/p13/#cuando-usar-cada-uno","title":"Cu\u00e1ndo usar cada uno","text":""},{"location":"content/p13/#usar-maven-cuando","title":"Usar Maven cuando:","text":"<ul> <li>Proyectos empresariales con equipos grandes</li> <li>Convenciones estrictas son preferibles</li> <li>Compatibilidad con herramientas legacy es importante</li> <li>Simplicidad en configuraci\u00f3n es prioritaria</li> </ul>"},{"location":"content/p13/#usar-gradle-cuando","title":"Usar Gradle cuando:","text":"<ul> <li>Rendimiento de build es cr\u00edtico</li> <li>Flexibilidad en configuraci\u00f3n es necesaria</li> <li>Proyectos Android (Gradle es el est\u00e1ndar)</li> <li>Builds complejos con l\u00f3gica personalizada</li> </ul>"},{"location":"content/p14/","title":"Semana 14 - Configuraci\u00f3n y Uso de Hibernate en un Proyecto Maven","text":""},{"location":"content/p14/#que-es-hibernate","title":"\u00bfQu\u00e9 es Hibernate?","text":"<p>Hibernate es un framework de mapeo objeto-relacional (ORM) de c\u00f3digo abierto para Java. Permite mapear objetos Java a tablas en una base de datos relacional, facilitando la interacci\u00f3n entre aplicaciones Java y bases de datos sin necesidad de escribir consultas SQL manualmente en la mayor\u00eda de los casos. Es ampliamente utilizado para simplificar el acceso a datos en aplicaciones empresariales.</p> <p>Este documento explica c\u00f3mo configurar Hibernate 7.0.2.Final en un proyecto Maven y realizar operaciones CRUD b\u00e1sicas. </p>"},{"location":"content/p14/#1-agregar-dependencias-a-maven","title":"1. Agregar Dependencias a Maven","text":"<p>Modifica el archivo <code>pom.xml</code> en la ra\u00edz del proyecto para incluir Hibernate, el conector MySQL y HikariCP.</p> <p>Contenido de <code>pom.xml</code>: <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;orm&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Hibernate ORM --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate.orm&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\n            &lt;version&gt;7.0.2.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Conector MySQL --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;8.0.33&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- HikariCP para pool de conexiones --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;\n            &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;\n            &lt;version&gt;5.1.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Hibernate HikariCP integration (proporciona HikariCPConnectionProvider) --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-hikaricp&lt;/artifactId&gt;\n            &lt;version&gt;7.0.2.Final&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;\n</code></pre></p> <p>Ubicaci\u00f3n del archivo: <code>./pom.xml</code></p> <p>Acci\u00f3n: Ejecuta <code>mvn clean install</code> para descargar las dependencias.</p>"},{"location":"content/p14/#2-configurar-hibernate","title":"2. Configurar Hibernate","text":"<p>Crea el archivo <code>hibernate.cfg.xml</code> en el directorio de recursos con el dialecto correcto para MySQL en Hibernate 7.</p> <p>Contenido de <code>hibernate.cfg.xml</code>: <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;\n&lt;hibernate-configuration&gt;\n    &lt;session-factory&gt;\n        &lt;!-- Configuraci\u00f3n de la base de datos --&gt;\n        &lt;property name=\"hibernate.connection.driver_class\"&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.url\"&gt;\n            jdbc:mysql://jdbc:mysql://localhost:3306/tu_base_de_datos&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.username\"&gt;tu_usuario&lt;/property&gt;\n        &lt;property name=\"hibernate.connection.password\"&gt;tu_contrase\u00f1a&lt;/property&gt;\n        &lt;!-- Dialecto para Hibernate 7 --&gt;\n        &lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n        &lt;!-- Configuraci\u00f3n del pool de conexiones HikariCP --&gt;\n        &lt;!-- Usar el proveedor simple de DriverManager para evitar dependencia adicional --&gt;\n        &lt;property name=\"hibernate.connection.provider_class\"&gt;\n            org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl&lt;/property&gt;\n        &lt;property name=\"hibernate.hikari.minimumIdle\"&gt;5&lt;/property&gt;\n        &lt;property name=\"hibernate.hikari.maximumPoolSize\"&gt;10&lt;/property&gt;\n        &lt;property name=\"hibernate.hikari.idleTimeout\"&gt;300000&lt;/property&gt;\n        &lt;!-- Otras configuraciones --&gt;\n        &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/property&gt;\n        &lt;property name=\"hibernate.show_sql\"&gt;true&lt;/property&gt;\n        &lt;property name=\"hibernate.format_sql\"&gt;true&lt;/property&gt;\n        &lt;!-- Mapeo de entidades --&gt;\n        &lt;mapping class=\"com.example.Usuario\" /&gt;\n    &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre></p> <p>Ubicaci\u00f3n del archivo: <code>./src/main/resources/hibernate.cfg.xml</code></p>"},{"location":"content/p14/#3-crear-una-entidad","title":"3. Crear una Entidad","text":"<p>Define una clase Java para mapear una tabla en la base de datos.</p> <p>Contenido de <code>Usuario.java</code>: <pre><code>package com.example;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\n\n@Entity\npublic class Usuario {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String nombre;\n    private String email;\n\n    // Getters y setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n    public String getNombre() { return nombre; }\n    public void setNombre(String nombre) { this.nombre = nombre; }\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n}\n</code></pre></p> <p>Ubicaci\u00f3n del archivo: <code>./src/main/java/com/example/Usuario.java</code></p>"},{"location":"content/p14/#4-configurar-la-sessionfactory","title":"4. Configurar la SessionFactory","text":"<p>Crea una clase utilitaria para inicializar la <code>SessionFactory</code>.</p> <p>Contenido de <code>HibernateUtil.java</code>: <pre><code>package com.example;\n\nimport org.hibernate.SessionFactory;\nimport org.hibernate.cfg.Configuration;\n\npublic class HibernateUtil {\n    private static final SessionFactory sessionFactory = buildSessionFactory();\n\n    private static SessionFactory buildSessionFactory() {\n        try {\n            return new Configuration().configure().buildSessionFactory();\n        } catch (Exception ex) {\n            System.err.println(\"Error al crear SessionFactory: \" + ex);\n            throw new ExceptionInInitializerError(ex);\n        }\n    }\n\n    public static SessionFactory getSessionFactory() {\n        return sessionFactory;\n    }\n\n    public static void shutdown() {\n        getSessionFactory().close();\n    }\n}\n</code></pre></p> <p>Ubicaci\u00f3n del archivo: <code>./src/main/java/com/example/HibernateUtil.java</code></p>"},{"location":"content/p14/#5-realizar-operaciones-crud","title":"5. Realizar Operaciones CRUD","text":"<p>Usa Hibernate para operaciones CRUD.</p> <p>Contenido de <code>Main.java</code>: <pre><code>package com.example;\n\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        // Crear un usuario\n        Usuario usuario = new Usuario();\n        usuario.setNombre(\"Juan P\u00e9rez\");\n        usuario.setEmail(\"juan@example.com\");\n\n        // Guardar el usuario y obtener el id generado\n        Long usuarioId;\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\n            Transaction tx = session.beginTransaction();\n            session.persist(usuario);\n            tx.commit();\n            usuarioId = usuario.getId();\n            System.out.println(\"Usuario guardado con id: \" + usuarioId);\n        }\n\n        // Consultar un usuario\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\n            Usuario usuarioConsultado = session.find(Usuario.class, usuarioId);\n            if (usuarioConsultado == null) {\n                System.out.println(\"Usuario con id \" + usuarioId + \" no encontrado.\");\n            } else {\n                System.out.println(\"Usuario: \" + usuarioConsultado.getNombre());\n            }\n        }\n\n        // Actualizar un usuario\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\n            Transaction tx = session.beginTransaction();\n            Usuario usuarioActualizado = session.find(Usuario.class, usuarioId);\n            if (usuarioActualizado != null) {\n                usuarioActualizado.setNombre(\"Juan Actualizado\");\n                session.merge(usuarioActualizado);\n            } else {\n                System.out.println(\"No se puede actualizar: usuario con id \" + usuarioId + \" no existe.\");\n            }\n            tx.commit();\n        }\n\n        // Eliminar un usuario\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\n            Transaction tx = session.beginTransaction();\n            Usuario usuarioEliminar = session.find(Usuario.class, usuarioId);\n            if (usuarioEliminar != null) {\n                session.remove(usuarioEliminar);\n            } else {\n                System.out.println(\"No se puede eliminar: usuario con id \" + usuarioId + \" no existe.\");\n            }\n            tx.commit();\n        }\n\n        // Cerrar la SessionFactory\n        HibernateUtil.shutdown();\n    }\n\n}\n</code></pre></p> <p>Ubicaci\u00f3n del archivo: <code>./src/main/java/com/example/Main.java</code></p>"},{"location":"content/p14/#6-estructura-del-proyecto","title":"6. Estructura del Proyecto","text":"<pre><code>hibernate-example/\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 example/\n\u2502   \u2502   \u2502           \u251c\u2500\u2500 Usuario.java\n\u2502   \u2502   \u2502           \u251c\u2500\u2500 HibernateUtil.java\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 Main.java\n\u2502   \u2502   \u251c\u2500\u2500 resources/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 hibernate.cfg.xml\n</code></pre>"},{"location":"content/p14/#8-recursos","title":"8. Recursos","text":""},{"location":"content/p14/#hibernate","title":"Hibernate","text":"<ul> <li>Documentaci\u00f3n de Hibernate</li> </ul>"},{"location":"content/p14/#dbeaver","title":"DBeaver","text":"<ul> <li>Herramienta universal de gesti\u00f3n de bases de datos (gratuita y open-source para SQL/NoSQL).</li> <li>Documentaci\u00f3n oficial: Gu\u00eda de usuario y tutoriales </li> <li>Descarga: Versi\u00f3n Community </li> </ul>"},{"location":"content/p14/#aiven","title":"Aiven","text":"<ul> <li>Plataforma gestionada open-source para datos en la nube (streaming, almacenamiento y an\u00e1lisis con Kafka, PostgreSQL, etc.).</li> <li>Documentaci\u00f3n oficial: Gu\u00edas completas y API </li> <li>Sitio principal: Explora servicios</li> </ul>"},{"location":"content/p15/","title":"Semana 15","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p16/","title":"Semana 16 - Evaluaci\u00f3n Segundo Momento","text":""},{"location":"content/p16/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: https://seia-stalone.vercel.app/</p>"},{"location":"content/p16/#codigo-ish7g64s","title":"Codigo: ISH7G64S","text":""},{"location":"content/p17/","title":"Semana 17","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p18/","title":"Semana 18","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p2/","title":"Semana 2 - Clases y Objetos en Java","text":""},{"location":"content/p2/#objetivos-de-la-clase","title":"Objetivos de la Clase","text":"<ul> <li>Comprender la definici\u00f3n y prop\u00f3sito de clases y objetos en la programaci\u00f3n orientada a objetos (POO).</li> <li>Aprender a declarar atributos y m\u00e9todos en una clase.</li> <li>Dominar la creaci\u00f3n e instanciaci\u00f3n de objetos en Java.</li> <li>Aplicar estos conceptos en ejemplos contextualizados para la regi\u00f3n de Colombia, utilizando casos relacionados con elementos representativos como el f\u00fatbol.</li> </ul>"},{"location":"content/p2/#1-definicion-de-clases-y-objetos","title":"1. Definici\u00f3n de Clases y Objetos","text":""},{"location":"content/p2/#11-clases","title":"1.1. Clases","text":"<p>Una clase en Java es una plantilla que define las caracter\u00edsticas (atributos) y comportamientos (m\u00e9todos) de un tipo de entidad. Act\u00faa como un molde para crear objetos. Por ejemplo, una clase <code>JugadorFutbol</code> puede representar a un jugador de f\u00fatbol con caracter\u00edsticas como su nombre y n\u00famero de camiseta.</p> Image caption <pre><code>public class JugadorFutbol {\n    String nombre; // Atributo\n    int numeroCamiseta; // Atributo\n}\n</code></pre>"},{"location":"content/p2/#12-objetos","title":"1.2. Objetos","text":"<p>Un objeto es una instancia espec\u00edfica de una clase. Representa una entidad concreta creada a partir del molde de la clase. Por ejemplo, un objeto de la clase <code>JugadorFutbol</code> podr\u00eda ser un jugador espec\u00edfico como \"James Rodr\u00edguez\" con el n\u00famero de camiseta 10.</p> Image caption <pre><code>JugadorFutbol jugador = new JugadorFutbol(); // Creaci\u00f3n de un objeto\njugador.nombre = \"James Rodr\u00edguez\";\njugador.numeroCamiseta = 10;\n</code></pre>"},{"location":"content/p2/#13-relacion-entre-clases-y-objetos","title":"1.3. Relaci\u00f3n entre Clases y Objetos","text":"<ul> <li>La clase es como el dise\u00f1o de un estadio de f\u00fatbol: define la estructura (tribunas, campo, vestuarios).</li> <li>El objeto es un estadio espec\u00edfico, como el Estadio Metropolitano de Barranquilla, que sigue ese dise\u00f1o pero con detalles \u00fanicos.</li> </ul>"},{"location":"content/p2/#2-atributos-y-metodos","title":"2. Atributos y M\u00e9todos","text":""},{"location":"content/p2/#21-atributos","title":"2.1. Atributos","text":"<p>Los atributos son variables definidas dentro de una clase que representan las propiedades o datos de un objeto. En el contexto de un jugador de f\u00fatbol, los atributos podr\u00edan incluir el nombre, la posici\u00f3n en el campo y el n\u00famero de goles anotados.</p> Image caption <pre><code>public class JugadorFutbol {\n    String nombre; // Atributo para el nombre del jugador\n    String posicion; // Atributo para la posici\u00f3n (ej. \"Delantero\")\n    int golesAnotados; // Atributo para el n\u00famero de goles\n}\n</code></pre>"},{"location":"content/p2/#22-metodos","title":"2.2. M\u00e9todos","text":"<p>Los m\u00e9todos son funciones definidas dentro de una clase que describen los comportamientos o acciones que un objeto puede realizar. Por ejemplo, un jugador puede \"anotar un gol\" o \"presentarse\".</p> <pre><code>public class JugadorFutbol {\n    String nombre;\n    String posicion;\n    int golesAnotados;\n\n    // M\u00e9todo para anotar un gol\n    void anotarGol() {\n        golesAnotados++;\n        System.out.println(nombre + \" ha anotado un gol. Total: \" + golesAnotados);\n    }\n\n    // M\u00e9todo para presentarse\n    void presentarse() {\n        System.out.println(\"Soy \" + nombre + \", juego como \" + posicion + \" y he anotado \" + golesAnotados + \" goles.\");\n    }\n}\n</code></pre>"},{"location":"content/p2/#23-encapsulamiento-basico","title":"2.3. Encapsulamiento B\u00e1sico","text":"<p>Para proteger los atributos, es una buena pr\u00e1ctica declararlos como <code>private</code> y proporcionar m\u00e9todos <code>public</code> (getters y setters) para acceder o modificarlos. Esto se explorar\u00e1 m\u00e1s a fondo en clases posteriores.</p> Image caption <pre><code>public class JugadorFutbol {\n    private String nombre;\n    private String posicion;\n    private int golesAnotados;\n\n    public String getNombre() {\n        return nombre;\n    }\n\n    public void setNombre(String nombre) {\n        this.nombre = nombre;\n    }\n}\n</code></pre>"},{"location":"content/p2/#3-creacion-e-instanciacion-de-objetos","title":"3. Creaci\u00f3n e Instanciaci\u00f3n de Objetos","text":""},{"location":"content/p2/#31-creacion-de-objetos","title":"3.1. Creaci\u00f3n de Objetos","text":"<p>Para crear un objeto, se utiliza la palabra clave <code>new</code> seguida del nombre de la clase y par\u00e9ntesis. Esto instancia un objeto en memoria.</p> <pre><code>JugadorFutbol jugador1 = new JugadorFutbol(); // Instanciaci\u00f3n de un objeto\n</code></pre>"},{"location":"content/p2/#32-inicializacion-de-atributos","title":"3.2. Inicializaci\u00f3n de Atributos","text":"<p>Los atributos de un objeto se inicializan asign\u00e1ndoles valores directamente o mediante m\u00e9todos setters.</p> <pre><code>jugador1.nombre = \"Luis D\u00edaz\"; // Asignaci\u00f3n directa (si el atributo es p\u00fablico)\njugador1.posicion = \"Delantero\";\njugador1.golesAnotados = 5;\n</code></pre>"},{"location":"content/p2/#33-uso-de-metodos","title":"3.3. Uso de M\u00e9todos","text":"<p>Una vez creado el objeto, se pueden invocar sus m\u00e9todos para realizar acciones.</p> <pre><code>jugador1.presentarse(); // Imprime: Soy Luis D\u00edaz, juego como Delantero y he anotado 5 goles.\njugador1.anotarGol(); // Imprime: Luis D\u00edaz ha anotado un gol. Total: 6\n</code></pre>"},{"location":"content/p2/#34-ejemplo-completo","title":"3.4. Ejemplo Completo","text":"<p>El siguiente programa crea dos objetos de la clase <code>JugadorFutbol</code> y utiliza sus m\u00e9todos.</p> <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Crear el primer jugador\n        JugadorFutbol jugador1 = new JugadorFutbol();\n        jugador1.nombre = \"Luis D\u00edaz\";\n        jugador1.posicion = \"Delantero\";\n        jugador1.golesAnotados = 5;\n\n        // Crear el segundo jugador\n        JugadorFutbol jugador2 = new JugadorFutbol();\n        jugador2.nombre = \"Juan Cuadrado\";\n        jugador2.posicion = \"Mediocampista\";\n        jugador2.golesAnotados = 2;\n\n        // Usar m\u00e9todos\n        jugador1.presentarse();\n        jugador1.anotarGol();\n        jugador2.presentarse();\n    }\n}\n</code></pre> <p>Salida esperada: <pre><code>Soy Luis D\u00edaz, juego como Delantero y he anotado 5 goles.\nLuis D\u00edaz ha anotado un gol. Total: 6\nSoy Juan Cuadrado, juego como Mediocampista y he anotado 2 goles.\n</code></pre></p>"},{"location":"content/p3/","title":"Semana 3 - Atributos de una clase en Java  - Datos primitivos, clases envolventes, casteo y parseo","text":""},{"location":"content/p3/#1-que-es-un-atributo-en-java","title":"1. \u00bfQu\u00e9 es un atributo en Java?","text":"<p>Un atributo (tambi\u00e9n llamado campo o variable de instancia) es una variable declarada dentro de una clase, fuera de cualquier m\u00e9todo, que describe el estado de los objetos que se creen a partir de dicha clase.</p> <pre><code>public class Persona {\n    // Atributos\n    String nombre;      // referencia\n    int edad;           // primitivo\n    Double estatura;    // envolvente\n}\n</code></pre>"},{"location":"content/p3/#2-datos-primitivos","title":"2. Datos primitivos","text":"<p>Java define ocho tipos primitivos que almacenan valores simples y no son objetos:</p> Tipo Tama\u00f1o Rango aproximado Ejemplo literal <code>byte</code> 8 bits -128 \u2026 127 <code>(byte) 100</code> <code>short</code> 16 b -32 768 \u2026 32 767 <code>(short) 5000</code> <code>int</code> 32 b -2\u00b3\u00b9 \u2026 2\u00b3\u00b9-1 <code>42</code> <code>long</code> 64 b -2\u2076\u00b3 \u2026 2\u2076\u00b3-1 <code>99L</code> <code>float</code> 32 b IEEE 754 <code>3.14f</code> <code>double</code> 64 b IEEE 754 <code>2.71828</code> <code>char</code> 16 b 0 \u2026 65 535 (Unicode) <code>'A'</code> <code>boolean</code> 1 bit* <code>true / false</code> <code>true</code> <p>*El tama\u00f1o exacto de <code>boolean</code> depende de la JVM, conceptualmente solo almacena 1 bit.</p> <pre><code>public class PrimitivosDemo {\n    byte  b = 120;\n    short s = 30_000;\n    int   i = 1_000_000;\n    long  l = 9_000_000_000L;\n    float  f = 1.234f;\n    double d = 3.141592653589793;\n    char   c = '\u00f1';\n    boolean activo = false;\n}\n</code></pre>"},{"location":"content/p3/#3-clases-envolventes-wrapper-classes","title":"3. Clases envolventes (Wrapper Classes)","text":"<p>Cada primitivo tiene su clase envolvente en <code>java.lang</code> que lo \u201cempaqueta\u201d como un objeto. Esto permite:</p> <ul> <li>Almacenarlos en colecciones (<code>List&lt;Integer&gt;</code>).</li> <li>Aprovechar utilidades (<code>Integer.parseInt</code>, <code>Double.compare</code>).</li> <li>Representar <code>null</code>.</li> </ul> Primitivo Wrapper Constantes \u00fatiles <code>byte</code> <code>Byte</code> <code>Byte.MIN_VALUE</code> <code>short</code> <code>Short</code> <code>Short.MAX_VALUE</code> <code>int</code> <code>Integer</code> <code>Integer.SIZE (bits)</code> <code>long</code> <code>Long</code> <code>Long.BYTES</code> <code>float</code> <code>Float</code> <code>Float.NaN</code> <code>double</code> <code>Double</code> <code>Double.POSITIVE_INF</code> <code>char</code> <code>Character</code> <code>Character.isDigit(c)</code> <code>boolean</code> <code>Boolean</code> <code>Boolean.TRUE</code> <pre><code>public class WrapperDemo {\n    Integer stock = null;       // null es v\u00e1lido\n    Double precio = 19.99;      // autoboxing\n    Boolean disponible = true;  // autoboxing\n}\n</code></pre>"},{"location":"content/p3/#4-diferencias-clave-primitivo-vs-envolvente","title":"4. Diferencias clave: primitivo vs. envolvente","text":"Aspecto Primitivo Envoltorio Valor por defecto <code>0</code>, <code>false</code>, <code>\\u0000</code> <code>null</code> Almacenamiento Stack Heap Rendimiento M\u00e1s r\u00e1pido M\u00e1s lento (creaci\u00f3n de obj.) Colecciones No admite directamente S\u00ed (<code>List&lt;Integer&gt;</code>) M\u00e9todos Ninguno Muchos (<code>parseXxx</code>, <code>valueOf</code>)"},{"location":"content/p3/#5-casteo-casting","title":"5. Casteo (Casting)","text":"<p>Convertir un valor de un tipo a otro compatible.</p>"},{"location":"content/p3/#51-casteo-entre-primitivos-widening-narrowing","title":"5.1 Casteo entre primitivos (widening &amp; narrowing)","text":"<ul> <li>Widening (impl\u00edcito): de menor a mayor precisi\u00f3n <code>int \u2192 long</code>, <code>float \u2192 double</code></li> <li>Narrowing (expl\u00edcito): de mayor a menor precisi\u00f3n (p\u00e9rdida) <code>double \u2192 int</code>, <code>long \u2192 short</code></li> </ul> <pre><code>double pi = 3.1416;\nint    enteroPi = (int) pi;  // 3  (truncamiento)\n\nlong  grande = 1_000_000L;\nint   peque  = (int) grande; // ok si cabe, p\u00e9rdida si no\n</code></pre>"},{"location":"content/p3/#52-casteo-entre-objetos-updown-casting","title":"5.2 Casteo entre objetos (up/down casting)","text":"<pre><code>Object obj = \"Hola\";        // upcasting impl\u00edcito\nString s   = (String) obj;  // downcasting expl\u00edcito\n</code></pre>"},{"location":"content/p3/#6-parseo-parsing","title":"6. Parseo (Parsing)","text":"<p>Convertir cadenas (u otros tipos) a valores primitivos/envolventes.</p>"},{"location":"content/p3/#61-metodos-estaticos-parsexxx","title":"6.1 M\u00e9todos est\u00e1ticos <code>parseXxx</code>","text":"<pre><code>String edadTxt = \"28\";\nint edad = Integer.parseInt(edadTxt);\n\nString precioTxt = \"19.90\";\ndouble precio = Double.parseDouble(precioTxt);\n</code></pre>"},{"location":"content/p3/#62-metodos-valueof","title":"6.2 M\u00e9todos <code>valueOf</code>","text":"<p>Devuelve el wrapper en vez del primitivo:</p> <pre><code>Integer edadObj = Integer.valueOf(\"28\");\nBoolean flag    = Boolean.valueOf(\"true\");\n</code></pre>"},{"location":"content/p3/#63-manejo-de-errores","title":"6.3 Manejo de errores","text":"<pre><code>try {\n    int x = Integer.parseInt(\"ABC\");  // lanza NumberFormatException\n} catch (NumberFormatException e) {\n    System.err.println(\"Entrada inv\u00e1lida: \" + e.getMessage());\n}\n</code></pre>"},{"location":"content/p3/#7-ejemplos-integrados","title":"7. Ejemplos integrados","text":""},{"location":"content/p3/#71-ejemplos-con-tipos-primitivos-y-wrappers","title":"7.1 Ejemplos con tipos primitivos y wrappers","text":"<pre><code>public class Producto {\n    // Primitivos\n    private int    id;           // nunca null\n    private double pesoKg;       // 0.0 por defecto\n\n    // Wrappers\n    private Integer stock;       // puede ser null\n    private BigDecimal precio;   // precisi\u00f3n decimal\n\n    // Constructor\n    public Producto(int id, double pesoKg, Integer stock, BigDecimal precio) {\n        this.id     = id;\n        this.pesoKg = pesoKg;\n        this.stock  = stock;\n        this.precio = precio;\n    }\n\n    // Getters &amp; setters\n    public int getId() { return id; }\n    public Integer getStock() { return stock; }\n    public void setStock(Integer stock) { this.stock = stock; }\n\n    @Override\n    public String toString() {\n        return String.format(\"Producto{id=%d, peso=%.2f kg, stock=%d, precio=%s}\",\n                             id, pesoKg, stock, precio);\n    }\n}\n</code></pre>"},{"location":"content/p3/#72-utilidad-de-parseo-y-casteo","title":"7.2 Utilidad de parseo y casteo","text":"<pre><code>public class ConversorDatos {\n\n    public static void main(String[] args) {\n        // Parseo desde consola\n        String entrada = \"1234\";\n        int numero = Integer.parseInt(entrada);\n\n        // Casteo entre primitivos\n        short corto = (short) numero;\n\n        // Autoboxing / unboxing\n        Integer wrapper = numero;   // boxing\n        int deNuevo   = wrapper;    // unboxing\n\n        // Conversi\u00f3n a cadena\n        String texto = Integer.toString(deNuevo);\n\n        // Wrapper utilities\n        System.out.println(\"Bits usados: \" + Integer.SIZE);\n        System.out.println(\"Hex: \" + Integer.toHexString(numero));\n    }\n}\n</code></pre>"},{"location":"content/p3/#73-ejemplo-completo-con-gui-consola","title":"7.3 Ejemplo completo con GUI (consola)","text":"<pre><code>import java.util.Scanner;\n\npublic class ConsolaApp {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.print(\"Nombre: \");\n        String nombre = sc.nextLine();\n\n        System.out.print(\"Edad: \");\n        int edad = Integer.parseInt(sc.nextLine());\n\n        System.out.print(\"\u00bfEst\u00e1 activo? (true/false): \");\n        boolean activo = Boolean.parseBoolean(sc.nextLine());\n\n        Persona p = new Persona(nombre, edad, activo);\n        System.out.println(\"Registrado -&gt; \" + p);\n    }\n}\n\nclass Persona {\n    private final String nombre;\n    private final int edad;\n    private final boolean activo;\n\n    Persona(String nombre, int edad, boolean activo) {\n        this.nombre = nombre;\n        this.edad   = edad;\n        this.activo = activo;\n    }\n\n    @Override\n    public String toString() {\n        return nombre + \" (\" + edad + \" a\u00f1os) - activo=\" + activo;\n    }\n}\n</code></pre>"},{"location":"content/p4/","title":"Semana 4 - Constructores, encapsulaci\u00f3n y m\u00e9todos de acceso en Java","text":""},{"location":"content/p4/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Una clase Java que almacena informaci\u00f3n sensible (saldo bancario, notas de un alumno, etc.) debe impedir que valores inv\u00e1lidos lleguen a sus atributos. Para ello se combinan:</p> <ul> <li>Constructores: crean objetos en un estado v\u00e1lido desde el nacimiento.  </li> <li>Encapsulamiento: ocultar los atributos (<code>private</code>) y exponer solo interfaces controladas.  </li> <li>M\u00e9todos de acceso (<code>get</code>/<code>set</code>): puertas de entrada y salida que validan y transforman la informaci\u00f3n.</li> </ul>"},{"location":"content/p4/#2-constructores-en-profundidad","title":"2. Constructores en profundidad","text":"<p>Un constructor no devuelve nada, ni siquiera <code>void</code>, y lleva el mismo nombre que la clase.</p>"},{"location":"content/p4/#21-constructor-implicito","title":"2.1 Constructor impl\u00edcito","text":"<p>Si no escribes ninguno, Java a\u00f1ade el constructor por defecto sin par\u00e1metros:</p> <pre><code>public class Producto { }   // Constructor impl\u00edcito: new Producto()\n</code></pre>"},{"location":"content/p4/#22-constructor-sin-argumentos-explicit","title":"2.2 Constructor sin argumentos (explicit)","text":"<p>Cuando necesitas inicializar valores por defecto:</p> <pre><code>public class Producto {\n    private String nombre;\n    private double precio;\n\n    public Producto() {\n        this.nombre = \"Sin nombre\";\n        this.precio  = 0.0;\n    }\n}\n</code></pre>"},{"location":"content/p4/#23-constructor-con-parametros","title":"2.3 Constructor con par\u00e1metros","text":"<p>Permite inicializar con valores concretos y validar inmediatamente:</p> <pre><code>public Producto(String nombre, double precio) {\n    setNombre(nombre);   // reutilizo la validaci\u00f3n del setter\n    setPrecio(precio);\n}\n</code></pre>"},{"location":"content/p4/#25-constructores-por-defecto-con-builder-opcional-avanzado","title":"2.5 Constructores por defecto con Builder (opcional avanzado)","text":"<p>Para muchos par\u00e1metros opcionales se usa el patr\u00f3n Builder:</p> <pre><code>public class Producto {\n    private final String nombre;\n    private final double precio;\n    private final int stock;\n\n    private Producto(Builder b) {\n        this.nombre = b.nombre;\n        this.precio = b.precio;\n        this.stock  = b.stock;\n    }\n\n    public static class Builder {\n        private String nombre;\n        private double precio;\n        private int stock;\n\n        public Builder nombre(String val) { nombre = val; return this; }\n        public Builder precio(double val) { precio = val; return this; }\n        public Builder stock(int val)   { stock = val; return this; }\n        public Producto build()         { return new Producto(this); }\n    }\n}\n\n// Uso\nProducto p = new Producto.Builder()\n              .nombre(\"Mouse\")\n              .precio(29.99)\n              .stock(100)\n              .build();\n</code></pre>"},{"location":"content/p4/#3-encapsulamiento-de-atributos","title":"3. Encapsulamiento de atributos","text":"<p>Regla de oro: todos los atributos de estado deben ser <code>private</code>. De esta forma solo la propia clase puede modificarlos directamente.</p> <pre><code>public class CuentaBancaria {\n    private String iban;\n    private double saldo;\n    private String titular;\n}\n</code></pre>"},{"location":"content/p4/#4-metodos-de-acceso-getters-y-setters","title":"4. M\u00e9todos de acceso (getters y setters)","text":""},{"location":"content/p4/#41-getter","title":"4.1 Getter","text":"<p>Devuelve una copia o vista inmutable del dato.</p> <pre><code>public String getIban() {\n    return iban;\n}\n\npublic double getSaldo() {\n    return saldo;   // primitivo \u2192 copia autom\u00e1tica\n}\n</code></pre> <p>\u26a0\ufe0f Si devolvieras objetos mutables (ej. <code>Date</code>, <code>List</code>) devuelve una copia defensiva.</p>"},{"location":"content/p4/#42-setter","title":"4.2 Setter","text":"<p>Valida y asigna. Es la \u00fanica v\u00eda oficial para cambiar el valor.</p> <pre><code>public void setSaldo(double saldo) {\n    if (saldo &lt; 0) {\n        throw new IllegalArgumentException(\"El saldo no puede ser negativo\");\n    }\n    this.saldo = saldo;\n}\n</code></pre>"},{"location":"content/p4/#43-inmutabilad-parcial-solo-getter","title":"4.3 Inmutabilad parcial (solo getter)","text":"<p>Cuando un atributo no debe cambiar despu\u00e9s de la construcci\u00f3n, no incluyas setter:</p> <pre><code>public class Dni {\n    private final String numero;\n\n    public Dni(String numero) {\n        if (!numero.matches(\"\\\\d{8}[A-Z]\")) {\n            throw new IllegalArgumentException(\"Formato incorrecto\");\n        }\n        this.numero = numero;\n    }\n\n    public String getNumero() {   // No existe setNumero\n        return numero;\n    }\n}\n</code></pre>"},{"location":"content/p4/#5-ejemplo-completo-clase-alumno","title":"5. Ejemplo completo: clase <code>Alumno</code>","text":"<pre><code>package modelo;\n\npublic class Alumno {\n    // 1. Atributos encapsulados\n    private String dni;\n    private String nombre;\n    private double notaMedia;\n\n    // 2. Constructores\n    public Alumno() {\n        this(\"00000000X\", \"Sin nombre\", 0.0);\n    }\n\n    public Alumno(String dni, String nombre, double notaMedia) {\n        setDni(dni);\n        setNombre(nombre);\n        setNotaMedia(notaMedia);\n    }\n\n    public Alumno(Alumno otro) {\n        this.dni = otro.dni;\n        this.nombre = otro.nombre;\n        this.notaMedia = otro.notaMedia;\n    }\n\n    // 3. Getters\n    public String getDni() {\n        return dni;\n    }\n\n    public String getNombre() {\n        return nombre;\n    }\n\n    public double getNotaMedia() {\n        return notaMedia;\n    }\n\n    // 4. Setters con validaci\u00f3n\n    public void setDni(String dni) {\n        if (dni == null || !dni.matches(\"\\\\d{8}[A-Z]\")) {\n            throw new IllegalArgumentException(\"DNI inv\u00e1lido\");\n        }\n        this.dni = dni;\n    }\n\n    public void setNombre(String nombre) {\n        if (nombre == null || nombre.isBlank()) {\n            throw new IllegalArgumentException(\"El nombre no puede estar vac\u00edo\");\n        }\n        this.nombre = nombre.trim();\n    }\n\n    public void setNotaMedia(double notaMedia) {\n        if (notaMedia &lt; 0 || notaMedia &gt; 10) {\n            throw new IllegalArgumentException(\"Nota fuera de rango [0-10]\");\n        }\n        this.notaMedia = notaMedia;\n    }\n\n    // 5. Otros m\u00e9todos de negocio\n    public boolean estaAprobado() {\n        return notaMedia &gt;= 5;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"Alumno[%s, %s, %.2f]\", dni, nombre, notaMedia);\n    }\n}\n</code></pre>"},{"location":"content/p4/#6-buenas-practicas-resumidas","title":"6. Buenas pr\u00e1cticas resumidas","text":"Recomendaci\u00f3n Motivo Declara los atributos <code>private</code> Evita modificaciones externas no controladas Inicializa en constructores El objeto nace v\u00e1lido Valida en setters y constructores Un solo punto de entrada para reglas de negocio Usa <code>final</code> cuando el valor no cambia Aumenta seguridad y claridad No generes setters de atributos calculados Ej. <code>total = precio * cantidad</code> \u2192 calc\u00falalo en <code>getTotal()</code>"},{"location":"content/p5/","title":"Semana 5 - M\u00e9todos Generales de una Clase en Java","text":"<p>Introducci\u00f3n</p> <p>En Java, una clase es la base de la programaci\u00f3n orientada a objetos (POO), y los m\u00e9todos son las acciones o comportamientos que los objetos creados a partir de esa clase pueden realizar. Entre los elementos clave de una clase est\u00e1n los constructores, la sobrecarga de m\u00e9todos y constructores, y el uso del operador <code>this</code>. Este documento explica estos conceptos en detalle, con ejemplos pr\u00e1cticos, como el manejo de datos de estudiantes en un sistema educativo.</p>"},{"location":"content/p5/#1-constructores","title":"1. Constructores","text":""},{"location":"content/p5/#que-es-un-constructor","title":"\u00bfQu\u00e9 es un constructor?","text":"<p>Un constructor es un m\u00e9todo especial dentro de una clase que se utiliza para inicializar objetos. Se ejecuta autom\u00e1ticamente cuando se crea una instancia de la clase con el operador <code>new</code>. Los constructores tienen las siguientes caracter\u00edsticas:</p> <ul> <li>Tienen el mismo nombre que la clase.</li> <li>No tienen tipo de retorno, ni siquiera <code>void</code>.</li> <li>Pueden ser p\u00fablicos, privados, o tener otros modificadores de acceso.</li> <li>Si no se define un constructor, Java proporciona un constructor por defecto sin par\u00e1metros que inicializa los atributos con valores predeterminados.</li> </ul>"},{"location":"content/p5/#ejemplo-constructor-en-un-sistema-educativo","title":"Ejemplo: Constructor en un sistema educativo","text":"<p>Imagina que est\u00e1s desarrollando un sistema para una universidad en Colombia, donde necesitas gestionar informaci\u00f3n de estudiantes, como su nombre, n\u00famero de identificaci\u00f3n (por ejemplo, c\u00e9dula o DNI), y promedio acad\u00e9mico.</p> <pre><code>public class Estudiante {\n    // Atributos\n    private String nombre;\n    private String numeroIdentificacion;\n    private double promedioAcademico;\n\n    // Constructor\n    public Estudiante(String nombre, String numeroIdentificacion, double promedioAcademico) {\n        this.nombre = nombre;\n        this.numeroIdentificacion = numeroIdentificacion;\n        this.promedioAcademico = promedioAcademico;\n    }\n\n    // M\u00e9todo para mostrar informaci\u00f3n\n    public void mostrarInformacion() {\n        System.out.println(\"Nombre: \" + nombre);\n        System.out.println(\"N\u00famero de Identificaci\u00f3n: \" + numeroIdentificacion);\n        System.out.println(\"Promedio Acad\u00e9mico: \" + promedioAcademico);\n    }\n}\n</code></pre> <p>En este ejemplo: - El constructor <code>Estudiante</code> inicializa los atributos <code>nombre</code>, <code>numeroIdentificacion</code> y <code>promedioAcademico</code>. - Se usa el operador <code>this</code> para diferenciar los par\u00e1metros del constructor de los atributos de la clase. - El m\u00e9todo <code>mostrarInformacion</code> permite mostrar los datos del estudiante.</p>"},{"location":"content/p5/#uso-del-constructor","title":"Uso del constructor","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        // Crear un objeto Estudiante\n        Estudiante estudiante1 = new Estudiante(\"Mar\u00eda L\u00f3pez\", \"12345678\", 8.5);\n        estudiante1.mostrarInformacion();\n    }\n}\n</code></pre> <p>Salida: <pre><code>Nombre: Mar\u00eda L\u00f3pez\nN\u00famero de Identificaci\u00f3n: 12345678\nPromedio Acad\u00e9mico: 8.5\n</code></pre></p> <p>Constructor por defecto</p> <p>Si no defines un constructor, Java crea uno autom\u00e1ticamente. Por ejemplo: <pre><code>public Estudiante() {\n    // Atributos con valores por defecto\n    nombre = \"\";\n    numeroIdentificacion = \"\";\n    promedioAcademico = 0.0;\n}\n</code></pre></p>"},{"location":"content/p5/#2-sobrecarga-de-metodos-y-constructores","title":"2. Sobrecarga de M\u00e9todos y Constructores","text":""},{"location":"content/p5/#que-es-la-sobrecarga","title":"\u00bfQu\u00e9 es la sobrecarga?","text":"<p>La sobrecarga (overloading) permite definir m\u00faltiples m\u00e9todos o constructores con el mismo nombre, pero con diferentes par\u00e1metros (en n\u00famero, tipo o ambos). Esto es \u00fatil para ofrecer flexibilidad al usuario de la clase, permitiendo diferentes formas de inicializar un objeto o invocar un m\u00e9todo.</p>"},{"location":"content/p5/#reglas-de-la-sobrecarga","title":"Reglas de la sobrecarga","text":"<ul> <li>Los m\u00e9todos o constructores deben tener el mismo nombre.</li> <li>Deben diferir en la cantidad o el tipo de par\u00e1metros.</li> <li>El tipo de retorno no afecta la sobrecarga (en m\u00e9todos, no aplica a constructores).</li> <li>Java determina qu\u00e9 m\u00e9todo o constructor ejecutar seg\u00fan los argumentos proporcionados.</li> </ul>"},{"location":"content/p5/#ejemplo-sobrecarga-de-constructores","title":"Ejemplo: Sobrecarga de constructores","text":"<p>En el contexto de un sistema educativo, podr\u00edas necesitar inicializar un objeto <code>Estudiante</code> de diferentes maneras: con todos los datos, solo con nombre e identificaci\u00f3n, o con valores por defecto.</p> <pre><code>public class Estudiante {\n    private String nombre;\n    private String numeroIdentificacion;\n    private double promedioAcademico;\n\n    // Constructor completo\n    public Estudiante(String nombre, String numeroIdentificacion, double promedioAcademico) {\n        this.nombre = nombre;\n        this.numeroIdentificacion = numeroIdentificacion;\n        this.promedioAcademico = promedioAcademico;\n    }\n\n    // Constructor con nombre e identificaci\u00f3n\n    public Estudiante(String nombre, String numeroIdentificacion) {\n        this.nombre = nombre;\n        this.numeroIdentificacion = numeroIdentificacion;\n        this.promedioAcademico = 0.0; // Valor por defecto\n    }\n\n    // Constructor por defecto\n    public Estudiante() {\n        this.nombre = \"Sin nombre\";\n        this.numeroIdentificacion = \"Sin identificaci\u00f3n\";\n        this.promedioAcademico = 0.0;\n    }\n\n    public void mostrarInformacion() {\n        System.out.println(\"Nombre: \" + nombre);\n        System.out.println(\"N\u00famero de Identificaci\u00f3n: \" + numeroIdentificacion);\n        System.out.println(\"Promedio Acad\u00e9mico: \" + promedioAcademico);\n    }\n}\n</code></pre>"},{"location":"content/p5/#uso-de-los-constructores-sobrecargados","title":"Uso de los constructores sobrecargados","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        // Usar constructor completo\n        Estudiante estudiante1 = new Estudiante(\"Juan P\u00e9rez\", \"98765432\", 9.0);\n        estudiante1.mostrarInformacion();\n\n        // Usar constructor con nombre e identificaci\u00f3n\n        Estudiante estudiante2 = new Estudiante(\"Ana G\u00f3mez\", \"45678912\");\n        estudiante2.mostrarInformacion();\n\n        // Usar constructor por defecto\n        Estudiante estudiante3 = new Estudiante();\n        estudiante3.mostrarInformacion();\n    }\n}\n</code></pre> <p>Salida: <pre><code>Nombre: Juan P\u00e9rez\nN\u00famero de Identificaci\u00f3n: 98765432\nPromedio Acad\u00e9mico: 9.0\n\nNombre: Ana G\u00f3mez\nN\u00famero de Identificaci\u00f3n: 45678912\nPromedio Acad\u00e9mico: 0.0\n\nNombre: Sin nombre\nN\u00famero de Identificaci\u00f3n: Sin identificaci\u00f3n\nPromedio Acad\u00e9mico: 0.0\n</code></pre></p>"},{"location":"content/p5/#sobrecarga-de-metodos","title":"Sobrecarga de m\u00e9todos","text":"<p>Adem\u00e1s de constructores, puedes sobrecargar m\u00e9todos. Por ejemplo, un m\u00e9todo para calcular el estado acad\u00e9mico del estudiante seg\u00fan su promedio o seg\u00fan una escala personalizada.</p> <pre><code>public class Estudiante {\n    private String nombre;\n    private String numeroIdentificacion;\n    private double promedioAcademico;\n\n    public Estudiante(String nombre, String numeroIdentificacion, double promedioAcademico) {\n        this.nombre = nombre;\n        this.numeroIdentificacion = numeroIdentificacion;\n        this.promedioAcademico = promedioAcademico;\n    }\n\n    // M\u00e9todo sobrecargado: Estado acad\u00e9mico est\u00e1ndar (escala de 0 a 10)\n    public String calcularEstadoAcademico() {\n        if (promedioAcademico &gt;= 6.0) {\n            return \"Aprobado\";\n        } else {\n            return \"Reprobado\";\n        }\n    }\n\n    // M\u00e9todo sobrecargado: Estado acad\u00e9mico con escala personalizada\n    public String calcularEstadoAcademico(double notaMinimaAprobacion) {\n        if (promedioAcademico &gt;= notaMinimaAprobacion) {\n            return \"Aprobado con nota m\u00ednima de \" + notaMinimaAprobacion;\n        } else {\n            return \"Reprobado con nota m\u00ednima de \" + notaMinimaAprobacion;\n        }\n    }\n\n    public void mostrarInformacion() {\n        System.out.println(\"Nombre: \" + nombre);\n        System.out.println(\"N\u00famero de Identificaci\u00f3n: \" + numeroIdentificacion);\n        System.out.println(\"Promedio Acad\u00e9mico: \" + promedioAcademico);\n    }\n}\n</code></pre>"},{"location":"content/p5/#uso-de-los-metodos-sobrecargados","title":"Uso de los m\u00e9todos sobrecargados","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        Estudiante estudiante = new Estudiante(\"Carlos Ram\u00edrez\", \"12345678\", 7.5);\n        estudiante.mostrarInformacion();\n\n        // Usar m\u00e9todo sin par\u00e1metros\n        System.out.println(\"Estado: \" + estudiante.calcularEstadoAcademico());\n\n        // Usar m\u00e9todo con escala personalizada\n        System.out.println(\"Estado (nota m\u00ednima 8.0): \" + estudiante.calcularEstadoAcademico(8.0));\n    }\n}\n</code></pre> <p>Salida: <pre><code>Nombre: Carlos Ram\u00edrez\nN\u00famero de Identificaci\u00f3n: 12345678\nPromedio Acad\u00e9mico: 7.5\nEstado: Aprobado\nEstado (nota m\u00ednima 8.0): Reprobado con nota m\u00ednima de 8.0\n</code></pre></p>"},{"location":"content/p5/#3-uso-del-operador-this","title":"3. Uso del Operador <code>this</code>","text":""},{"location":"content/p5/#que-es-el-operador-this","title":"\u00bfQu\u00e9 es el operador <code>this</code>?","text":"<p>El operador <code>this</code> es una referencia al objeto actual de la clase. Se utiliza para:</p> <ul> <li>Diferenciar atributos de par\u00e1metros: Cuando los nombres de los par\u00e1metros del constructor o m\u00e9todo coinciden con los nombres de los atributos de la clase.</li> <li>Llamar a otros constructores dentro de la misma clase (constructor chaining).</li> <li>Pasar el objeto actual como argumento a otro m\u00e9todo.</li> </ul>"},{"location":"content/p5/#ejemplo-uso-de-this-para-diferenciar-atributos-y-parametros","title":"Ejemplo: Uso de <code>this</code> para diferenciar atributos y par\u00e1metros","text":"<p>En el constructor de la clase <code>Estudiante</code>, usamos <code>this</code> para evitar ambig\u00fcedad entre los par\u00e1metros y los atributos.</p> <pre><code>public class Estudiante {\n    private String nombre;\n    private String numeroIdentificacion;\n    private double promedioAcademico;\n\n    public Estudiante(String nombre, String numeroIdentificacion, double promedioAcademico) {\n        this.nombre = nombre; // this.nombre se refiere al atributo, nombre al par\u00e1metro\n        this.numeroIdentificacion = numeroIdentificacion;\n        this.promedioAcademico = promedioAcademico;\n    }\n\n    public void mostrarInformacion() {\n        System.out.println(\"Nombre: \" + this.nombre); // Uso opcional de this\n        System.out.println(\"N\u00famero de Identificaci\u00f3n: \" + this.numeroIdentificacion);\n        System.out.println(\"Promedio Acad\u00e9mico: \" + this.promedioAcademico);\n    }\n}\n</code></pre>"},{"location":"content/p5/#ejemplo-uso-de-this-para-constructor-chaining","title":"Ejemplo: Uso de <code>this</code> para constructor chaining","text":"<p>El constructor chaining permite reutilizar constructores dentro de la misma clase, reduciendo c\u00f3digo duplicado.</p> <pre><code>public class Estudiante {\n    private String nombre;\n    private String numeroIdentificacion;\n    private double promedioAcademico;\n\n    // Constructor por defecto\n    public Estudiante() {\n        this(\"Sin nombre\", \"Sin identificaci\u00f3n\", 0.0); // Llama al constructor completo\n    }\n\n    // Constructor con nombre e identificaci\u00f3n\n    public Estudiante(String nombre, String numeroIdentificacion) {\n        this(nombre, numeroIdentificacion, 0.0); // Llama al constructor completo\n    }\n\n    // Constructor completo\n    public Estudiante(String nombre, String numeroIdentificacion, double promedioAcademico) {\n        this.nombre = nombre;\n        this.numeroIdentificacion = numeroIdentificacion;\n        this.promedioAcademico = promedioAcademico;\n    }\n\n    public void mostrarInformacion() {\n        System.out.println(\"Nombre: \" + nombre);\n        System.out.println(\"N\u00famero de Identificaci\u00f3n: \" + numeroIdentificacion);\n        System.out.println(\"Promedio Acad\u00e9mico: \" + promedioAcademico);\n    }\n}\n</code></pre>"},{"location":"content/p5/#uso-del-constructor-chaining","title":"Uso del constructor chaining","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        Estudiante estudiante1 = new Estudiante(); // Usa constructor por defecto\n        estudiante1.mostrarInformacion();\n\n        Estudiante estudiante2 = new Estudiante(\"Sof\u00eda Mart\u00ednez\", \"11223344\"); // Usa constructor con nombre e identificaci\u00f3n\n        estudiante2.mostrarInformacion();\n    }\n}\n</code></pre> <p>Salida: <pre><code>Nombre: Sin nombre\nN\u00famero de Identificaci\u00f3n: Sin identificaci\u00f3n\nPromedio Acad\u00e9mico: 0.0\n\nNombre: Sof\u00eda Mart\u00ednez\nN\u00famero de Identificaci\u00f3n: 11223344\nPromedio Acad\u00e9mico: 0.0\n</code></pre></p>"},{"location":"content/p5/#ejemplo-uso-de-this-para-pasar-el-objeto-actual","title":"Ejemplo: Uso de <code>this</code> para pasar el objeto actual","text":"<p>Supongamos que el sistema educativo necesita registrar a un estudiante en un curso, pasando el objeto <code>Estudiante</code> a otro m\u00e9todo.</p> <pre><code>public class Curso {\n    public void registrarEstudiante(Estudiante estudiante) {\n        System.out.println(\"Estudiante \" + estudiante.getNombre() + \" registrado en el curso.\");\n    }\n}\n\npublic class Estudiante {\n    private String nombre;\n    private String numeroIdentificacion;\n    private double promedioAcademico;\n\n    public Estudiante(String nombre, String numeroIdentificacion, double promedioAcademico) {\n        this.nombre = nombre;\n        this.numeroIdentificacion = numeroIdentificacion;\n        this.promedioAcademico = promedioAcademico;\n    }\n\n    public String getNombre() {\n        return nombre;\n    }\n\n    public void inscribirseEnCurso(Curso curso) {\n        curso.registrarEstudiante(this); // Pasa el objeto actual\n    }\n\n    public void mostrarInformacion() {\n        System.out.println(\"Nombre: \" + nombre);\n        System.out.println(\"N\u00famero de Identificaci\u00f3n: \" + numeroIdentificacion);\n        System.out.println(\"Promedio Acad\u00e9mico: \" + promedioAcademico);\n    }\n}\n</code></pre>"},{"location":"content/p5/#uso-del-metodo-con-this","title":"Uso del m\u00e9todo con <code>this</code>","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        Estudiante estudiante = new Estudiante(\"Luc\u00eda Fern\u00e1ndez\", \"55667788\", 8.7);\n        Curso curso = new Curso();\n        estudiante.inscribirseEnCurso(curso);\n    }\n}\n</code></pre> <p>Salida: <pre><code>Estudiante Luc\u00eda Fern\u00e1ndez registrado en el curso.\n</code></pre></p>"},{"location":"content/p6/","title":"Semana 6 - Evaluaci\u00f3n Primer Momento","text":""},{"location":"content/p6/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>https://seia-stalone.vercel.app/\n</code></pre></p>"},{"location":"content/p6/#evaluacion-de-desempeno","title":"Evaluaci\u00f3n de Desempe\u00f1o","text":""},{"location":"content/p6/#instrucciones-para-comenzar","title":"Instrucciones para comenzar","text":""},{"location":"content/p6/#1-crear-fork-del-repositorio","title":"1. Crear Fork del repositorio","text":"<pre><code>https://github.com/jfinfocesde/act_b1_em1.git\n</code></pre>"},{"location":"content/p6/#2-clonar-tu-fork","title":"2. Clonar tu fork","text":"<pre><code>git clone https://github.com/TU_USUARIO/act_b1_em1.git\ncd act_b1_em1\n</code></pre>"},{"location":"content/p6/#3-configurar-informacion-personal","title":"3. Configurar informaci\u00f3n personal","text":"<p>Antes de comenzar, completa tus datos en el archivo <code>info.json</code>: <pre><code>{\n    \"identificacion\": \"TU_NUMERO_DE_IDENTIFICACION\",\n    \"nombres\": \"TUS_NOMBRES\",\n    \"apellidos\": \"TUS_APELLIDOS\",\n    \"grupo\": \"b1-martes\"\n}\n</code></pre></p>"},{"location":"content/p6/#actividades-a-realizar","title":"Actividades a realizar","text":""},{"location":"content/p6/#actividad-1-clase-estudiante","title":"Actividad 1: Clase Estudiante","text":"<p>Completa la implementaci\u00f3n de la clase <code>Estudiante.java</code> siguiendo los comentarios TODO:</p>"},{"location":"content/p6/#actividad-2-clase-libro","title":"Actividad 2: Clase Libro","text":"<p>Completa la implementaci\u00f3n de la clase <code>Libro.java</code> siguiendo los comentarios TODO:</p>"},{"location":"content/p6/#actividad-3-clase-main","title":"Actividad 3: Clase Main","text":"<p>Completa la implementaci\u00f3n del m\u00e9todo <code>main</code> en <code>Main.java</code>:</p>"},{"location":"content/p7/","title":"Semana 7: Herencia en Programaci\u00f3n Orientada a Objetos (Java)","text":""},{"location":"content/p7/#que-es-la-herencia","title":"\u00bfQu\u00e9 es la Herencia?","text":"<p>La herencia es uno de los pilares fundamentales de la Programaci\u00f3n Orientada a Objetos (POO). Permite que una clase (llamada clase hija o subclase) herede atributos y m\u00e9todos de otra clase (llamada clase padre o superclase).</p>"},{"location":"content/p7/#caracteristicas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li>Reutilizaci\u00f3n de c\u00f3digo: Evita duplicar c\u00f3digo com\u00fan</li> <li>Jerarqu\u00eda de clases: Establece relaciones \"es-un\" entre objetos</li> <li>Extensibilidad: Permite agregar funcionalidad espec\u00edfica a las subclases</li> <li>Polimorfismo: Facilita el tratamiento uniforme de objetos relacionados</li> </ul>"},{"location":"content/p7/#sintaxis-en-java","title":"Sintaxis en Java","text":"<p>En Java, utilizamos la palabra clave <code>extends</code> para establecer herencia:</p> <pre><code>class ClasePadre {\n    // Atributos y m\u00e9todos de la clase padre\n}\n\nclass ClaseHija extends ClasePadre {\n    // Atributos y m\u00e9todos adicionales de la clase hija\n    // Hereda autom\u00e1ticamente todo lo p\u00fablico y protegido del padre\n}\n</code></pre>"},{"location":"content/p7/#ejemplo-basico-vehiculos","title":"Ejemplo B\u00e1sico: Veh\u00edculos","text":""},{"location":"content/p7/#clase-padre-superclase","title":"Clase Padre (Superclase)","text":"<pre><code>public class Vehiculo {\n    protected String marca;\n    protected String modelo;\n    protected int a\u00f1o;\n    protected double velocidad;\n\n    // Constructor\n    public Vehiculo(String marca, String modelo, int a\u00f1o) {\n        this.marca = marca;\n        this.modelo = modelo;\n        this.a\u00f1o = a\u00f1o;\n        this.velocidad = 0.0;\n    }\n\n    // M\u00e9todos comunes a todos los veh\u00edculos\n    public void acelerar(double incremento) {\n        velocidad += incremento;\n        System.out.println(\"Acelerando... Velocidad actual: \" + velocidad + \" km/h\");\n    }\n\n    public void frenar(double decremento) {\n        velocidad = Math.max(0, velocidad - decremento);\n        System.out.println(\"Frenando... Velocidad actual: \" + velocidad + \" km/h\");\n    }\n\n    public void mostrarInfo() {\n        System.out.println(\"Veh\u00edculo: \" + marca + \" \" + modelo + \" (\" + a\u00f1o + \")\");\n    }\n\n    // Getters\n    public String getMarca() { return marca; }\n    public String getModelo() { return modelo; }\n    public int getA\u00f1o() { return a\u00f1o; }\n    public double getVelocidad() { return velocidad; }\n}\n</code></pre>"},{"location":"content/p7/#clases-hijas-subclases","title":"Clases Hijas (Subclases)","text":""},{"location":"content/p7/#clase-auto","title":"Clase Auto","text":"<pre><code>public class Auto extends Vehiculo {\n    private int numeroPuertas;\n    private String tipoCombustible;\n\n    // Constructor que llama al constructor del padre\n    public Auto(String marca, String modelo, int a\u00f1o, int numeroPuertas, String tipoCombustible) {\n        super(marca, modelo, a\u00f1o); // Llamada al constructor del padre\n        this.numeroPuertas = numeroPuertas;\n        this.tipoCombustible = tipoCombustible;\n    }\n\n    // M\u00e9todo espec\u00edfico de Auto\n    public void encenderAireAcondicionado() {\n        System.out.println(\"Aire acondicionado encendido en el \" + marca + \" \" + modelo);\n    }\n\n    // Sobrescritura (Override) del m\u00e9todo mostrarInfo\n    @Override\n    public void mostrarInfo() {\n        super.mostrarInfo(); // Llama al m\u00e9todo del padre\n        System.out.println(\"Tipo: Auto\");\n        System.out.println(\"Puertas: \" + numeroPuertas);\n        System.out.println(\"Combustible: \" + tipoCombustible);\n    }\n\n    // Getters espec\u00edficos\n    public int getNumeroPuertas() { return numeroPuertas; }\n    public String getTipoCombustible() { return tipoCombustible; }\n}\n</code></pre>"},{"location":"content/p7/#clase-motocicleta","title":"Clase Motocicleta","text":"<pre><code>public class Motocicleta extends Vehiculo {\n    private int cilindrada;\n    private boolean tieneSidecar;\n\n    public Motocicleta(String marca, String modelo, int a\u00f1o, int cilindrada, boolean tieneSidecar) {\n        super(marca, modelo, a\u00f1o);\n        this.cilindrada = cilindrada;\n        this.tieneSidecar = tieneSidecar;\n    }\n\n    // M\u00e9todo espec\u00edfico de Motocicleta\n    public void hacerCaballito() {\n        if (velocidad &gt; 20) {\n            System.out.println(\"\u00a1Haciendo caballito con la \" + marca + \" \" + modelo + \"!\");\n        } else {\n            System.out.println(\"Necesitas m\u00e1s velocidad para hacer caballito.\");\n        }\n    }\n\n    @Override\n    public void mostrarInfo() {\n        super.mostrarInfo();\n        System.out.println(\"Tipo: Motocicleta\");\n        System.out.println(\"Cilindrada: \" + cilindrada + \"cc\");\n        System.out.println(\"Sidecar: \" + (tieneSidecar ? \"S\u00ed\" : \"No\"));\n    }\n\n    public int getCilindrada() { return cilindrada; }\n    public boolean isTieneSidecar() { return tieneSidecar; }\n}\n</code></pre>"},{"location":"content/p7/#conceptos-importantes","title":"Conceptos Importantes","text":""},{"location":"content/p7/#1-la-palabra-clave-super","title":"1. La palabra clave <code>super</code>","text":"<ul> <li><code>super()</code>: Llama al constructor de la clase padre</li> <li><code>super.metodo()</code>: Llama a un m\u00e9todo de la clase padre</li> <li><code>super.atributo</code>: Accede a un atributo de la clase padre</li> </ul>"},{"location":"content/p7/#2-sobrescritura-de-metodos-override","title":"2. Sobrescritura de m\u00e9todos (<code>@Override</code>)","text":"<p>Permite que una subclase proporcione una implementaci\u00f3n espec\u00edfica de un m\u00e9todo que ya est\u00e1 definido en su superclase.</p> <pre><code>@Override\npublic void mostrarInfo() {\n    super.mostrarInfo(); // Opcional: llamar al m\u00e9todo del padre\n    // Agregar funcionalidad espec\u00edfica\n    System.out.println(\"Informaci\u00f3n adicional espec\u00edfica\");\n}\n</code></pre>"},{"location":"content/p7/#3-modificadores-de-acceso-en-herencia","title":"3. Modificadores de acceso en herencia","text":"<ul> <li><code>public</code>: Accesible desde cualquier lugar</li> <li><code>protected</code>: Accesible desde la misma clase, subclases y mismo paquete</li> <li><code>private</code>: NO heredable, solo accesible desde la misma clase</li> <li>Sin modificador (package-private): Accesible desde el mismo paquete</li> </ul>"},{"location":"content/p7/#ejemplo-de-uso-completo","title":"Ejemplo de Uso Completo","text":"<pre><code>public class EjemploHerencia {\n    public static void main(String[] args) {\n        // Crear objetos de diferentes tipos\n        Auto miAuto = new Auto(\"Toyota\", \"Corolla\", 2023, 4, \"Gasolina\");\n        Motocicleta miMoto = new Motocicleta(\"Yamaha\", \"R1\", 2022, 1000, false);\n\n        System.out.println(\"=== INFORMACI\u00d3N DE VEH\u00cdCULOS ===\");\n        miAuto.mostrarInfo();\n        System.out.println();\n        miMoto.mostrarInfo();\n\n        System.out.println(\"\\n=== PROBANDO FUNCIONALIDADES ===\");\n\n        // M\u00e9todos heredados (disponibles en ambos)\n        miAuto.acelerar(50);\n        miMoto.acelerar(80);\n\n        // M\u00e9todos espec\u00edficos de cada clase\n        miAuto.encenderAireAcondicionado();\n        miMoto.hacerCaballito();\n\n        // Polimorfismo: tratar objetos diferentes de manera uniforme\n        System.out.println(\"\\n=== POLIMORFISMO ===\");\n        Vehiculo[] vehiculos = {miAuto, miMoto};\n\n        for (Vehiculo vehiculo : vehiculos) {\n            vehiculo.mostrarInfo(); // Llama al m\u00e9todo sobrescrito correspondiente\n            vehiculo.acelerar(20);\n            System.out.println();\n        }\n    }\n}\n</code></pre>"},{"location":"content/p7/#ventajas-de-la-herencia","title":"Ventajas de la Herencia","text":"<ol> <li>Reutilizaci\u00f3n de c\u00f3digo: Evita duplicaci\u00f3n</li> <li>Mantenimiento: Cambios en la clase padre se propagan autom\u00e1ticamente</li> <li>Organizaci\u00f3n: Crea jerarqu\u00edas l\u00f3gicas y comprensibles</li> <li>Extensibilidad: F\u00e1cil agregar nuevas funcionalidades</li> <li>Polimorfismo: Permite tratar objetos relacionados de manera uniforme</li> </ol>"},{"location":"content/p7/#consideraciones-importantes","title":"Consideraciones Importantes","text":"<ul> <li>Java solo permite herencia simple (una clase solo puede extender una clase)</li> <li>Todas las clases en Java heredan impl\u00edcitamente de <code>Object</code></li> <li>Los constructores NO se heredan, pero se pueden llamar con <code>super()</code></li> <li>Los m\u00e9todos <code>private</code> NO se heredan</li> <li>Los m\u00e9todos <code>static</code> se heredan pero no se pueden sobrescribir</li> </ul> <p>Buena Pr\u00e1ctica</p> <p>Usa herencia cuando existe una relaci\u00f3n \"es-un\" clara. Por ejemplo: \"Un Auto ES-UN Veh\u00edculo\", \"Una Motocicleta ES-UN Veh\u00edculo\".</p> <p>Cuidado</p> <p>No abuses de la herencia. A veces la composici\u00f3n (\"tiene-un\") es m\u00e1s apropiada que la herencia (\"es-un\").</p>"},{"location":"content/p7/#actividades-practicas","title":"Actividades Pr\u00e1cticas","text":""},{"location":"content/p7/#ejercicio-1-sistema-de-animales","title":"Ejercicio 1: Sistema de Animales","text":"<p>Crea una jerarqu\u00eda de clases para un zool\u00f3gico: - Clase padre <code>Animal</code> con atributos: nombre, edad, peso - Clases hijas: <code>Mamifero</code>, <code>Ave</code>, <code>Reptil</code> - Cada clase hija debe tener atributos y m\u00e9todos espec\u00edficos - Implementa sobrescritura del m\u00e9todo <code>hacerSonido()</code></p>"},{"location":"content/p7/#ejercicio-2-sistema-de-figuras-geometricas","title":"Ejercicio 2: Sistema de Figuras Geom\u00e9tricas","text":"<p>Implementa una jerarqu\u00eda para figuras geom\u00e9tricas: - Clase padre <code>Figura</code> con atributos: color, nombre - Clases hijas: <code>Circulo</code>, <code>Rectangulo</code>, <code>Triangulo</code> - M\u00e9todos para calcular \u00e1rea y per\u00edmetro en cada clase hija - M\u00e9todo <code>mostrarInformacion()</code> sobrescrito en cada clase</p>"},{"location":"content/p7/#ejercicio-3-sistema-de-productos","title":"Ejercicio 3: Sistema de Productos","text":"<p>Crea un sistema de productos para una tienda: - Clase padre <code>Producto</code> con: c\u00f3digo, nombre, precio - Clases hijas: <code>ProductoElectronico</code>, <code>ProductoAlimenticio</code> - Implementa m\u00e9todos espec\u00edficos como <code>calcularGarantia()</code> y <code>verificarVencimiento()</code></p> <p>Consejos para los Ejercicios</p> <ul> <li>Usa <code>protected</code> para atributos que las clases hijas necesiten acceder</li> <li>Implementa constructores que llamen a <code>super()</code></li> <li>Sobrescribe m\u00e9todos cuando necesites comportamiento espec\u00edfico</li> <li>Usa <code>@Override</code> para mayor claridad en el c\u00f3digo</li> </ul>"},{"location":"content/p8/","title":"Semana 8: Herencia en Java - Ejemplo Exhaustivo: Sistema de Empleados","text":"<p>En esta secci\u00f3n desarrollaremos un ejemplo completo que demuestra todos los conceptos de herencia en Java de manera pr\u00e1ctica y detallada.</p>"},{"location":"content/p8/#descripcion-del-sistema","title":"Descripci\u00f3n del Sistema","text":"<p>Crearemos un sistema de gesti\u00f3n de empleados que incluye: - Una clase padre <code>Empleado</code> con funcionalidades b\u00e1sicas - Clases hijas especializadas: <code>Desarrollador</code> y <code>Gerente</code> - M\u00e9todos espec\u00edficos para cada tipo de empleado - C\u00e1lculos de salarios y bonificaciones diferenciados</p>"},{"location":"content/p8/#implementacion-completa","title":"Implementaci\u00f3n Completa","text":""},{"location":"content/p8/#clase-padre-empleado","title":"Clase Padre: Empleado","text":"<pre><code>public class Empleado {\n    // Atributos protegidos para acceso desde clases hijas\n    protected String nombre;\n    protected String apellido;\n    protected String cedula;\n    protected double salarioBase;\n    protected int a\u00f1osExperiencia;\n    protected String departamento;\n\n    // Constructor\n    public Empleado(String nombre, String apellido, String cedula,\n                   double salarioBase, int a\u00f1osExperiencia, String departamento) {\n        this.nombre = nombre;\n        this.apellido = apellido;\n        this.cedula = cedula;\n        this.salarioBase = salarioBase;\n        this.a\u00f1osExperiencia = a\u00f1osExperiencia;\n        this.departamento = departamento;\n    }\n\n    // Getters\n    public String getNombre() {\n        return nombre;\n    }\n\n    public String getApellido() {\n        return apellido;\n    }\n\n    public String getCedula() {\n        return cedula;\n    }\n\n    public double getSalarioBase() {\n        return salarioBase;\n    }\n\n    public int getA\u00f1osExperiencia() {\n        return a\u00f1osExperiencia;\n    }\n\n    public String getDepartamento() {\n        return departamento;\n    }\n\n    // Setters con validaciones\n    public void setNombre(String nombre) {\n        if (nombre != null &amp;&amp; !nombre.trim().isEmpty()) {\n            this.nombre = nombre;\n        }\n    }\n\n    public void setApellido(String apellido) {\n        if (apellido != null &amp;&amp; !apellido.trim().isEmpty()) {\n            this.apellido = apellido;\n        }\n    }\n\n    public void setSalarioBase(double salarioBase) {\n        if (salarioBase &gt;= 0) {\n            this.salarioBase = salarioBase;\n        }\n    }\n\n    public void setA\u00f1osExperiencia(int a\u00f1osExperiencia) {\n        if (a\u00f1osExperiencia &gt;= 0) {\n            this.a\u00f1osExperiencia = a\u00f1osExperiencia;\n        }\n    }\n\n    public void setDepartamento(String departamento) {\n        this.departamento = departamento;\n    }\n\n    // M\u00e9todos de negocio\n    public double calcularSalarioTotal() {\n        // Salario base + bono por experiencia (5% por a\u00f1o)\n        double bonoExperiencia = salarioBase * (a\u00f1osExperiencia * 0.05);\n        return salarioBase + bonoExperiencia;\n    }\n\n    public double calcularBonoAnual() {\n        // Bono anual equivalente a un mes de salario\n        return calcularSalarioTotal();\n    }\n\n    public String obtenerNombreCompleto() {\n        return nombre + \" \" + apellido;\n    }\n\n    public void mostrarInformacion() {\n        System.out.println(\"=== INFORMACI\u00d3N DEL EMPLEADO ===\");\n        System.out.println(\"Nombre: \" + obtenerNombreCompleto());\n        System.out.println(\"C\u00e9dula: \" + cedula);\n        System.out.println(\"Departamento: \" + departamento);\n        System.out.println(\"A\u00f1os de experiencia: \" + a\u00f1osExperiencia);\n        System.out.println(\"Salario base: $\" + String.format(\"%.2f\", salarioBase));\n        System.out.println(\"Salario total: $\" + String.format(\"%.2f\", calcularSalarioTotal()));\n        System.out.println(\"Bono anual: $\" + String.format(\"%.2f\", calcularBonoAnual()));\n    }\n\n    public boolean esElegibleParaPromocion() {\n        // Criterio b\u00e1sico: m\u00e1s de 3 a\u00f1os de experiencia\n        return a\u00f1osExperiencia &gt;= 3;\n    }\n}\n</code></pre>"},{"location":"content/p8/#clase-hija-desarrollador","title":"Clase Hija: Desarrollador","text":"<pre><code>public class Desarrollador extends Empleado {\n    // Atributos espec\u00edficos del desarrollador\n    private String lenguajePrincipal;\n    private int proyectosCompletados;\n    private String nivelSenioridad; // Junior, Mid, Senior\n    private boolean tieneCertificaciones;\n\n    // Constructor\n    public Desarrollador(String nombre, String apellido, String cedula,\n                        double salarioBase, int a\u00f1osExperiencia, String departamento,\n                        String lenguajePrincipal, int proyectosCompletados,\n                        String nivelSenioridad, boolean tieneCertificaciones) {\n        super(nombre, apellido, cedula, salarioBase, a\u00f1osExperiencia, departamento);\n        this.lenguajePrincipal = lenguajePrincipal;\n        this.proyectosCompletados = proyectosCompletados;\n        this.nivelSenioridad = nivelSenioridad;\n        this.tieneCertificaciones = tieneCertificaciones;\n    }\n\n    // Getters espec\u00edficos\n    public String getLenguajePrincipal() {\n        return lenguajePrincipal;\n    }\n\n    public int getProyectosCompletados() {\n        return proyectosCompletados;\n    }\n\n    public String getNivelSenioridad() {\n        return nivelSenioridad;\n    }\n\n    public boolean isTieneCertificaciones() {\n        return tieneCertificaciones;\n    }\n\n    // Setters espec\u00edficos\n    public void setLenguajePrincipal(String lenguajePrincipal) {\n        this.lenguajePrincipal = lenguajePrincipal;\n    }\n\n    public void setProyectosCompletados(int proyectosCompletados) {\n        if (proyectosCompletados &gt;= 0) {\n            this.proyectosCompletados = proyectosCompletados;\n        }\n    }\n\n    public void setNivelSenioridad(String nivelSenioridad) {\n        this.nivelSenioridad = nivelSenioridad;\n    }\n\n    public void setTieneCertificaciones(boolean tieneCertificaciones) {\n        this.tieneCertificaciones = tieneCertificaciones;\n    }\n\n    // Sobrescritura del m\u00e9todo calcularSalarioTotal\n    @Override\n    public double calcularSalarioTotal() {\n        double salarioConExperiencia = super.calcularSalarioTotal();\n\n        // Bono por nivel de senioridad\n        double bonoSenioridad = 0;\n        switch (nivelSenioridad.toLowerCase()) {\n            case \"junior\":\n                bonoSenioridad = salarioBase * 0.10; // 10%\n                break;\n            case \"mid\":\n                bonoSenioridad = salarioBase * 0.25; // 25%\n                break;\n            case \"senior\":\n                bonoSenioridad = salarioBase * 0.40; // 40%\n                break;\n        }\n\n        // Bono por proyectos completados (2% por proyecto)\n        double bonoProyectos = salarioBase * (proyectosCompletados * 0.02);\n\n        // Bono por certificaciones\n        double bonoCertificaciones = tieneCertificaciones ? salarioBase * 0.15 : 0;\n\n        return salarioConExperiencia + bonoSenioridad + bonoProyectos + bonoCertificaciones;\n    }\n\n    @Override\n    public double calcularBonoAnual() {\n        double bonoBase = super.calcularBonoAnual();\n\n        // Bono adicional por alta productividad\n        if (proyectosCompletados &gt;= 10) {\n            bonoBase += salarioBase * 0.5; // 50% adicional\n        } else if (proyectosCompletados &gt;= 5) {\n            bonoBase += salarioBase * 0.25; // 25% adicional\n        }\n\n        return bonoBase;\n    }\n\n    // M\u00e9todos espec\u00edficos del desarrollador\n    public void completarProyecto() {\n        proyectosCompletados++;\n        System.out.println(obtenerNombreCompleto() + \" ha completado un nuevo proyecto.\");\n        System.out.println(\"Total de proyectos: \" + proyectosCompletados);\n    }\n\n    public void actualizarCertificaciones(boolean nuevasCertificaciones) {\n        this.tieneCertificaciones = nuevasCertificaciones;\n        String estado = nuevasCertificaciones ? \"obtenido\" : \"perdido\";\n        System.out.println(obtenerNombreCompleto() + \" ha \" + estado + \" certificaciones.\");\n    }\n\n    public double calcularProductividad() {\n        // Proyectos por a\u00f1o de experiencia\n        return a\u00f1osExperiencia &gt; 0 ? (double) proyectosCompletados / a\u00f1osExperiencia : 0;\n    }\n\n    @Override\n    public void mostrarInformacion() {\n        super.mostrarInformacion();\n        System.out.println(\"=== INFORMACI\u00d3N ESPEC\u00cdFICA DEL DESARROLLADOR ===\");\n        System.out.println(\"Lenguaje principal: \" + lenguajePrincipal);\n        System.out.println(\"Nivel de senioridad: \" + nivelSenioridad);\n        System.out.println(\"Proyectos completados: \" + proyectosCompletados);\n        System.out.println(\"Tiene certificaciones: \" + (tieneCertificaciones ? \"S\u00ed\" : \"No\"));\n        System.out.println(\"Productividad: \" + String.format(\"%.2f\", calcularProductividad()) + \" proyectos/a\u00f1o\");\n    }\n\n    @Override\n    public boolean esElegibleParaPromocion() {\n        // Criterios espec\u00edficos para desarrolladores\n        return super.esElegibleParaPromocion() &amp;&amp; \n               proyectosCompletados &gt;= 5 &amp;&amp; \n               tieneCertificaciones;\n    }\n}\n</code></pre>"},{"location":"content/p8/#clase-hija-gerente","title":"Clase Hija: Gerente","text":"<pre><code>public class Gerente extends Empleado {\n    // Atributos espec\u00edficos del gerente\n    private int equipoACargoTama\u00f1o;\n    private double presupuestoAnual;\n    private int metasCumplidas;\n    private int metasTotales;\n    private String tipoGerencia; // Operacional, Estrat\u00e9gica, T\u00e9cnica\n\n    // Constructor\n    public Gerente(String nombre, String apellido, String cedula,\n                  double salarioBase, int a\u00f1osExperiencia, String departamento,\n                  int equipoACargoTama\u00f1o, double presupuestoAnual, \n                  int metasCumplidas, int metasTotales, String tipoGerencia) {\n        super(nombre, apellido, cedula, salarioBase, a\u00f1osExperiencia, departamento);\n        this.equipoACargoTama\u00f1o = equipoACargoTama\u00f1o;\n        this.presupuestoAnual = presupuestoAnual;\n        this.metasCumplidas = metasCumplidas;\n        this.metasTotales = metasTotales;\n        this.tipoGerencia = tipoGerencia;\n    }\n\n    // Getters espec\u00edficos\n    public int getEquipoACargoTama\u00f1o() {\n        return equipoACargoTama\u00f1o;\n    }\n\n    public double getPresupuestoAnual() {\n        return presupuestoAnual;\n    }\n\n    public int getMetasCumplidas() {\n        return metasCumplidas;\n    }\n\n    public int getMetasTotales() {\n        return metasTotales;\n    }\n\n    public String getTipoGerencia() {\n        return tipoGerencia;\n    }\n\n    // Setters espec\u00edficos\n    public void setEquipoACargoTama\u00f1o(int equipoACargoTama\u00f1o) {\n        if (equipoACargoTama\u00f1o &gt;= 0) {\n            this.equipoACargoTama\u00f1o = equipoACargoTama\u00f1o;\n        }\n    }\n\n    public void setPresupuestoAnual(double presupuestoAnual) {\n        if (presupuestoAnual &gt;= 0) {\n            this.presupuestoAnual = presupuestoAnual;\n        }\n    }\n\n    public void setMetasCumplidas(int metasCumplidas) {\n        if (metasCumplidas &gt;= 0 &amp;&amp; metasCumplidas &lt;= metasTotales) {\n            this.metasCumplidas = metasCumplidas;\n        }\n    }\n\n    public void setMetasTotales(int metasTotales) {\n        if (metasTotales &gt;= 0) {\n            this.metasTotales = metasTotales;\n            // Ajustar metas cumplidas si es necesario\n            if (metasCumplidas &gt; metasTotales) {\n                metasCumplidas = metasTotales;\n            }\n        }\n    }\n\n    public void setTipoGerencia(String tipoGerencia) {\n        this.tipoGerencia = tipoGerencia;\n    }\n\n    // Sobrescritura del m\u00e9todo calcularSalarioTotal\n    @Override\n    public double calcularSalarioTotal() {\n        double salarioConExperiencia = super.calcularSalarioTotal();\n\n        // Bono por tama\u00f1o del equipo (2% por cada persona)\n        double bonoEquipo = salarioBase * (equipoACargoTama\u00f1o * 0.02);\n\n        // Bono por tipo de gerencia\n        double bonoTipo = 0;\n        switch (tipoGerencia.toLowerCase()) {\n            case \"operacional\":\n                bonoTipo = salarioBase * 0.20; // 20%\n                break;\n            case \"estrat\u00e9gica\":\n                bonoTipo = salarioBase * 0.35; // 35%\n                break;\n            case \"t\u00e9cnica\":\n                bonoTipo = salarioBase * 0.25; // 25%\n                break;\n        }\n\n        // Bono por cumplimiento de metas\n        double porcentajeMetas = metasTotales &gt; 0 ? (double) metasCumplidas / metasTotales : 0;\n        double bonoMetas = salarioBase * (porcentajeMetas * 0.30); // Hasta 30%\n\n        return salarioConExperiencia + bonoEquipo + bonoTipo + bonoMetas;\n    }\n\n    @Override\n    public double calcularBonoAnual() {\n        double bonoBase = super.calcularBonoAnual();\n\n        // Bono adicional por gesti\u00f3n exitosa\n        double porcentajeMetas = metasTotales &gt; 0 ? (double) metasCumplidas / metasTotales : 0;\n        if (porcentajeMetas &gt;= 0.9) { // 90% o m\u00e1s de metas cumplidas\n            bonoBase += salarioBase * 1.0; // 100% adicional\n        } else if (porcentajeMetas &gt;= 0.7) { // 70% o m\u00e1s\n            bonoBase += salarioBase * 0.5; // 50% adicional\n        }\n\n        return bonoBase;\n    }\n\n    // M\u00e9todos espec\u00edficos del gerente\n    public void cumplirMeta() {\n        if (metasCumplidas &lt; metasTotales) {\n            metasCumplidas++;\n            System.out.println(obtenerNombreCompleto() + \" ha cumplido una nueva meta.\");\n            System.out.println(\"Progreso: \" + metasCumplidas + \"/\" + metasTotales + \" metas\");\n        } else {\n            System.out.println(\"Todas las metas ya han sido cumplidas.\");\n        }\n    }\n\n    public void agregarMiembroEquipo() {\n        equipoACargoTama\u00f1o++;\n        System.out.println(\"Nuevo miembro agregado al equipo de \" + obtenerNombreCompleto());\n        System.out.println(\"Tama\u00f1o actual del equipo: \" + equipoACargoTama\u00f1o + \" personas\");\n    }\n\n    public double calcularPorcentajeMetas() {\n        return metasTotales &gt; 0 ? (double) metasCumplidas / metasTotales * 100 : 0;\n    }\n\n    public double calcularPresupuestoPorPersona() {\n        return equipoACargoTama\u00f1o &gt; 0 ? presupuestoAnual / equipoACargoTama\u00f1o : 0;\n    }\n\n    @Override\n    public void mostrarInformacion() {\n        super.mostrarInformacion();\n        System.out.println(\"=== INFORMACI\u00d3N ESPEC\u00cdFICA DEL GERENTE ===\");\n        System.out.println(\"Tipo de gerencia: \" + tipoGerencia);\n        System.out.println(\"Tama\u00f1o del equipo: \" + equipoACargoTama\u00f1o + \" personas\");\n        System.out.println(\"Presupuesto anual: $\" + String.format(\"%.2f\", presupuestoAnual));\n        System.out.println(\"Metas cumplidas: \" + metasCumplidas + \"/\" + metasTotales);\n        System.out.println(\"Porcentaje de cumplimiento: \" + String.format(\"%.1f\", calcularPorcentajeMetas()) + \"%\");\n        System.out.println(\"Presupuesto por persona: $\" + String.format(\"%.2f\", calcularPresupuestoPorPersona()));\n    }\n\n    @Override\n    public boolean esElegibleParaPromocion() {\n        // Criterios espec\u00edficos para gerentes\n        return super.esElegibleParaPromocion() &amp;&amp; \n               calcularPorcentajeMetas() &gt;= 80.0 &amp;&amp; \n               equipoACargoTama\u00f1o &gt;= 5;\n    }\n}\n</code></pre>"},{"location":"content/p8/#clase-de-demostracion-completa","title":"Clase de Demostraci\u00f3n Completa","text":"<pre><code>public class SistemaEmpleados {\n    public static void main(String[] args) {\n        System.out.println(\"=== SISTEMA DE GESTI\u00d3N DE EMPLEADOS ===\");\n        System.out.println();\n\n        // Crear empleados de diferentes tipos\n        Empleado empleadoGeneral = new Empleado(\n            \"Ana\", \"Garc\u00eda\", \"12345678\", 3000000, 2, \"Recursos Humanos\"\n        );\n\n        Desarrollador desarrollador = new Desarrollador(\n            \"Carlos\", \"Rodr\u00edguez\", \"87654321\", 4500000, 4, \"Tecnolog\u00eda\",\n            \"Java\", 8, \"Mid\", true\n        );\n\n        Gerente gerente = new Gerente(\n            \"Mar\u00eda\", \"L\u00f3pez\", \"11223344\", 8000000, 7, \"Operaciones\",\n            12, 500000000, 7, 10, \"Estrat\u00e9gica\"\n        );\n\n        // Mostrar informaci\u00f3n inicial\n        System.out.println(\"\\n=== INFORMACI\u00d3N INICIAL DE EMPLEADOS ===\");\n        empleadoGeneral.mostrarInformacion();\n        System.out.println();\n\n        desarrollador.mostrarInformacion();\n        System.out.println();\n\n        gerente.mostrarInformacion();\n        System.out.println();\n\n        // Demostrar funcionalidades espec\u00edficas\n        System.out.println(\"=== DEMOSTRANDO FUNCIONALIDADES ESPEC\u00cdFICAS ===\");\n\n        // Desarrollador completa proyectos\n        desarrollador.completarProyecto();\n        desarrollador.completarProyecto();\n        System.out.println(\"Nueva productividad: \" + \n                          String.format(\"%.2f\", desarrollador.calcularProductividad()) + \n                          \" proyectos/a\u00f1o\\n\");\n\n        // Gerente cumple metas\n        gerente.cumplirMeta();\n        gerente.cumplirMeta();\n        gerente.agregarMiembroEquipo();\n        System.out.println();\n\n        // Verificar elegibilidad para promoci\u00f3n\n        System.out.println(\"=== ELEGIBILIDAD PARA PROMOCI\u00d3N ===\");\n        System.out.println(empleadoGeneral.obtenerNombreCompleto() + \n                          \" elegible: \" + empleadoGeneral.esElegibleParaPromocion());\n        System.out.println(desarrollador.obtenerNombreCompleto() + \n                          \" elegible: \" + desarrollador.esElegibleParaPromocion());\n        System.out.println(gerente.obtenerNombreCompleto() + \n                          \" elegible: \" + gerente.esElegibleParaPromocion());\n        System.out.println();\n\n        // Demostrar polimorfismo\n        System.out.println(\"=== DEMOSTRACI\u00d3N DE POLIMORFISMO ===\");\n        Empleado[] empleados = {empleadoGeneral, desarrollador, gerente};\n\n        double totalSalarios = 0;\n        double totalBonos = 0;\n\n        for (Empleado emp : empleados) {\n            System.out.println(\"Procesando: \" + emp.obtenerNombreCompleto());\n            System.out.println(\"Salario total: $\" + String.format(\"%.2f\", emp.calcularSalarioTotal()));\n            System.out.println(\"Bono anual: $\" + String.format(\"%.2f\", emp.calcularBonoAnual()));\n\n            totalSalarios += emp.calcularSalarioTotal();\n            totalBonos += emp.calcularBonoAnual();\n            System.out.println();\n        }\n\n        System.out.println(\"=== RESUMEN FINANCIERO ===\");\n        System.out.println(\"Total salarios mensuales: $\" + String.format(\"%.2f\", totalSalarios));\n        System.out.println(\"Total bonos anuales: $\" + String.format(\"%.2f\", totalBonos));\n        System.out.println(\"Costo anual total: $\" + String.format(\"%.2f\", (totalSalarios * 12) + totalBonos));\n\n        // Demostrar uso de setters\n        System.out.println(\"\\n=== ACTUALIZANDO INFORMACI\u00d3N ===\");\n        desarrollador.setSalarioBase(5000000);\n        desarrollador.setNivelSenioridad(\"Senior\");\n        System.out.println(\"Nuevo salario del desarrollador: $\" + \n                          String.format(\"%.2f\", desarrollador.calcularSalarioTotal()));\n\n        gerente.setPresupuestoAnual(600000000);\n        System.out.println(\"Nuevo presupuesto por persona: $\" + \n                          String.format(\"%.2f\", gerente.calcularPresupuestoPorPersona()));\n    }\n}\n</code></pre>"},{"location":"content/p8/#caracteristicas-del-ejemplo","title":"Caracter\u00edsticas del Ejemplo","text":"<p>\u2705 Cumple todos los requisitos:</p> <ul> <li>Herencia completa: <code>Desarrollador</code> y <code>Gerente</code> extienden <code>Empleado</code></li> <li>Solo constructores: No hay m\u00e9todos abstractos</li> <li>Getters y setters: Todos los atributos tienen acceso controlado</li> <li>M\u00e9todos concretos: Toda la funcionalidad est\u00e1 implementada</li> <li>L\u00f3gica de negocio detallada: C\u00e1lculos de salarios, bonos, productividad</li> <li>Simplicidad: C\u00f3digo claro y f\u00e1cil de entender</li> </ul> <p>\ud83c\udfaf Funcionalidades implementadas:</p> <ul> <li>C\u00e1lculo de salarios con diferentes criterios por tipo de empleado</li> <li>Sistema de bonificaciones espec\u00edfico para cada rol</li> <li>Validaciones en setters para mantener integridad de datos</li> <li>Polimorfismo para tratar diferentes tipos de empleados uniformemente</li> <li>M\u00e9tricas de rendimiento espec\u00edficas (productividad, cumplimiento de metas)</li> <li>Sistema de elegibilidad para promociones con criterios diferenciados</li> </ul>"},{"location":"content/p8/#conceptos-demostrados","title":"Conceptos Demostrados","text":""},{"location":"content/p8/#1-herencia","title":"1. Herencia","text":"<ul> <li>Las clases <code>Desarrollador</code> y <code>Gerente</code> heredan de <code>Empleado</code></li> <li>Reutilizaci\u00f3n de c\u00f3digo com\u00fan en la clase padre</li> <li>Especializaci\u00f3n en las clases hijas</li> </ul>"},{"location":"content/p8/#2-encapsulacion","title":"2. Encapsulaci\u00f3n","text":"<ul> <li>Atributos privados con acceso controlado</li> <li>Validaciones en los setters</li> <li>M\u00e9todos p\u00fablicos para interactuar con los objetos</li> </ul>"},{"location":"content/p8/#3-polimorfismo","title":"3. Polimorfismo","text":"<ul> <li>Mismo m\u00e9todo (<code>calcularSalarioTotal</code>) con comportamientos diferentes</li> <li>Tratamiento uniforme de diferentes tipos de empleados</li> <li>Uso de arrays de la clase padre para manejar objetos de clases hijas</li> </ul>"},{"location":"content/p8/#4-sobrescritura-de-metodos","title":"4. Sobrescritura de M\u00e9todos","text":"<ul> <li><code>@Override</code> para claridad en el c\u00f3digo</li> <li>Llamadas a <code>super()</code> para reutilizar funcionalidad del padre</li> <li>Extensi\u00f3n del comportamiento base con l\u00f3gica espec\u00edfica</li> </ul> <p>Este ejemplo demuestra c\u00f3mo la herencia permite crear sistemas flexibles y mantenibles, donde cada tipo de empleado puede tener su propia l\u00f3gica de negocio mientras comparte funcionalidades comunes.</p>"},{"location":"content/p9/","title":"Semana 9 - Clases Abstractas en Java","text":"<p>Las clases abstractas en Java son una herramienta poderosa para la programaci\u00f3n orientada a objetos, que permite definir la estructura y el comportamiento general de una clase sin tener que implementar todos sus m\u00e9todos. </p> <p>\u00bfQu\u00e9 son las clases abstractas?</p> <ul> <li>Plantillas incompletas: Las clases abstractas act\u00faan como plantillas incompletas para otras clases. No se pueden instanciar directamente (crear objetos de ellas), pero sirven como base para clases concretas que las heredan y completan su implementaci\u00f3n.</li> <li>M\u00e9todos abstractos: Una clase abstracta puede contener m\u00e9todos abstractos, que se declaran pero no se implementan. La responsabilidad de implementar estos m\u00e9todos recae en las clases que heredan de la clase abstracta. </li> <li>Definici\u00f3n de comportamiento general: Las clases abstractas definen un comportamiento general para un tipo de objeto, dejando la implementaci\u00f3n espec\u00edfica a las clases derivadas.</li> <li>Abstracci\u00f3n: El concepto de clase abstracta promueve la abstracci\u00f3n, ocultando la complejidad de la implementaci\u00f3n y mostrando \u00fanicamente la interfaz necesaria.</li> </ul> <p>Ejemplo:</p> <p>Imaginemos que estamos creando un sistema de gesti\u00f3n de veh\u00edculos. Podemos definir una clase abstracta llamada \"Vehiculo\":</p> <pre><code>public abstract class Vehiculo {\n  private String marca;\n  private String modelo;\n\n  public Vehiculo(String marca, String modelo) {\n    this.marca = marca;\n    this.modelo = modelo;\n  }\n\n  public String getMarca() {\n    return marca;\n  }\n\n  public String getModelo() {\n    return modelo;\n  }\n\n  // M\u00e9todo abstracto que define el comportamiento de moverse\n  public abstract void moverse();\n}\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>Vehiculo</code> es una clase abstracta, definida con la palabra clave <code>abstract</code>.</li> <li>Tiene atributos privados para <code>marca</code> y <code>modelo</code>, y un constructor para inicializarlos.</li> <li>Tambi\u00e9n tiene m\u00e9todos para obtener la marca y el modelo del veh\u00edculo.</li> <li>El m\u00e9todo <code>moverse()</code> es abstracto, ya que solo se declara (con <code>abstract</code>) pero no se implementa.</li> </ul> <p>\u00bfC\u00f3mo se utilizan las clases abstractas?</p> <ol> <li>Herencia: Las clases concretas heredan de la clase abstracta.</li> <li>Implementaci\u00f3n de m\u00e9todos abstractos: Las clases derivadas deben implementar todos los m\u00e9todos abstractos de la clase padre.</li> <li>Especializaci\u00f3n del comportamiento: Cada clase derivada puede especializar el comportamiento definido en la clase abstracta.</li> </ol> <p>Ejemplo de herencia:</p> <pre><code>public class Coche extends Vehiculo {\n\n  public Coche(String marca, String modelo) {\n    super(marca, modelo);\n  }\n\n  @Override\n  public void moverse() {\n    System.out.println(\"El coche se mueve sobre ruedas\");\n  }\n}\n\npublic class Avion extends Vehiculo {\n\n  public Avion(String marca, String modelo) {\n    super(marca, modelo);\n  }\n\n  @Override\n  public void moverse() {\n    System.out.println(\"El avi\u00f3n se mueve en el aire\");\n  }\n}\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>Coche</code> y <code>Avion</code> son clases concretas que heredan de la clase abstracta <code>Vehiculo</code>.</li> <li>Ambas clases implementan el m\u00e9todo abstracto <code>moverse()</code> con su propia l\u00f3gica espec\u00edfica.</li> </ul> <p>Ventajas de las clases abstractas:</p> <ul> <li>Reutilizaci\u00f3n de c\u00f3digo: Se reduce la duplicaci\u00f3n de c\u00f3digo al definir el comportamiento general en una sola clase abstracta.</li> <li>Abstracci\u00f3n: Se facilita la abstracci\u00f3n de conceptos, ocultando detalles de implementaci\u00f3n.</li> <li>Polimorfismo: Permite crear diferentes tipos de objetos que comparten una misma interfaz (el m\u00e9todo <code>moverse()</code> en este caso).</li> </ul>"},{"location":"content/p9/#metodos-abstractos-en-java-la-base-de-la-abstraccion","title":"M\u00e9todos Abstractos en Java: La Base de la Abstracci\u00f3n","text":"<p>Los m\u00e9todos abstractos son la pieza clave de las clases abstractas en Java. Son como promesas de comportamiento que se declaran, pero no se implementan. La responsabilidad de definir la l\u00f3gica de estos m\u00e9todos recae en las clases que heredan de la clase abstracta.</p> <p>Caracter\u00edsticas de los m\u00e9todos abstractos:</p> <ul> <li>Solo declaraci\u00f3n: Los m\u00e9todos abstractos solo se declaran, usando la palabra clave <code>abstract</code> antes de la declaraci\u00f3n del m\u00e9todo.</li> <li>No tienen cuerpo: Los m\u00e9todos abstractos no tienen cuerpo de c\u00f3digo entre llaves (<code>{}</code>).</li> <li>Deben ser implementados: Las clases derivadas (hijas) que heredan de la clase abstracta deben implementar todos los m\u00e9todos abstractos.</li> <li>Implementaci\u00f3n espec\u00edfica: La implementaci\u00f3n del m\u00e9todo abstracto puede variar entre las clases derivadas, lo que permite especializar el comportamiento.</li> </ul> <p>Ejemplo:</p> <pre><code>public abstract class Animal {\n\n  // M\u00e9todo abstracto para definir el sonido que emite un animal\n  public abstract void hacerSonido();\n\n  // Otros m\u00e9todos pueden ser concretos\n  public void comer() {\n    System.out.println(\"El animal est\u00e1 comiendo\");\n  }\n}\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>hacerSonido()</code> es un m\u00e9todo abstracto, solo declarado pero no implementado.</li> <li>Las clases que hereden de <code>Animal</code> (como <code>Perro</code> o <code>Gato</code>) deber\u00e1n implementar <code>hacerSonido()</code> con su propio comportamiento espec\u00edfico.</li> <li>El m\u00e9todo <code>comer()</code> es concreto, ya que tiene un cuerpo definido.</li> </ul> <p>Ventajas de los m\u00e9todos abstractos:</p> <ul> <li>Abstracci\u00f3n: Permiten definir un comportamiento com\u00fan sin necesidad de conocer la implementaci\u00f3n exacta.</li> <li>Flexibilidad: La implementaci\u00f3n del m\u00e9todo abstracto puede variar entre las clases derivadas, lo que permite adaptarse a diferentes necesidades.</li> <li>Polimorfismo: Facilitan el polimorfismo, ya que las clases derivadas pueden responder de forma diferente al mismo m\u00e9todo.</li> <li>Reutilizaci\u00f3n: Promueven la reutilizaci\u00f3n de c\u00f3digo, al definir el comportamiento general en la clase abstracta.</li> </ul> <p>Ejemplos de uso:</p> <ul> <li>Interfaces gr\u00e1ficas: Se pueden definir m\u00e9todos abstractos para el comportamiento de botones, menus, etc. Cada tipo de bot\u00f3n o menu implementar\u00eda estos m\u00e9todos de forma espec\u00edfica.</li> <li>Sistemas de gesti\u00f3n: Se pueden definir m\u00e9todos abstractos para operaciones comunes en diferentes tipos de entidades (usuarios, productos, etc.).</li> <li>Dise\u00f1o de patrones: Se pueden utilizar para implementar patrones como \"Factory Method\" o \"Template Method\".</li> </ul>"},{"location":"content/p9/#ejemplo-de-clase-abstracta-con-metodos-abstractos-sistema-de-transporte-publico","title":"Ejemplo de Clase Abstracta con M\u00e9todos Abstractos: Sistema de Transporte P\u00fablico","text":"<p>Este ejemplo ilustra c\u00f3mo usar clases abstractas y m\u00e9todos abstractos para modelar un sistema de transporte p\u00fablico en Colombia, con \u00e9nfasis en la diversidad de modalidades existentes.</p> <p>Clase Abstracta:</p> <pre><code>public abstract class TransportePublico {\n  private String nombreCompania;\n  private String tipoTransporte;\n\n  public TransportePublico(String nombreCompania, String tipoTransporte) {\n    this.nombreCompania = nombreCompania;\n    this.tipoTransporte = tipoTransporte;\n  }\n\n  public String getNombreCompania() {\n    return nombreCompania;\n  }\n\n  public String getTipoTransporte() {\n    return tipoTransporte;\n  }\n\n  // M\u00e9todos abstractos:\n  public abstract double calcularTarifa(double distancia);\n  public abstract String getMedioPago();\n  public abstract String getRuta();\n  public abstract int getCapacidad();\n\n  // M\u00e9todo concreto:\n  public void mostrarInformacion() {\n    System.out.println(\"Nombre de la compa\u00f1\u00eda: \" + nombreCompania);\n    System.out.println(\"Tipo de transporte: \" + tipoTransporte);\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La clase <code>TransportePublico</code> es abstracta, lo que indica que no se pueden crear instancias directas de ella.</li> <li>Tiene atributos para el nombre de la compa\u00f1\u00eda y el tipo de transporte (ej. \"Bus\", \"Metro\", \"TransMilenio\").</li> <li>Contiene m\u00e9todos abstractos:<ul> <li><code>calcularTarifa(double distancia)</code>: calcula la tarifa de acuerdo a la distancia, pero la implementaci\u00f3n es espec\u00edfica para cada tipo de transporte.</li> <li><code>getMedioPago()</code>: devuelve los medios de pago aceptados (ej. \"Efectivo\", \"Tarjeta\", \"App\").</li> <li><code>getRuta()</code>: devuelve la ruta que recorre el transporte (ej. \"Estaci\u00f3n A - Estaci\u00f3n B\").</li> <li><code>getCapacidad()</code>: devuelve la capacidad m\u00e1xima de pasajeros.</li> </ul> </li> <li>Tiene un m\u00e9todo concreto <code>mostrarInformacion()</code> que muestra informaci\u00f3n general sobre el transporte.</li> </ul> <p>Clases Derivadas:</p> <pre><code>// Clase para buses\npublic class Bus extends TransportePublico {\n\n  public Bus(String nombreCompania) {\n    super(nombreCompania, \"Bus\");\n  }\n\n  @Override\n  public double calcularTarifa(double distancia) {\n    // L\u00f3gica espec\u00edfica para calcular la tarifa de un bus\n    return 2000 + distancia * 100; // Ejemplo simple\n  }\n\n  @Override\n  public String getMedioPago() {\n    return \"Efectivo, Tarjeta\";\n  }\n\n  @Override\n  public String getRuta() {\n    // Implementaci\u00f3n espec\u00edfica para la ruta del bus\n    return \"Terminal - Centro\"; \n  }\n\n  @Override\n  public int getCapacidad() {\n    return 50; // Capacidad t\u00edpica de un bus\n  }\n}\n\n// Clase para el Metro de Medell\u00edn\npublic class Metro extends TransportePublico {\n\n  public Metro(String nombreCompania) {\n    super(nombreCompania, \"Metro\");\n  }\n\n  @Override\n  public double calcularTarifa(double distancia) {\n    // L\u00f3gica espec\u00edfica para calcular la tarifa del metro\n    return 2500; // Tarifa fija en el Metro de Medell\u00edn\n  }\n\n  @Override\n  public String getMedioPago() {\n    return \"Tarjeta C\u00edvica\";\n  }\n\n  @Override\n  public String getRuta() {\n    // Implementaci\u00f3n espec\u00edfica para la ruta del metro\n    return \"Estaci\u00f3n A - Estaci\u00f3n Z\";\n  }\n\n  @Override\n  public int getCapacidad() {\n    return 100; // Capacidad t\u00edpica de un tren de metro\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Se crean clases derivadas espec\u00edficas para \"Bus\" y \"Metro\".</li> <li>Cada clase implementa los m\u00e9todos abstractos de <code>TransportePublico</code> con la l\u00f3gica espec\u00edfica para ese tipo de transporte.</li> </ul> <p>Uso del Ejemplo:</p> <pre><code>public class EjemploTransporte {\n\n  public static void main(String[] args) {\n    // Crear un objeto Bus\n    Bus bus = new Bus(\"Transmilenio\");\n    bus.mostrarInformacion();\n    System.out.println(\"Tarifa: \" + bus.calcularTarifa(10));\n\n    // Crear un objeto Metro\n    Metro metro = new Metro(\"Metro de Medell\u00edn\");\n    metro.mostrarInformacion();\n    System.out.println(\"Tarifa: \" + metro.calcularTarifa(5));\n  }\n}\n</code></pre> <p>Beneficios de esta implementaci\u00f3n:</p> <ul> <li>Abstracci\u00f3n: La clase <code>TransportePublico</code> define el comportamiento general de un sistema de transporte p\u00fablico, sin preocuparse por detalles espec\u00edficos de cada tipo de transporte.</li> <li>Flexibilidad: Se pueden a\u00f1adir nuevos tipos de transporte (ej. \"Tranv\u00eda\", \"Cable A\u00e9reo\") simplemente creando nuevas clases derivadas de <code>TransportePublico</code>.</li> <li>Reutilizaci\u00f3n de c\u00f3digo: El c\u00f3digo com\u00fan se define en la clase abstracta, evitando la duplicaci\u00f3n en las clases derivadas.</li> </ul>"},{"location":"content/p9/#interfaces-en-java-contratos-de-comportamiento","title":"Interfaces en Java: Contratos de Comportamiento","text":"<p>Las interfaces en Java son una herramienta fundamental de la programaci\u00f3n orientada a objetos que define un \"contrato\" de comportamiento que las clases deben cumplir. A diferencia de las clases abstractas, las interfaces especifican qu\u00e9 m\u00e9todos debe tener una clase, pero no c\u00f3mo implementarlos.</p> <p>\u00bfQu\u00e9 son las interfaces?</p> <ul> <li>Contratos de comportamiento: Las interfaces definen un conjunto de m\u00e9todos que una clase debe implementar, sin especificar c\u00f3mo.</li> <li>Abstracci\u00f3n pura: Todas las declaraciones de m\u00e9todos en una interfaz son impl\u00edcitamente abstractas (hasta Java 8).</li> <li>M\u00faltiple implementaci\u00f3n: Una clase puede implementar m\u00faltiples interfaces, lo que permite una forma de \"herencia m\u00faltiple\" de comportamiento.</li> <li>Sin estado: Tradicionalmente, las interfaces no pueden tener variables de instancia (solo constantes).</li> </ul> <p>Sintaxis b\u00e1sica:</p> <pre><code>public interface NombreInterfaz {\n    // Constantes (impl\u00edcitamente public, static, final)\n    int CONSTANTE = 100;\n\n    // M\u00e9todos abstractos (impl\u00edcitamente public y abstract)\n    void metodoAbstracto();\n    String otroMetodo(int parametro);\n}\n</code></pre> <p>Implementaci\u00f3n de interfaces:</p> <pre><code>public class MiClase implements NombreInterfaz {\n    @Override\n    public void metodoAbstracto() {\n        // Implementaci\u00f3n espec\u00edfica\n        System.out.println(\"Implementaci\u00f3n del m\u00e9todo\");\n    }\n\n    @Override\n    public String otroMetodo(int parametro) {\n        return \"Resultado: \" + parametro;\n    }\n}\n</code></pre>"},{"location":"content/p9/#caracteristicas-avanzadas-de-las-interfaces-java-8","title":"Caracter\u00edsticas Avanzadas de las Interfaces (Java 8+)","text":"<p>A partir de Java 8, las interfaces han evolucionado para incluir nuevas caracter\u00edsticas que las hacen m\u00e1s flexibles y poderosas.</p> <p>M\u00e9todos Default:</p> <p>Los m\u00e9todos default permiten agregar nuevos m\u00e9todos a las interfaces sin romper las clases que ya las implementan.</p> <pre><code>public interface Vehiculo {\n    void acelerar();\n    void frenar();\n\n    // M\u00e9todo default con implementaci\u00f3n\n    default void encender() {\n        System.out.println(\"El veh\u00edculo se est\u00e1 encendiendo...\");\n    }\n\n    default void mostrarInfo() {\n        System.out.println(\"Este es un veh\u00edculo gen\u00e9rico\");\n    }\n}\n</code></pre> <p>M\u00e9todos Est\u00e1ticos:</p> <p>Las interfaces pueden tener m\u00e9todos est\u00e1ticos que pertenecen a la interfaz misma.</p> <pre><code>public interface CalculadoraMatematica {\n    double calcular(double a, double b);\n\n    // M\u00e9todo est\u00e1tico\n    static double convertirARadianes(double grados) {\n        return grados * Math.PI / 180;\n    }\n\n    static void mostrarVersion() {\n        System.out.println(\"Calculadora v2.0\");\n    }\n}\n</code></pre>"},{"location":"content/p9/#ejemplo-practico-sistema-de-gestion-de-empleados","title":"Ejemplo Pr\u00e1ctico: Sistema de Gesti\u00f3n de Empleados","text":"<p>Este ejemplo muestra c\u00f3mo usar interfaces para crear un sistema flexible de gesti\u00f3n de empleados.</p> <p>Interfaces del sistema:</p> <pre><code>// Interfaz para empleados que pueden trabajar\npublic interface Trabajador {\n    void trabajar();\n    double calcularSalario();\n\n    // M\u00e9todo default\n    default void tomarDescanso() {\n        System.out.println(\"Tomando un descanso de 15 minutos\");\n    }\n}\n\n// Interfaz para empleados con responsabilidades de gesti\u00f3n\npublic interface Gestor {\n    void dirigirEquipo();\n    void tomarDecisiones();\n    int getNumeroEmpleadosACargo();\n\n    // M\u00e9todo default\n    default void organizarReunion() {\n        System.out.println(\"Organizando reuni\u00f3n de equipo\");\n    }\n}\n\n// Interfaz para empleados que pueden capacitar\npublic interface Capacitador {\n    void darCapacitacion(String tema);\n    boolean estaCalificadoPara(String tema);\n\n    // M\u00e9todo est\u00e1tico\n    static void mostrarTemasPrincipales() {\n        System.out.println(\"Temas: Java, Python, Gesti\u00f3n de Proyectos\");\n    }\n}\n</code></pre> <p>Implementaciones concretas:</p> <pre><code>// Desarrollador que solo trabaja\npublic class Desarrollador implements Trabajador {\n    private String nombre;\n    private double salarioBase;\n\n    public Desarrollador(String nombre, double salarioBase) {\n        this.nombre = nombre;\n        this.salarioBase = salarioBase;\n    }\n\n    @Override\n    public void trabajar() {\n        System.out.println(nombre + \" est\u00e1 programando\");\n    }\n\n    @Override\n    public double calcularSalario() {\n        return salarioBase;\n    }\n}\n\n// Gerente que trabaja y gestiona\npublic class Gerente implements Trabajador, Gestor {\n    private String nombre;\n    private double salarioBase;\n    private int empleadosACargo;\n\n    public Gerente(String nombre, double salarioBase, int empleadosACargo) {\n        this.nombre = nombre;\n        this.salarioBase = salarioBase;\n        this.empleadosACargo = empleadosACargo;\n    }\n\n    @Override\n    public void trabajar() {\n        System.out.println(nombre + \" est\u00e1 gestionando proyectos\");\n    }\n\n    @Override\n    public double calcularSalario() {\n        return salarioBase + (empleadosACargo * 200); // Bono por gesti\u00f3n\n    }\n\n    @Override\n    public void dirigirEquipo() {\n        System.out.println(nombre + \" est\u00e1 dirigiendo un equipo de \" + empleadosACargo + \" personas\");\n    }\n\n    @Override\n    public void tomarDecisiones() {\n        System.out.println(nombre + \" est\u00e1 tomando decisiones estrat\u00e9gicas\");\n    }\n\n    @Override\n    public int getNumeroEmpleadosACargo() {\n        return empleadosACargo;\n    }\n}\n\n// L\u00edder t\u00e9cnico que trabaja, gestiona y capacita\npublic class LiderTecnico implements Trabajador, Gestor, Capacitador {\n    private String nombre;\n    private double salarioBase;\n    private int empleadosACargo;\n    private String[] especialidades;\n\n    public LiderTecnico(String nombre, double salarioBase, int empleadosACargo, String[] especialidades) {\n        this.nombre = nombre;\n        this.salarioBase = salarioBase;\n        this.empleadosACargo = empleadosACargo;\n        this.especialidades = especialidades;\n    }\n\n    @Override\n    public void trabajar() {\n        System.out.println(nombre + \" est\u00e1 liderando el desarrollo t\u00e9cnico\");\n    }\n\n    @Override\n    public double calcularSalario() {\n        return salarioBase + (empleadosACargo * 300) + (especialidades.length * 500);\n    }\n\n    @Override\n    public void dirigirEquipo() {\n        System.out.println(nombre + \" est\u00e1 dirigiendo el equipo t\u00e9cnico\");\n    }\n\n    @Override\n    public void tomarDecisiones() {\n        System.out.println(nombre + \" est\u00e1 tomando decisiones t\u00e9cnicas\");\n    }\n\n    @Override\n    public int getNumeroEmpleadosACargo() {\n        return empleadosACargo;\n    }\n\n    @Override\n    public void darCapacitacion(String tema) {\n        if (estaCalificadoPara(tema)) {\n            System.out.println(nombre + \" est\u00e1 dando capacitaci\u00f3n sobre: \" + tema);\n        } else {\n            System.out.println(nombre + \" no est\u00e1 calificado para ense\u00f1ar: \" + tema);\n        }\n    }\n\n    @Override\n    public boolean estaCalificadoPara(String tema) {\n        for (String especialidad : especialidades) {\n            if (especialidad.equalsIgnoreCase(tema)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n</code></pre> <p>Uso del sistema:</p> <pre><code>public class SistemaEmpleados {\n    public static void main(String[] args) {\n        // Crear diferentes tipos de empleados\n        Desarrollador dev = new Desarrollador(\"Ana\", 3000000);\n        Gerente gerente = new Gerente(\"Carlos\", 5000000, 5);\n        LiderTecnico lider = new LiderTecnico(\"Mar\u00eda\", 4500000, 3, \n            new String[]{\"Java\", \"Python\", \"Arquitectura\"});\n\n        // Polimorfismo con interfaces\n        Trabajador[] empleados = {dev, gerente, lider};\n\n        System.out.println(\"=== TRABAJO DIARIO ===\");\n        for (Trabajador empleado : empleados) {\n            empleado.trabajar();\n            System.out.println(\"Salario: $\" + empleado.calcularSalario());\n            empleado.tomarDescanso(); // M\u00e9todo default\n            System.out.println();\n        }\n\n        System.out.println(\"=== GESTI\u00d3N ===\");\n        Gestor[] gestores = {gerente, lider};\n        for (Gestor gestor : gestores) {\n            gestor.dirigirEquipo();\n            gestor.organizarReunion(); // M\u00e9todo default\n            System.out.println();\n        }\n\n        System.out.println(\"=== CAPACITACI\u00d3N ===\");\n        if (lider instanceof Capacitador) {\n            Capacitador capacitador = (Capacitador) lider;\n            capacitador.darCapacitacion(\"Java\");\n            capacitador.darCapacitacion(\"React\");\n        }\n\n        // M\u00e9todo est\u00e1tico\n        Capacitador.mostrarTemasPrincipales();\n    }\n}\n</code></pre>"},{"location":"content/p9/#diferencias-entre-clases-abstractas-e-interfaces","title":"Diferencias entre Clases Abstractas e Interfaces","text":"Aspecto Clases Abstractas Interfaces Herencia Una clase puede heredar de una sola clase abstracta Una clase puede implementar m\u00faltiples interfaces M\u00e9todos Pueden tener m\u00e9todos abstractos y concretos M\u00e9todos abstractos, default y est\u00e1ticos (Java 8+) Variables Pueden tener variables de instancia Solo constantes (public static final) Constructor Pueden tener constructores No pueden tener constructores Modificadores M\u00e9todos pueden tener cualquier modificador M\u00e9todos son impl\u00edcitamente public Uso Cuando hay c\u00f3digo com\u00fan a compartir Cuando se define un contrato de comportamiento"},{"location":"content/p9/#ventajas-de-las-interfaces","title":"Ventajas de las Interfaces","text":"<ul> <li>Flexibilidad: Permiten implementaci\u00f3n m\u00faltiple, proporcionando mayor flexibilidad en el dise\u00f1o.</li> <li>Desacoplamiento: Reducen el acoplamiento entre clases al definir contratos claros.</li> <li>Polimorfismo: Facilitan el polimorfismo y el intercambio de implementaciones.</li> <li>Testabilidad: Mejoran la testabilidad al permitir crear mocks e implementaciones de prueba.</li> <li>Evoluci\u00f3n: Los m\u00e9todos default permiten evolucionar las interfaces sin romper el c\u00f3digo existente.</li> </ul>"},{"location":"content/p9/#cuando-usar-interfaces-vs-clases-abstractas","title":"Cu\u00e1ndo Usar Interfaces vs Clases Abstractas","text":"<p>Usa Interfaces cuando: * Necesites implementaci\u00f3n m\u00faltiple * Quieras definir un contrato de comportamiento * Las clases que implementan la interfaz no est\u00e1n relacionadas jer\u00e1rquicamente * Necesites m\u00e1xima flexibilidad</p> <p>Usa Clases Abstractas cuando: * Tengas c\u00f3digo com\u00fan que compartir entre clases relacionadas * Quieras proporcionar una implementaci\u00f3n parcial * Las clases est\u00e1n relacionadas jer\u00e1rquicamente * Necesites variables de instancia o constructores</p> <p>Las interfaces son una herramienta poderosa que, combinada con clases abstractas, proporciona un sistema robusto para crear aplicaciones bien estructuradas y mantenibles en Java.</p>"},{"location":"guides/p1/","title":"Semana 7 - Herencia en Java: Sistema de Empleados Colombiano","text":"<p>Este documento describe la implementaci\u00f3n de herencia en Java para un sistema de gesti\u00f3n de empleados de una empresa colombiana, con una clase padre <code>Empleado</code> y dos clases hijas (<code>EmpleadoTiempoCompleto</code> y <code>EmpleadoContratista</code>), incluyendo c\u00e1lculos de n\u00f3mina y beneficios aplicables al contexto laboral colombiano.</p>"},{"location":"guides/p1/#estructura-de-las-clases","title":"Estructura de las Clases","text":""},{"location":"guides/p1/#clase-padre-empleado","title":"Clase Padre: Empleado","text":"<p>Atributos:</p> <ul> <li><code>nombre</code> (String): Nombre completo del empleado (ej. \"Carlos Andr\u00e9s P\u00e9rez\").</li> <li><code>cedula</code> (String): N\u00famero de c\u00e9dula de ciudadan\u00eda colombiana.</li> <li><code>cargo</code> (String): Cargo o posici\u00f3n en la empresa (ej. \"Desarrollador\", \"Contador\").</li> <li><code>salarioBase</code> (double): Salario base mensual en pesos colombianos (COP).</li> <li><code>fechaIngreso</code> (String): Fecha de ingreso a la empresa en formato \"dd/mm/yyyy\".</li> </ul> <p>M\u00e9todos y L\u00f3gica de Negocio:</p> <ul> <li><code>calcularSalud()</code>: Calcula el descuento de salud (4% del salario base) seg\u00fan la ley colombiana.</li> <li><code>calcularPension()</code>: Calcula el descuento de pensi\u00f3n (4% del salario base) seg\u00fan la ley colombiana.</li> <li><code>calcularARL()</code>: Calcula el aporte de ARL (0.522% del salario base) que paga la empresa.</li> <li><code>obtenerInformacion()</code>: Devuelve informaci\u00f3n completa del empleado para reportes de n\u00f3mina.</li> <li><code>calcularAntiguedad()</code>: Calcula los a\u00f1os de antig\u00fcedad en la empresa.</li> </ul>"},{"location":"guides/p1/#clase-hija-empleadotiempocompleto","title":"Clase Hija: EmpleadoTiempoCompleto","text":"<p>Hereda de: Empleado Atributos adicionales:</p> <ul> <li><code>tieneTransporte</code> (boolean): Indica si recibe auxilio de transporte.</li> <li><code>tieneAlimentacion</code> (boolean): Indica si recibe auxilio de alimentaci\u00f3n.</li> <li><code>diasVacaciones</code> (int): D\u00edas de vacaciones acumulados (15 d\u00edas h\u00e1biles por a\u00f1o en Colombia).</li> </ul> <p>M\u00e9todos adicionales y L\u00f3gica de Negocio:</p> <ul> <li><code>calcularAuxilioTransporte()</code>: Calcula el auxilio de transporte ($140,606 COP en 2024) si aplica.</li> <li><code>calcularAuxilioAlimentacion()</code>: Calcula el auxilio de alimentaci\u00f3n si la empresa lo otorga.</li> <li><code>calcularPrimaServicios()</code>: Calcula la prima de servicios (un salario al a\u00f1o dividido en dos pagos).</li> <li><code>calcularCesantias()</code>: Calcula las cesant\u00edas (un salario por a\u00f1o trabajado).</li> <li><code>calcularInteresesCesantias()</code>: Calcula los intereses de cesant\u00edas (12% anual sobre las cesant\u00edas).</li> </ul>"},{"location":"guides/p1/#clase-hija-empleadocontratista","title":"Clase Hija: EmpleadoContratista","text":"<p>Hereda de: Empleado Atributos adicionales:</p> <ul> <li><code>tipoContrato</code> (String): Tipo de contrato (\"Prestaci\u00f3n de servicios\", \"Obra labor\").</li> <li><code>fechaFinContrato</code> (String): Fecha de finalizaci\u00f3n del contrato.</li> <li><code>horasTrabajadas</code> (int): Horas trabajadas en el mes.</li> </ul> <p>M\u00e9todos adicionales y L\u00f3gica de Negocio:</p> <ul> <li><code>calcularRetencionFuente()</code>: Calcula la retenci\u00f3n en la fuente seg\u00fan la tabla de retenciones colombiana.</li> <li><code>calcularICA()</code>: Calcula el impuesto de Industria y Comercio (var\u00eda por municipio, promedio 0.7%).</li> <li><code>calcularPagoMensual()</code>: Calcula el pago mensual basado en horas trabajadas.</li> <li><code>verificarEstadoContrato()</code>: Verifica si el contrato est\u00e1 vigente o pr\u00f3ximo a vencer.</li> <li><code>calcularFacturacion()</code>: Calcula el valor total a facturar incluyendo IVA (19%).</li> </ul>"},{"location":"guides/p1/#explicacion-de-la-herencia","title":"Explicaci\u00f3n de la Herencia","text":"<ul> <li>La clase <code>Empleado</code> proporciona funcionalidades b\u00e1sicas comunes a todos los empleados de una empresa colombiana.</li> <li>Las clases hijas (<code>EmpleadoTiempoCompleto</code>, <code>EmpleadoContratista</code>) a\u00f1aden caracter\u00edsticas espec\u00edficas seg\u00fan el tipo de vinculaci\u00f3n laboral.</li> <li>La herencia permite reutilizar c\u00f3digo com\u00fan (como c\u00e1lculos de salud y pensi\u00f3n) mientras cada clase hija maneja sus particularidades.</li> <li>Los m\u00e9todos se adaptan al contexto laboral colombiano: auxilios, prestaciones sociales, retenciones, etc.</li> <li>Esta estructura es ideal para sistemas de n\u00f3mina, recursos humanos o contabilidad en empresas colombianas.</li> </ul>"},{"location":"guides/p1/#implementacion-en-java","title":"Implementaci\u00f3n en Java","text":""},{"location":"guides/p1/#clase-padre-empleado_1","title":"Clase Padre: Empleado","text":"<pre><code>public class Empleado {\n    protected String nombre;\n    protected String cedula;\n    protected String cargo;\n    protected double salarioBase;\n    protected String fechaIngreso;\n\n    // Constructor\n    public Empleado(String nombre, String cedula, String cargo, double salarioBase, String fechaIngreso) {\n        this.nombre = nombre;\n        this.cedula = cedula;\n        this.cargo = cargo;\n        this.salarioBase = salarioBase;\n        this.fechaIngreso = fechaIngreso;\n    }\n\n    // Getters y Setters\n    public String getNombre() { return nombre; }\n    public void setNombre(String nombre) { this.nombre = nombre; }\n\n    public String getCedula() { return cedula; }\n    public void setCedula(String cedula) { this.cedula = cedula; }\n\n    public String getCargo() { return cargo; }\n    public void setCargo(String cargo) { this.cargo = cargo; }\n\n    public double getSalarioBase() { return salarioBase; }\n    public void setSalarioBase(double salarioBase) { this.salarioBase = salarioBase; }\n\n    public String getFechaIngreso() { return fechaIngreso; }\n    public void setFechaIngreso(String fechaIngreso) { this.fechaIngreso = fechaIngreso; }\n\n    // M\u00e9todos de l\u00f3gica de negocio\n    public double calcularSalud() {\n        return salarioBase * 0.04; // 4% del salario base\n    }\n\n    public double calcularPension() {\n        return salarioBase * 0.04; // 4% del salario base\n    }\n\n    public double calcularARL() {\n        return salarioBase * 0.00522; // 0.522% del salario base\n    }\n\n    public String obtenerInformacion() {\n        return \"Empleado: \" + nombre + \" - C\u00e9dula: \" + cedula + \" - Cargo: \" + cargo + \n               \" - Salario Base: $\" + String.format(\"%.0f\", salarioBase);\n    }\n\n    public int calcularAntiguedad() {\n        // L\u00f3gica simplificada - en implementaci\u00f3n real se calcular\u00eda con fechas\n        return 2; // Ejemplo: 2 a\u00f1os de antig\u00fcedad\n    }\n}\n</code></pre>"},{"location":"guides/p1/#clase-hija-empleadotiempocompleto_1","title":"Clase Hija: EmpleadoTiempoCompleto","text":"<pre><code>public class EmpleadoTiempoCompleto extends Empleado {\n    private boolean tieneTransporte;\n    private boolean tieneAlimentacion;\n    private int diasVacaciones;\n\n    // Constructor\n    public EmpleadoTiempoCompleto(String nombre, String cedula, String cargo, double salarioBase, \n                                  String fechaIngreso, boolean tieneTransporte, boolean tieneAlimentacion) {\n        super(nombre, cedula, cargo, salarioBase, fechaIngreso);\n        this.tieneTransporte = tieneTransporte;\n        this.tieneAlimentacion = tieneAlimentacion;\n        this.diasVacaciones = 15; // 15 d\u00edas h\u00e1biles por a\u00f1o\n    }\n\n    // Getters y Setters espec\u00edficos\n    public boolean isTieneTransporte() { return tieneTransporte; }\n    public void setTieneTransporte(boolean tieneTransporte) { this.tieneTransporte = tieneTransporte; }\n\n    public boolean isTieneAlimentacion() { return tieneAlimentacion; }\n    public void setTieneAlimentacion(boolean tieneAlimentacion) { this.tieneAlimentacion = tieneAlimentacion; }\n\n    public int getDiasVacaciones() { return diasVacaciones; }\n    public void setDiasVacaciones(int diasVacaciones) { this.diasVacaciones = diasVacaciones; }\n\n    // M\u00e9todos espec\u00edficos de empleado tiempo completo\n    public double calcularAuxilioTransporte() {\n        if (tieneTransporte &amp;&amp; salarioBase &lt;= 2320000) { // Solo si gana menos de 2 SMMLV\n            return 140606; // Auxilio de transporte 2024\n        }\n        return 0;\n    }\n\n    public double calcularAuxilioAlimentacion() {\n        return tieneAlimentacion ? 150000 : 0; // Ejemplo: $150,000 COP\n    }\n\n    public double calcularPrimaServicios() {\n        return salarioBase; // Un salario completo al a\u00f1o (dividido en dos pagos)\n    }\n\n    public double calcularCesantias() {\n        return salarioBase * calcularAntiguedad(); // Un salario por a\u00f1o trabajado\n    }\n\n    public double calcularInteresesCesantias() {\n        return calcularCesantias() * 0.12; // 12% anual sobre las cesant\u00edas\n    }\n\n    public double calcularSalarioTotal() {\n        double descuentos = calcularSalud() + calcularPension();\n        double auxilios = calcularAuxilioTransporte() + calcularAuxilioAlimentacion();\n        return salarioBase - descuentos + auxilios;\n    }\n}\n</code></pre>"},{"location":"guides/p1/#clase-hija-empleadocontratista_1","title":"Clase Hija: EmpleadoContratista","text":"<pre><code>public class EmpleadoContratista extends Empleado {\n    private String tipoContrato;\n    private String fechaFinContrato;\n    private int horasTrabajadas;\n\n    // Constructor\n    public EmpleadoContratista(String nombre, String cedula, String cargo, double salarioBase,\n                               String fechaIngreso, String tipoContrato, String fechaFinContrato) {\n        super(nombre, cedula, cargo, salarioBase, fechaIngreso);\n        this.tipoContrato = tipoContrato;\n        this.fechaFinContrato = fechaFinContrato;\n        this.horasTrabajadas = 0;\n    }\n\n    // Getters y Setters espec\u00edficos\n    public String getTipoContrato() { return tipoContrato; }\n    public void setTipoContrato(String tipoContrato) { this.tipoContrato = tipoContrato; }\n\n    public String getFechaFinContrato() { return fechaFinContrato; }\n    public void setFechaFinContrato(String fechaFinContrato) { this.fechaFinContrato = fechaFinContrato; }\n\n    public int getHorasTrabajadas() { return horasTrabajadas; }\n    public void setHorasTrabajadas(int horasTrabajadas) { this.horasTrabajadas = horasTrabajadas; }\n\n    // M\u00e9todos espec\u00edficos de contratista\n    public double calcularRetencionFuente() {\n        if (salarioBase &gt; 3500000) { // Si supera cierto monto\n            return salarioBase * 0.11; // 11% de retenci\u00f3n\n        }\n        return 0;\n    }\n\n    public double calcularICA() {\n        return salarioBase * 0.007; // 0.7% promedio de ICA\n    }\n\n    public double calcularPagoMensual() {\n        double valorHora = salarioBase / 160; // Asumiendo 160 horas mensuales\n        return valorHora * horasTrabajadas;\n    }\n\n    public boolean verificarEstadoContrato() {\n        // L\u00f3gica simplificada - en implementaci\u00f3n real se comparar\u00edan fechas\n        return true; // Contrato vigente\n    }\n\n    public double calcularFacturacion() {\n        double subtotal = calcularPagoMensual();\n        double iva = subtotal * 0.19; // 19% de IVA\n        return subtotal + iva;\n    }\n\n    public double calcularPagoNeto() {\n        double pagoTotal = calcularPagoMensual();\n        double retenciones = calcularRetencionFuente() + calcularICA();\n        return pagoTotal - retenciones;\n    }\n}\n</code></pre>"},{"location":"guides/p1/#clase-principal-sistemaempleados","title":"Clase Principal: SistemaEmpleados","text":"<pre><code>public class SistemaEmpleados {\n    public static void main(String[] args) {\n        // Crear empleado tiempo completo\n        EmpleadoTiempoCompleto empleado1 = new EmpleadoTiempoCompleto(\n            \"Mar\u00eda Fernanda L\u00f3pez\", \"1234567890\", \"Desarrolladora Senior\", \n            4500000, \"15/01/2022\", true, true\n        );\n\n        // Crear empleado contratista\n        EmpleadoContratista empleado2 = new EmpleadoContratista(\n            \"Juan Carlos Rodr\u00edguez\", \"0987654321\", \"Consultor IT\",\n            6000000, \"01/03/2024\", \"Prestaci\u00f3n de servicios\", \"31/12/2024\"\n        );\n        empleado2.setHorasTrabajadas(120);\n\n        // Demostrar funcionalidades del empleado tiempo completo\n        System.out.println(\"=== EMPLEADO TIEMPO COMPLETO ===\");\n        System.out.println(empleado1.obtenerInformacion());\n        System.out.println(\"Descuento Salud: $\" + String.format(\"%.0f\", empleado1.calcularSalud()));\n        System.out.println(\"Descuento Pensi\u00f3n: $\" + String.format(\"%.0f\", empleado1.calcularPension()));\n        System.out.println(\"Auxilio Transporte: $\" + String.format(\"%.0f\", empleado1.calcularAuxilioTransporte()));\n        System.out.println(\"Auxilio Alimentaci\u00f3n: $\" + String.format(\"%.0f\", empleado1.calcularAuxilioAlimentacion()));\n        System.out.println(\"Prima de Servicios: $\" + String.format(\"%.0f\", empleado1.calcularPrimaServicios()));\n        System.out.println(\"Cesant\u00edas: $\" + String.format(\"%.0f\", empleado1.calcularCesantias()));\n        System.out.println(\"Salario Total: $\" + String.format(\"%.0f\", empleado1.calcularSalarioTotal()));\n\n        System.out.println(\"\\n=== EMPLEADO CONTRATISTA ===\");\n        System.out.println(empleado2.obtenerInformacion());\n        System.out.println(\"Horas Trabajadas: \" + empleado2.getHorasTrabajadas());\n        System.out.println(\"Pago por Horas: $\" + String.format(\"%.0f\", empleado2.calcularPagoMensual()));\n        System.out.println(\"Retenci\u00f3n Fuente: $\" + String.format(\"%.0f\", empleado2.calcularRetencionFuente()));\n        System.out.println(\"ICA: $\" + String.format(\"%.0f\", empleado2.calcularICA()));\n        System.out.println(\"Facturaci\u00f3n Total (con IVA): $\" + String.format(\"%.0f\", empleado2.calcularFacturacion()));\n        System.out.println(\"Pago Neto: $\" + String.format(\"%.0f\", empleado2.calcularPagoNeto()));\n        System.out.println(\"Estado Contrato: \" + (empleado2.verificarEstadoContrato() ? \"Vigente\" : \"Vencido\"));\n    }\n}\n</code></pre> <p>Este ejemplo demuestra: - Herencia simple: Las clases hijas heredan atributos y m\u00e9todos de la clase padre - Encapsulaci\u00f3n: Uso de getters y setters para controlar el acceso a los atributos - L\u00f3gica de negocio colombiana: C\u00e1lculos espec\u00edficos del contexto laboral colombiano - Reutilizaci\u00f3n de c\u00f3digo: Los m\u00e9todos comunes se definen una vez en la clase padre - Especializaci\u00f3n: Cada clase hija a\u00f1ade funcionalidades espec\u00edficas a su tipo de empleado</p>"},{"location":"guides/p2/","title":"Semana 9 - Clases Abstractas, M\u00e9todos Abstractos e Interfaces en Java (POO)","text":""},{"location":"guides/p2/#contexto","title":"Contexto","text":"<p>Imagina que est\u00e1s desarrollando un sistema para gestionar alimentos t\u00edpicos de Medell\u00edn, como la bandeja paisa, el mondongo y el postre de arequipe. El sistema debe permitir describir los alimentos, prepararlos y clasificarlos seg\u00fan si son platos principales o postres. Usaremos clases abstractas, m\u00e9todos abstractos e interfaces para modelar este sistema de forma clara y modular.</p> <p>Este ejemplo proporciona indicaciones para que implementes el c\u00f3digo, sin mostrar la soluci\u00f3n completa. El objetivo es que comprendas c\u00f3mo usar estos conceptos de POO en un escenario simple y pr\u00e1ctico.</p>"},{"location":"guides/p2/#requisitos-del-sistema","title":"Requisitos del Sistema","text":"<ol> <li> <p>Clase Abstracta <code>Alimento</code>:</p> <ul> <li>Representa un alimento gen\u00e9rico con atributos comunes como <code>nombre</code> (String) y <code>precio</code> (double).</li> <li>Debe incluir un m\u00e9todo concreto para mostrar la informaci\u00f3n del alimento (por ejemplo, <code>mostrarInformacion()</code>).</li> <li>Debe incluir un m\u00e9todo abstracto <code>preparar()</code> que cada tipo de alimento implementar\u00e1 de forma espec\u00edfica.</li> </ul> </li> <li> <p>Interfaz <code>Clasificable</code>:</p> <ul> <li>Define un m\u00e9todo para clasificar el alimento, por ejemplo, <code>clasificar()</code>, que indica si es un plato principal o un postre.</li> </ul> </li> <li> <p>Clases Concretas:</p> <ul> <li><code>BandejaPaisa</code>: Un plato principal que extiende <code>Alimento</code> e implementa <code>Clasificable</code>.</li> <li><code>Mondongo</code>: Otro plato principal que extiende <code>Alimento</code> e implementa <code>Clasificable</code>.</li> <li><code>Arequipe</code>: Un postre que solo implementa <code>Clasificable</code> (no extiende <code>Alimento</code>, para mostrar que las interfaces pueden usarse sin herencia).</li> </ul> </li> <li> <p>Clase Principal:</p> <ul> <li>Debe demostrar el uso de polimorfismo creando instancias de los alimentos y llamando a sus m\u00e9todos a trav\u00e9s de referencias de tipo <code>Alimento</code> y <code>Clasificable</code>.</li> </ul> </li> </ol>"},{"location":"guides/p2/#indicaciones-para-la-implementacion","title":"Indicaciones para la Implementaci\u00f3n","text":""},{"location":"guides/p2/#1-crear-la-clase-abstracta-alimento","title":"1. Crear la Clase Abstracta <code>Alimento</code>","text":"<ul> <li>Declara la clase con la palabra clave <code>abstract</code>.</li> <li>Define dos atributos: <code>nombre</code> (String) y <code>precio</code> (double).</li> <li>Crea un constructor que inicialice estos atributos.</li> <li>Implementa un m\u00e9todo concreto <code>mostrarInformacion()</code> que imprima el nombre y precio del alimento.</li> <li>Declara un m\u00e9todo abstracto <code>preparar()</code> sin implementaci\u00f3n (termina con <code>;</code>).</li> </ul> <p>Indicaci\u00f3n: <pre><code>abstract class Alimento {\n    // Atributos\n    // Constructor\n    // M\u00e9todo concreto: mostrarInformacion()\n    // M\u00e9todo abstracto: preparar()\n}\n</code></pre></p>"},{"location":"guides/p2/#2-crear-la-interfaz-clasificable","title":"2. Crear la Interfaz <code>Clasificable</code>","text":"<ul> <li>Declara una interfaz con la palabra clave <code>interface</code>.</li> <li>Define un m\u00e9todo abstracto <code>clasificar()</code> que no tenga implementaci\u00f3n.</li> <li>Opcionalmente, a\u00f1ade un m\u00e9todo <code>default</code> llamado <code>anunciar()</code> que imprima un mensaje gen\u00e9rico como \"\u00a1Disfruta de la comida paisa!\".</li> </ul> <p>Indicaci\u00f3n: <pre><code>interface Clasificable {\n    // M\u00e9todo abstracto: clasificar()\n    // M\u00e9todo default: anunciar() (opcional)\n}\n</code></pre></p>"},{"location":"guides/p2/#3-crear-la-clase-bandejapaisa","title":"3. Crear la Clase <code>BandejaPaisa</code>","text":"<ul> <li>Extiende la clase <code>Alimento</code> usando <code>extends</code>.</li> <li>Implementa la interfaz <code>Clasificable</code> usando <code>implements</code>.</li> <li>Crea un constructor que pase los par\u00e1metros <code>nombre</code> y <code>precio</code> al constructor de <code>Alimento</code>.</li> <li>Implementa el m\u00e9todo <code>preparar()</code> para describir c\u00f3mo se prepara una bandeja paisa (por ejemplo, \"Preparando bandeja paisa con chicharr\u00f3n, frijoles y arroz\").</li> <li>Implementa el m\u00e9todo <code>clasificar()</code> para indicar que es un plato principal.</li> </ul> <p>Indicaci\u00f3n: <pre><code>class BandejaPaisa extends Alimento implements Clasificable {\n    // Constructor\n    // Implementar preparar()\n    // Implementar clasificar()\n}\n</code></pre></p>"},{"location":"guides/p2/#4-crear-la-clase-mondongo","title":"4. Crear la Clase <code>Mondongo</code>","text":"<ul> <li>Similar a <code>BandejaPaisa</code>, extiende <code>Alimento</code> e implementa <code>Clasificable</code>.</li> <li>En <code>preparar()</code>, describe la preparaci\u00f3n del mondongo (por ejemplo, \"Cocinando mondongo con callos y verduras\").</li> <li>En <code>clasificar()</code>, indica que es un plato principal.</li> </ul> <p>Indicaci\u00f3n: <pre><code>class Mondongo extends Alimento implements Clasificable {\n    // Constructor\n    // Implementar preparar()\n    // Implementar clasificar()\n}\n</code></pre></p>"},{"location":"guides/p2/#5-crear-la-clase-arequipe","title":"5. Crear la Clase <code>Arequipe</code>","text":"<ul> <li>Solo implementa <code>Clasificable</code> (no extiende <code>Alimento</code> para mostrar la flexibilidad de las interfaces).</li> <li>Define un atributo propio, como <code>tipo</code> (String, por ejemplo, \"postre de leche\").</li> <li>Implementa <code>clasificar()</code> para indicar que es un postre.</li> </ul> <p>Indicaci\u00f3n: <pre><code>class Arequipe implements Clasificable {\n    // Atributo tipo\n    // Constructor\n    // Implementar clasificar()\n}\n</code></pre></p>"},{"location":"guides/p2/#6-crear-la-clase-principal","title":"6. Crear la Clase Principal","text":"<ul> <li>Crea una clase <code>Main</code> con un m\u00e9todo <code>main</code>.</li> <li>Instancia un objeto de <code>BandejaPaisa</code>, uno de <code>Mondongo</code> y uno de <code>Arequipe</code>.</li> <li>Usa un arreglo de tipo <code>Alimento</code> para almacenar <code>BandejaPaisa</code> y <code>Mondongo</code>, y llama a <code>mostrarInformacion()</code> y <code>preparar()</code> para demostrar polimorfismo.</li> <li>Usa un arreglo de tipo <code>Clasificable</code> para almacenar los tres objetos y llama a <code>clasificar()</code> (y <code>anunciar()</code> si usaste un m\u00e9todo <code>default</code>).</li> <li>Opcionalmente, usa <code>instanceof</code> y casting para acceder a un m\u00e9todo espec\u00edfico de <code>BandejaPaisa</code>.</li> </ul> <p>Indicaci\u00f3n: <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Crear instancias\n        // Arreglo de Alimento para polimorfismo\n        // Arreglo de Clasificable para polimorfismo\n        // Opcional: usar instanceof y casting\n    }\n}\n</code></pre></p>"},{"location":"guides/p2/#objetivos-educativos","title":"Objetivos Educativos","text":"<ul> <li>Clase Abstracta: Entender c\u00f3mo <code>Alimento</code> proporciona una base com\u00fan con atributos y m\u00e9todos compartidos, y c\u00f3mo <code>preparar()</code> fuerza a las clases hijas a definir su propia l\u00f3gica.</li> <li>Interfaz: Comprender que <code>Clasificable</code> permite que clases no relacionadas (como <code>Arequipe</code>) compartan un comportamiento com\u00fan.</li> <li>Polimorfismo: Ver c\u00f3mo se pueden usar referencias de tipo <code>Alimento</code> y <code>Clasificable</code> para tratar objetos de manera uniforme.</li> <li>M\u00e9todos Abstractos: Reconocer que <code>preparar()</code> y <code>clasificar()</code> obligan a las clases concretas a proporcionar implementaciones espec\u00edficas.</li> <li>M\u00e9todo <code>default</code> (opcional): Explorar c\u00f3mo una interfaz puede incluir l\u00f3gica compartida.</li> </ul>"},{"location":"guides/p2/#solucion","title":"Soluci\u00f3n","text":"<pre><code>// Interfaz Clasificable: Define un comportamiento para clasificar alimentos\ninterface Clasificable {\n    // M\u00e9todo abstracto para clasificar el alimento\n    void clasificar();\n\n    // M\u00e9todo default para anunciar el alimento\n    default void anunciar() {\n        System.out.println(\"\u00a1Disfruta de la comida paisa!\");\n    }\n}\n\n// Clase abstracta Alimento: Base para los alimentos t\u00edpicos\nabstract class Alimento {\n    protected String nombre;\n    protected double precio;\n\n    // Constructor\n    public Alimento(String nombre, double precio) {\n        this.nombre = nombre;\n        this.precio = precio;\n    }\n\n    // M\u00e9todo concreto para mostrar informaci\u00f3n\n    public void mostrarInformacion() {\n        System.out.println(\"Alimento: \" + nombre + \", Precio: $\" + precio);\n    }\n\n    // M\u00e9todo abstracto para preparar el alimento\n    public abstract void preparar();\n}\n\n// Clase BandejaPaisa: Extiende Alimento e implementa Clasificable\nclass BandejaPaisa extends Alimento implements Clasificable {\n    public BandejaPaisa(String nombre, double precio) {\n        super(nombre, precio);\n    }\n\n    @Override\n    public void preparar() {\n        System.out.println(\"Preparando \" + nombre + \" con chicharr\u00f3n, frijoles, arroz y aguacate.\");\n    }\n\n    @Override\n    public void clasificar() {\n        System.out.println(nombre + \" es un plato principal.\");\n    }\n}\n\n// Clase Mondongo: Extiende Alimento e implementa Clasificable\nclass Mondongo extends Alimento implements Clasificable {\n    public Mondongo(String nombre, double precio) {\n        super(nombre, precio);\n    }\n\n    @Override\n    public void preparar() {\n        System.out.println(\"Cocinando \" + nombre + \" con callos, verduras y especias.\");\n    }\n\n    @Override\n    public void clasificar() {\n        System.out.println(nombre + \" es un plato principal.\");\n    }\n}\n\n// Clase Arequipe: Solo implementa Clasificable\nclass Arequipe implements Clasificable {\n    private String tipo;\n\n    public Arequipe(String tipo) {\n        this.tipo = tipo;\n    }\n\n    @Override\n    public void clasificar() {\n        System.out.println(\"Arequipe (\" + tipo + \") es un postre.\");\n    }\n}\n\n// Clase principal para demostrar el uso\npublic class Main {\n    public static void main(String[] args) {\n         // Crear instancias de los alimentos\n        Alimento bandeja = new BandejaPaisa(\"Bandeja Paisa\", 35000.0);\n        Alimento mondongo = new Mondongo(\"Mondongo Antioque\u00f1o\", 25000.0);\n        Clasificable arequipe = new Arequipe(\"postre de leche\");\n\n        // Demostrar polimorfismo con clase abstracta Alimento\n        System.out.println(\"=== Informaci\u00f3n y Preparaci\u00f3n de Alimentos ===\");\n        Alimento[] alimentos = {bandeja, mondongo};\n        for (Alimento alimento : alimentos) {\n            alimento.mostrarInformacion();\n            alimento.preparar();\n        }\n\n        // Demostrar polimorfismo con interfaz Clasificable\n        System.out.println(\"\\n=== Clasificaci\u00f3n de Alimentos ===\");\n        Clasificable[] clasificables = {(Clasificable) bandeja, (Clasificable) mondongo, arequipe};\n        for (Clasificable clasificable : clasificables) {\n            clasificable.anunciar();\n            clasificable.clasificar();\n        }\n\n    }\n}\n</code></pre>"},{"location":"pi/p1/","title":"Proyecto Integrador","text":""},{"location":"pi/p1/#paso-1-realizar-fork-solo-lider","title":"Paso 1: Realizar Fork (Solo L\u00edder)","text":"<pre><code>https://github.com/jfinfocesde/pi_backend1.git\n</code></pre> <ol> <li>Navega al repositorio base del proyecto en GitHub</li> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino del fork</li> <li>Espera a que se complete el proceso de fork</li> </ol>"},{"location":"pi/p1/#paso-2-fork-del-repositorio-del-lider-demas-integrantes","title":"Paso 2: Fork del Repositorio del L\u00edder (Dem\u00e1s Integrantes)","text":"<p>Para los dem\u00e1s integrantes del equipo:</p> <ol> <li>El l\u00edder debe compartir la URL de su fork: <code>https://github.com/USUARIO_LIDER/pi_backend1.git</code></li> <li>Cada integrante debe hacer fork del repositorio del l\u00edder (NO del repositorio base original)</li> <li>Navega al repositorio del l\u00edder en GitHub</li> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino del fork</li> </ol>"},{"location":"pi/p1/#paso-3-clonar-tu-fork","title":"Paso 3: Clonar tu Fork","text":"<pre><code>git clone https://github.com/TU_USUARIO/pi_backend1.git\ncd pi_backend1\ncode .\n</code></pre>"},{"location":"pi/p2/","title":"CRITERIOS DE EVALUACI\u00d3N DEL PROYECTO INTEGRADOR","text":"<ul> <li>La exposici\u00f3n del proyecto ser\u00e1 grabada en audio para su evaluaci\u00f3n.  </li> <li>El archivo de audio de la exposici\u00f3n se almacenar\u00e1 como evidencia.  </li> <li>La presentaci\u00f3n del proyecto debe incluir una serie de diapositivas que complementen la exposici\u00f3n oral.  </li> <li>Es obligatorio cumplir estrictamente con los criterios establecidos, el tiempo asignado y las indicaciones para la presentaci\u00f3n de diapositivas.  </li> <li>La evaluaci\u00f3n ser\u00e1 realizada con inteligencia.  </li> </ul>"},{"location":"pi/p2/#criterios-de-evaluacion","title":"Criterios de Evaluaci\u00f3n","text":"# Descripci\u00f3n Peso 1 Presentaci\u00f3n individual de miembros, roles y tipo de participaci\u00f3n en el proyecto. 10 % 2 Claridad en la presentaci\u00f3n del prop\u00f3sito y objetivos generales del proyecto. 10 % 3 Demostraci\u00f3n en vivo descriptiva del funcionamiento de la aplicaci\u00f3n web desarrollada con Java y Vaadin. 15 % 4 Explicaci\u00f3n de la arquitectura y c\u00f3digo en Java y Vaadin, enfatizando POO en Java: clases para componentes, propiedades para atributos, encapsulaci\u00f3n para contexto, y dem\u00e1s conceptos. 20 % 5 Descripci\u00f3n de tecnolog\u00edas utilizadas, sus prop\u00f3sitos y justificaci\u00f3n de uso en el proyecto. 10 % 6 Presentaci\u00f3n de conclusiones, logros alcanzados, dificultades encontradas y aprendizajes obtenidos. 10 % 7 Calidad de la expresi\u00f3n oral individual (claridad, fluidez verbal y pertinencia del vocabulario t\u00e9cnico utilizado por cada estudiante durante su intervenci\u00f3n en la exposici\u00f3n del proyecto) y equidad en la distribuci\u00f3n de las intervenciones entre todos los miembros del equipo. 15 % 8 Duraci\u00f3n m\u00ednima de la exposici\u00f3n: 30 minutos 10 %"},{"location":"pi/p2/#horarios-de-presentacion-por-equipos","title":"Horarios de Presentaci\u00f3n por Equipos","text":"Grupo Hora Nombres Apellidos 1 7:30 Daniel Mart\u00ednez Echavarr\u00eda Britany Montoya Tirado Brandon Ciro Ortiz Samuel Hoyos Vanegas 2 8:00 Sebastian Alberto Pino Montoya Jefferson Suaza Vera Luisa Fernanda Yepez Ramirez 3 8:30 Santiago Bohorquez Salda\u00f1a Samuel Diaz Vanegas Mayra Alejandra Alzate Sanchez 4 9:00 Santiago Calderon Hernandez Kevin Velez Barrera Sebastian Hernandez Martinez Sharon Saray Asprilla C\u00f3rdoba Tatiana Marcela Julio Negrete 5 9:30 Darwin Cardenas Florez Samuel Ceballos Jeronimo Pareja Taborda Anderson Vanegas Jaramillo Johan Cadavid 6 10:00 Santiago Zapata Villada Santiago Avenda\u00f1o Upegui Samuel Mart\u00ednez Guzm\u00e1n Juan Diego Cano Juan Diego Londo\u00f1o"},{"location":"pi/p2/#notas-adicionales","title":"Notas Adicionales","text":"<ul> <li>La evaluaci\u00f3n se llevar\u00e1 a cabo el d\u00eda 28 de octubre de 2025, en el horario asignado a cada equipo. Todo el grupo debe estar presente durante toda la jornada 7:30 a 10:30 m.</li> <li>Es fundamental que todos los miembros del equipo participen activamente en la presentaci\u00f3n.</li> <li>Se recomienda practicar la presentaci\u00f3n con anticipaci\u00f3n para asegurar una exposici\u00f3n fluida y coherente.</li> <li>El archivo de las diapositivas deben subirsen a la carpeta de google drive y estar disponibles antes del d\u00eda de la presentaci\u00f3n.</li> <li>El archivo de audio (mp3) de la presentaci\u00f3n debe ser subido a la carpeta de google drive despu\u00e9s de la presentaci\u00f3n.</li> <li>El estudiante que no asista en la fecha y hora asignada perder\u00e1 autom\u00e1ticamente la oportunidad de presentar su proyecto integrador de forma grupal y deber\u00e1 presentar todo el proyecto integrador de forma individual en la semana 18.</li> </ul>"},{"location":"pi/p2/#evaluacion-momento-3","title":"Evaluaci\u00f3n momento 3","text":"<ul> <li>Conocimiento (30 %): Evaluacion de conocimientos teoricos y practicos sobre Java, POO.</li> <li>Desempe\u00f1o (30 %): Certificados cursos de Platzi.</li> <li>Producto (40 %): Presentaci\u00f3n del proyecto integrador en el aula. (Si se programa feria de proyectos, se evaluar\u00e1 la participaci\u00f3n en la feria).   </li> </ul>"}]}